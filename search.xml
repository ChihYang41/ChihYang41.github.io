<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>技術菜菜 2020 在幹嘛？2021 要幹嘛？</title>
    <url>/2021/01/02/2020-review/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2020 關於寫文章的回顧，以及 2021 的許願和規劃，讚喇。</p>
<span id="more"></span>

<h2 id="關於-Blog，關於寫文"><a href="#關於-Blog，關於寫文" class="headerlink" title="關於 Blog，關於寫文"></a>關於 Blog，關於寫文</h2><h3 id="2020-摸索寫作"><a href="#2020-摸索寫作" class="headerlink" title="2020 - 摸索寫作"></a>2020 - 摸索寫作</h3><p>寫文章這件事是我在 2020 這年摸索的一件事，以整個 2020 來說我的文章產量不算多，類型、文章風格、結構也不是很統一。</p>
<p>而文章產出少的原因可能有很多：</p>
<p>第一是我還在摸索寫文章這件事情，有些文章在寫的時候會文思泉湧，一下子就打完了，而且寫完之後的風格我通常會挺滿意的；另一種則是寫起來很不順，直到最後發布都還是覺得少了點甚麼，這種浮動的寫作感覺導致產出不是很穩定；</p>
<p>第二是對於「文章怎樣算是可以發布」這件事還沒拿個準，目前筆記區也算是有不少的筆記，只是都還沒發到 Blog 上，因為我不知道筆記類型這種很可能有錯誤而且很隨便的文章適不適合放上 Blog，雖然說發文章這件事是自己爽就好，發一堆很隨便的筆記也沒人管，但是對於「發文章好像就是要很好閱讀、理解，且研究徹底讓錯誤最小化」的想法還是常常揮之不去，導致每次都需要反覆斟酌後才會發布文章。（但這不代表我每篇文都寫很好的意思，別誤會，嗚嗚）</p>
<p>事發總有原因，我來下面列出 2020 文章大概有的類型，順便做個檢討：</p>
<p><strong>1. 認真研究型的文章</strong></p>
<p>「<strong>React Query、SWR 系列</strong>」、「<strong>Builder Pattern</strong>」屬於這個範疇，這部分的文章通常是先有一個契機，比如有興趣的 library、或者是讀書會當主講時的主題，接著再深入探索有興趣的地方。</p>
<p>比如「<strong>React Query、SWR 系列</strong>」就是基於我對於 cache、和圍繞 stale-while-revalidate 概念的 code 有興趣而探索的內容；「<strong>Builder Pattern</strong>」 則是在讀書會談到 Design Pattern 時我負責主講的內容。</p>
<p>這部分的文章我覺得是最有幫助的，因為通常是我吸收、研究後得來的心得，我可以用自己的話來向其他人闡述以外，內容也是印象最深刻的，未來想要 Blog 多一點這種文章，但這類型的文章不好產，因為會需要蠻多時間研究和吸收的，一個月產一篇應該就很不容易惹 QQ </p>
<p><strong>2. 生活、開發簡短日誌</strong></p>
<p>「<strong>第一次開源就緊張到手抖</strong>」、「<strong>Lidemy 打雜小弟心得</strong>」、「<strong>Back Forward Cache</strong>」是屬於這類型的文章，通常比較隨意，單純是寫爽的開發紀錄，所以寫起來最沒有壓力。</p>
<p>這類型的文章可能寫完只記得一部分，但我希望每隔一段時間就會有這類型的文章產出啦，畢竟 Blog 這種文章多一點會更有趣，不會單純只有很硬的技術文，也才能夠從這些日誌知道我整年都做了甚麼。</p>
<p><strong>3. 筆記類型</strong></p>
<p>其他沒提到的應該都是筆記，這類型比較尷尬，有部分是如果相關主題我印象不深、比較少用到的話，寫完我就會忘記，有時候回去翻文章才會發現欸幹原來我寫過相關的筆記喔！</p>
<p>這部分通常都是未完成的文章或單純想先放上來的學習筆記，之後應該也會多放一點這種筆記，什麼要先寫好才能放上來的原則就不管了，先放上來再說，不過我預計都會在標題加上「筆記」並且在前言警告內容會有諸多錯誤，避免誤導他人，至少我認為這是撰文者要擔負的責任啦。</p>
<h3 id="2021-之後想怎麼做？"><a href="#2021-之後想怎麼做？" class="headerlink" title="2021 - 之後想怎麼做？"></a>2021 - 之後想怎麼做？</h3><h4 id="分類"><a href="#分類" class="headerlink" title="分類"></a>分類</h4><p>2021 我想要按照上面提到的 2020 三種文章類型來做分類，其實現在的文章都沒按照這三種類型來分類啦，單純是我回顧時歸納出來的。</p>
<p>2021 每篇文都想按照這三種類別來分類。然後文章標題可能就會變成 <code>[筆記]</code>、<code>[技術]</code>、<code>[雜記]</code> 這樣來分類，好啦有點難分，但至少筆記要加上 tag，分清楚哪些是我隨手的筆記，哪些是我吸收過後的產出。</p>
<h4 id="主題預計有哪些？"><a href="#主題預計有哪些？" class="headerlink" title="主題預計有哪些？"></a>主題預計有哪些？</h4><p>這邊指的是「研究類型」的文章分類。</p>
<ol>
<li><strong>XState</strong></li>
<li><strong>Functional Programming</strong></li>
<li>CS 的基礎，比如一點點的 <strong>Data Structure</strong> 和 <strong>Algorithm</strong></li>
<li>其他還沒想到，但我覺得上面就夠我研究惹</li>
</ol>
<p>這些都只是預計啦，會選 XState 和 Functional Programming 是個人偏好，而且應該會更注重在 Functional Programming，因為最近覺得挺有趣的；Data Structure 和 Algorithm 則是認為自己很缺少的知識，想要找時間補齊。</p>
<h2 id="對於寫文章，我有怎麼樣的體會？"><a href="#對於寫文章，我有怎麼樣的體會？" class="headerlink" title="對於寫文章，我有怎麼樣的體會？"></a>對於寫文章，我有怎麼樣的體會？</h2><p>事發在某天騎車的靈光一現，那時候在回想我 2020 寫了哪些文章，想著哪些文章寫完會覺得最有成長？而這些文章有甚麼共通點？</p>
<p>想著想著發現，欸靠，我最能夠整理思緒、寫出更好文章的時機點是「<strong>當我要講解給其他人聽的時候</strong>」，比如 「<strong>React Query、SWR</strong>」是我在讀書會要講解最近使用的技術時寫出來的，過程是先整理出了簡報，講解給其他人聽之後，再寫成文章；「<strong>Builder Patter</strong>」一樣也是想講解給他人了解這個模式後寫出來的。</p>
<p>當理解「我能夠寫好文章的時機」的時候，我超開心的！至少有個方向把文章寫好了，2020 大部分時間寫文章時都有點迷茫，不知道怎樣動筆才好，在年尾的時候找到一點方向真的是讚 👍 未來應該也會試試看用這個方式來創作文章。</p>
<h2 id="2020-我研究了哪些東西？捨棄了哪些東西？"><a href="#2020-我研究了哪些東西？捨棄了哪些東西？" class="headerlink" title="2020 我研究了哪些東西？捨棄了哪些東西？"></a>2020 我研究了哪些東西？捨棄了哪些東西？</h2><h3 id="React、Storybook"><a href="#React、Storybook" class="headerlink" title="React、Storybook"></a>React、Storybook</h3><ul>
<li><strong><a href="https://frontendmasters.com/courses/intermediate-react-v2/">Intermediate React, v2</a></strong></li>
</ul>
<p>中階 React 課程，重新熟悉各種 hooks、接觸測試、API mocking 之類的，這課程對我最大的幫助是初次接觸 TypeScript，增加了一點對 TypeScript 的熟悉感。</p>
<ul>
<li><strong><a href="https://www.books.com.tw/products/0010870186">從 Hooks 開始，讓你的網頁 React 起來</a></strong></li>
</ul>
<p>這本書面向 React 初學者，因此如果單純照著書上的目標來寫挑戰性可能不太夠，因此我在這本書給自己的挑戰是改成用 TypeScript 來寫，過程的確也是遭受了一些轉換上的挫折啦，總的來說是一個不錯的挑戰。</p>
<ul>
<li><strong><a href="https://frontendmasters.com/courses/#my">Design Systems with React &amp; Storybook</a></strong></li>
</ul>
<p>上了 70%，一開始是單純有興趣，後來發現學了不知道用在哪，就先放著，直到最近公司專案開始有這個需求了，所以近期有可能會把它看完然後介紹給其他同事。</p>
<h3 id="XState"><a href="#XState" class="headerlink" title="XState"></a>XState</h3><ul>
<li><strong>看了 <a href="https://frontendmasters.com/courses/xstate/">State Machines in JavaScript with XState</a>、<a href="https://frontendmasters.com/workshops/xstate-react/">State Modeling with React and XState with David Khourshid</a></strong></li>
</ul>
<p>很喜歡 XState 的概念，用過有點回不去惹，目前使用上沒問題，但對於更大規模的 project 如何規劃、machine 怎麼切分還沒有個概念，實作上會有點無助，所以近期想寫幾篇文章和小 project 來介紹和玩玩它，增加熟悉的程度。</p>
<h3 id="Functional-Programming"><a href="#Functional-Programming" class="headerlink" title="Functional Programming"></a>Functional Programming</h3><ul>
<li><strong><a href="https://github.com/MostlyAdequate/mostly-adequate-guide">mostly-adequate-guide</a> 看到第九章</strong></li>
</ul>
<p>前面幾章還可以，但到了 Functor 的章節有點頭昏腦脹，覺得 FP 頗難，看來還沒開竅欸嗚嗚</p>
<ul>
<li><strong><a href="https://frontendmasters.com/courses/functional-javascript-v3/">Functional-Light JavaScript, v3</a></strong></li>
</ul>
<p>看到 Function Purity 章節，火熱進行中！目前感想是 Kyle 把每個細節都講得很完整，必須要多花好幾倍的時間研究；再者是因為內容太多，有時候不懂他真正想表達的意思。</p>
<p>FP 之路似乎有點艱辛，我會努力 der。</p>
<ul>
<li><strong><a href="https://egghead.io/lessons/javascript-refactoring-imperative-code-to-a-single-composed-expression-using-box">Professor Frisby Introduces Composable Functional JavaScript</a></strong></li>
</ul>
<p>用卡通人物的語氣講課我不是很習慣 XDD 而且節奏偏快，覺得現階段的自己還需要更多 FP 基礎才有辦法聽懂，所以等 Functional-Light JavaScript 再考慮要不要繼續看。</p>
<h3 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h3><ul>
<li><strong><a href="https://refactoringguru.cn/design-patterns/book">深入設計模式</a> 看了工廠模式、抽象工廠、生成器</strong></li>
</ul>
<p>自己實際有看的章節是工廠模式、抽象工廠、生成器，聽其他人講解的是責任鏈和命令模式，感想是缺少了實際的 OOP 應用的話，讀設計模式應該超容易忘記的，而且自己有實際研究、閱讀的 pattern 還算能夠記得，單純聽別人講解的超快就會忘掉。</p>
<h3 id="Udemy-其他課程"><a href="#Udemy-其他課程" class="headerlink" title="Udemy 其他課程"></a>Udemy 其他課程</h3><ul>
<li><strong><a href="https://www.udemy.com/course/the-complete-junior-to-senior-web-developer-roadmap/">The Complete Junior to Senior Web Developer Roadmap</a> 看到第三章放棄</strong></li>
</ul>
<p>發現自己現階段不適合這種大雜燴的 roadmap，一方面覺得什麼都聽了，但什麼都只懂一點點似乎沒太大用處；另一方面是時數實在是太長惹，光是打開壓力就好大。</p>
<p>我覺得自己似乎比較適合單一主題的課程，比如 FP 就專注講 FP；React 就專心講 React，什麼都講一點的我會有點沒耐性，以及有股沒學進去的不安全感。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>我覺得自己在 2020 不會很混，還算認真，下班時間或週末都會研究自己感興趣的東西，但關於成果，有沒有很好我不確定，大部分時間都是在不停探索，探索如何學習、如何在 Lidemy 課程畢業後持續成長、探索自己喜歡哪些技術、探索寫文、探索如何當個好助教。</p>
<p>這陣子學到的第一件事是發現當我要講解給他人聽某個概念的時候，因為怕其他人聽不懂、怕對方會失望等等，所以這時會是自己最認真研究、研究最透徹的時候，因為發現了這點，我就去參加或製造了幾個需要口頭講解技術的場合，比如 Lidemy 助教群讀書會、舉辦公司的讀書會等等，通常在這些場合當主講的主題，我會研究的蠻開心的，也會因此學到不少。</p>
<p>第二件事是跟隨著上一件事而增加的技能，就是口頭表達的能力，雖然有時候還是會語速太快，或卡到爆不知道自己在供三小，但是能夠好好組織語言、把一件事情講得清晰的能力有蠻明顯的提升，現在也懂的適時調整速度讓大家都對上同個頻率，對於把話語的架構好好組織這件事有提升一個層次。</p>
<p>第三是發現自己的詞彙量有夠少，寫文冗詞贅字也挺多的，需要多一點書籍的詞彙輸入，才能有比較多元的輸出。</p>
<p>總的來說，就是我 2021 會繼續加油喇，感謝一路幫助我的各位大大。</p>
]]></content>
      <categories>
        <category>雜記</category>
      </categories>
      <tags>
        <tag>廢文日記</tag>
      </tags>
  </entry>
  <entry>
    <title>淺談 AST 及 ESlint Rule：AST 是殺毀？（上）</title>
    <url>/2021/06/28/AST-and-ESLint-Introduction-part-1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>AST 和 ESlint Rule 是我近期在公司技術分享的主題，AST 是我一直想去了解。但是默默就拖延沒去研究的領域；ESlint Rule 則是既然都研究 AST 了，那總該有個實際應用的例子，所以就一併放進主題中了。</p>
<p>AST &amp; ESlint Rule 會分成上下兩章節，上半章節簡單介紹 AST，下半章節則是會透過兩個例子來了解 AST 在 ESlint 裡是如何被利用的，以及如何實際開發專屬自己的 ESlint Rule。</p>
<span id="more"></span>

<h2 id="Why-should-I-care？"><a href="#Why-should-I-care？" class="headerlink" title="Why should I care？"></a>Why should I care？</h2><p>AST 和我們日常開發常用到的工具息息相關，舉例來說，像是 babel：</p>
<p><img data-src="https://i.imgur.com/MBTRSCW.png"></p>
<p>透過 babel 的幫助，我們可以寫更新更潮的程式碼，再透過 babel 轉換得到較舊的語法，不必擔心寫新語法造成的相容問題。</p>
<p>又比如像是可以幫你做 cherry pick 的 babel plugin：</p>
<p><img data-src="https://i.imgur.com/KNYEZtH.png"></p>
<p>又者是 Eslint：<br><img data-src="https://i.imgur.com/bajBPUW.png"></p>
<p>透過 Eslint，除了檢查語法上的 coding style 以外，更可以提前偵錯，比如 import 路徑出錯：</p>
<p><img data-src="https://i.imgur.com/vpSYiXt.png"></p>
<p>又或者是 Webpack、TypeScript 等等談及程式碼靜態分析或是調整程式碼的工具，都會涉及到 AST，因此了解 AST 的好處是你可以更了解這些工具是如何運作的，更而甚者是你可以寫一個自己的 plugin，滿足自己客製化的需求。</p>
<h2 id="AST-是什麼？"><a href="#AST-是什麼？" class="headerlink" title="AST 是什麼？"></a>AST 是什麼？</h2><p>談論到 AST 以前，讓我們先談談 JavaScript code 如何被執行的（以 V8 為例）：</p>
<p><img data-src="https://i.imgur.com/qK9v9pJ.png"></p>
<p>我們寫的 JavaScript code 在經過 Parser 解析之後產生了 AST(Abstract Syntax Tree)，而產生後的 AST 就是我們要談論的，但離題一下，先繼續往下講。</p>
<p>AST 接著會進到 V8 引擎做執行，Interpreter 負責編譯程式碼變為 bytecode，當 bytecode 被頻繁的執行時，會被丟到 optimizing compiler 做編譯，編譯成執行起來更有效率的 machine code，變成經過優化的 code。</p>
<h2 id="所以到底什麼是-AST？"><a href="#所以到底什麼是-AST？" class="headerlink" title="所以到底什麼是 AST？"></a>所以到底什麼是 AST？</h2><p>當 JavaScript 的 source code 經過 parser 轉換的時候會經歷以下階段：</p>
<blockquote>
<ol>
<li>Lexical Analysis(Tokenization)</li>
<li>Syntax Analysis(Parsing)</li>
<li>Code Generation</li>
</ol>
</blockquote>
<p><img data-src="https://i.imgur.com/Ytkf5pz.png"></p>
<h3 id="Lexical-Analysis-Tokenization-："><a href="#Lexical-Analysis-Tokenization-：" class="headerlink" title="Lexical Analysis(Tokenization)："></a>Lexical Analysis(Tokenization)：</h3><p>在 Lexical Analysis（又稱為 Tokenization）會把程式碼切成一小塊一小塊的 tokens，如下圖：</p>
<p><img data-src="https://twilio-cms-prod.s3.amazonaws.com/original_images/4Q1Fa-SX8smqvRKZYupkUeodmma76QViKAZASsyP4wLlap2YAyRr9Oz3mOaYGYL7VERPmhmgk0flsS"></p>
<p>可以把這階段想成像是把「一個句子」拆成「一個一個字」，每個字都會有自己的 type，比如名詞、動詞又或者是標點符號，但此時我們還不知道句子本身的含義，以及每個字在句子中的關聯。</p>
<h3 id="Syntax-Analysis-Parsing-："><a href="#Syntax-Analysis-Parsing-：" class="headerlink" title="Syntax Analysis(Parsing)："></a>Syntax Analysis(Parsing)：</h3><p>在這個階段 parser 會把一整個 list 的 tokens 變成 AST，parser 將這些所有的 tokens 變成一個真正代表我們程式碼結構的 tree，像是比如我們原本 token 裡有 <code>()</code> 兩個括號，但我們不知道那是什麼意思，但現在我們知道他是一個 function call 了。 </p>
<p><img data-src="https://twilio-cms-prod.s3.amazonaws.com/original_images/QRjqUpCw9t8dOD1VfI4OrZnRZLmtsbXpn5bUZKRlpc2o6-nAOx-8IFtABbxyxV1ncZaMz8EGF75C-H"></p>
<p>那再舉一個例子的話，像是 HTML 不是會被轉成 DOM Tree 嗎？這也是同樣的概念，我們可能寫了像是 <code>h2</code>、<code>div</code> 等等的 tag，也是同樣會被轉成 token 後，再被連結成一棵 tree。</p>
<p>那可以特別注意的是現在沒有一種特定的 AST 規格，也就是說產生出來的抽象語法樹裡面的屬性會因為不同的 parser 而有不一樣的屬性，當然內容看起來會大同小異，但可能一些名稱會不一樣，或是多一些、少一些內容都有可能。</p>
<p>像我們剛剛的 <code>isPanda(&#39;🐼&#39;)</code> 使用 Eslint 的 parser Espree 產生出來的 AST 會長這樣：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Program"</span><span class="token punctuation">,</span>
  <span class="token property">"start"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token property">"end"</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>
  <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token number">13</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"ExpressionStatement"</span><span class="token punctuation">,</span>
      <span class="token property">"start"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token property">"end"</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>
      <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token number">13</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">"expression"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"CallExpression"</span><span class="token punctuation">,</span>
        <span class="token property">"start"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token property">"end"</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>
        <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token number">0</span><span class="token punctuation">,</span>
          <span class="token number">13</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">"callee"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>
          <span class="token property">"start"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
          <span class="token property">"end"</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>
          <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token number">7</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"isPanda"</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token property">"arguments"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">&#123;</span>
            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Literal"</span><span class="token punctuation">,</span>
            <span class="token property">"start"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
            <span class="token property">"end"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
            <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
              <span class="token number">8</span><span class="token punctuation">,</span>
              <span class="token number">12</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"🐼"</span><span class="token punctuation">,</span>
            <span class="token property">"raw"</span><span class="token operator">:</span> <span class="token string">"'🐼'"</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"module"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Code-Generation"><a href="#Code-Generation" class="headerlink" title="Code Generation"></a>Code Generation</h3><p>接下來，我們就可以針對產生的 AST 內容進行操弄，調整出自己想要的 code：</p>
<p><img data-src="https://twilio-cms-prod.s3.amazonaws.com/original_images/upwCkqTNYmuXRxKifsICQkJxclDHCtIjLqiKAGUdOuKpjVKAFb4iBq5u16XgGVKoQgAsQnsyrapCFy"></p>
<p>針對 AST 進行調整的好處是什麼呢？因為我們有時候想調整一段程式碼，比如通過 code 直接調整，又或者是直接調整 token，有可能會發生非預期的結果，比如我們以為改動的範圍在自己理解的 scope，但因為不知道程式碼之間的結構、關聯性的緣故，會影響到其他 scope。</p>
<p>那透過 AST 來改動程式碼的好處是提供了我們足夠的訊息，讓我們知道 code 的結構如何，就可以了解到調整某段程式碼之後影響的範圍，所以用 AST 來調整程式碼是相對安全的。</p>
<h3 id="AST-中場小結"><a href="#AST-中場小結" class="headerlink" title="AST 中場小結"></a>AST 中場小結</h3><p>簡而言之，我們剛剛講的所有東西可以簡化成下面這張圖：</p>
<p><img data-src="https://i.imgur.com/bJIuBp5.png"></p>
<p>左邊是我們人看的程式碼，也就是我們寫的 source code；右邊則是電腦看的程式碼，會經過 Lexical Analysis、Syntax Analysis 後產生出 AST，我們的各種工具再透過操作 AST 產生出想要的程式碼。</p>
<p>以我簡單的理解來看，<strong>AST 就是包含你程式碼資訊的 object</strong>，「抽象語法樹」聽起來很恐怖，但實際上就是個 object。</p>
<p>因為 AST 包含了更多資訊、結構更加齊全，我們就可以透過操弄這棵 tree 來得到自己想要的結果，又或是透過 tree 針對程式碼進行分析，進而提早偵錯。</p>
<h2 id="AST-Explorer"><a href="#AST-Explorer" class="headerlink" title="AST Explorer"></a>AST Explorer</h2><p>那目前有什麼工具是可以更簡單的知道程式碼被 parser 轉換過後的 AST 嗎？有的，那就是 <a href="https://astexplorer.net/">AST Explorer</a>！</p>
<p>以下圖來說：</p>
<p><img data-src="https://i.imgur.com/2Bk6dps.png" alt="AST Explorer"></p>
<ul>
<li>左上角的區塊代表原本程式碼</li>
<li>右上角代表 AST 的長相，AST 在滑鼠上去的時候會 hightlight 到對應的程式碼。</li>
<li>左下角是 Eslint plugin 的規則撰寫</li>
<li>右下角是 output，可以看到自己的程式碼會如何被抓出來警告</li>
</ul>
<p>AST Explorer 很讚的地方在於提供多種不同 parser，並且回饋很及時、介面直覺，剛看介面可能覺得有點硬派，或看不懂在幹嘛，但耐心摸索一下之後就會發現非常好用，很多介紹 AST 的文章都會提到這工具，我自己也覺得 AST Explorer 非常適合剛接觸 AST 的人，可以很快速的了解 AST 到底是個什麼東西。</p>
<p>這篇文主要就是介紹基礎的 AST、AST Explorer 這兩個工具，有了這些前置知識以後，撰寫 ESlint Rule 的時候就會更了解到底是在做些什麼事情了！所以預計下一篇文章，會基於這篇對 AST 的介紹，再更進一步的介紹 AST 的應用。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><p><a href="https://frontendmasters.com/courses/linting-asts/">Code Transformation and Linting with ASTs</a></p>
</li>
<li><p><a href="https://slides.com/kentcdodds/a-beginners-guide-to-asts#/4/4">Exploring ASTs</a></p>
</li>
<li><p><a href="https://itnext.io/ast-for-javascript-developers-3e79aeb08343">AST for JavaScript developers</a></p>
</li>
<li><p><a href="https://www.twilio.com/blog/abstract-syntax-trees">ASTs - What are they and how to use them</a></p>
</li>
<li><p><a href="https://segmentfault.com/a/1190000015653342?utm_source=sf-similar-article">前端进阶之 Javascript 抽象语法树</a></p>
</li>
<li><p><a href="https://blog.bitsrc.io/what-is-an-abstract-syntax-tree-7502b71bde27">What is an Abstract Syntax Tree</a></p>
</li>
<li><p><a href="https://segmentfault.com/a/1190000019491986?utm_source=sf-similar-article">「译」什么是抽象语法树</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>技術</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>BFCache 筆記之你怎麼都沒變啦</title>
    <url>/2020/05/03/BFCache-%E7%AD%86%E8%A8%98%E4%B9%8B%E4%BD%A0%E6%80%8E%E9%BA%BC%E9%83%BD%E6%B2%92%E8%AE%8A%E5%95%A6/</url>
    <content><![CDATA[<h2 id="Back-Forward-Cache"><a href="#Back-Forward-Cache" class="headerlink" title="Back Forward Cache"></a>Back Forward Cache</h2><p>部分瀏覽器（主要是 Safari、Firefox）為了在往返上下一頁有更好的效能，會使用 BFCache 的策略，會把離開前的 DOM 狀態、JavaScript 狀態都保存住。</p>
<p>當用戶回到上一頁或是進入下一頁時，就會使用記憶體內的 Cache，一切都會像離開前的模樣，好處是可以優化操作體驗，因為都從 Cache 拿，不需要重新 reload 頁面，操作起來就會很迅速，也不需要再藉由網路讀取資料，保留狀態也符合大部分情境的使用者預期，可以回上頁後繼續剛才未完成的操作。</p>
<p>聽起來很美好，但有些情況就不一定，舉個最近遇到的例子。</p>
<span id="more"></span>

<h2 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h2><p>最近遇到的例子是使用純 HTML + CSS + Vanilla JS 寫的多頁式網頁，這個網頁的 Navbar 在手機板的時候會變成常見漢堡選單，點擊漢堡 icon 就會展開 Navbar。</p>
<p>感覺一切都很正常，但遇到一個小 bug ，是當 Safari 的使用者在當前頁面點擊展開 Navbar 進入其他頁面，再點擊回到上一頁的按鈕時，選單依然是展開的。</p>
<p>為甚麼呢？原因就是因為 BFCache 保存了你離開這頁面前的狀態，也因此原本展開的選單就會保持展開，所以當你從新頁面回到原頁面時，就會看到 Navbar 依然張開開的看著你，嗚嗚，這樣的情況在使用上就會有點怪怪的，因為使用者預期應該是回到上一頁的時候 menu 會自己關起來才對，每次回到上一頁都看到開啟來的 menu 也太煩人了吧～</p>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>查了一下資料，網路上有蠻多解法的，但大多數都是偵測到使用 BFCache 時，就重新讀取頁面。</p>
<h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>有看到可以在 HTML 加上下面的 tag，設置後可以避免頁面被 cache。</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;meta http-equiv&#x3D;&quot;cache-control&quot; content&#x3D;&quot;no-cache&quot;&gt;
&lt;meta http-equiv&#x3D;&quot;expires&quot; content&#x3D;&quot;0&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>在使用 pageshow, pagehide 兩個事件時，event 可以使用 persisted 來判斷是否使用 BFCache，當有使用 BFCache　時，<code>event.persisted</code> 就會回傳 true。</p>
<p>下面這寫法相當於在進入頁面時，會判斷是否有使用 BFCache，如果有的話就 raload 頁面。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onpageshow</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>persisted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>而關於 BFCache 的處理方法，可以查到的方法大多是強迫頁面 reload 讀取頁面。</p>
<h2 id="選擇了甚麼方法？"><a href="#選擇了甚麼方法？" class="headerlink" title="選擇了甚麼方法？"></a>選擇了甚麼方法？</h2><p>在上述情境中，我是加上一個叫 <code>menu-open</code> 的 class 來控制漢堡選單的開關，css 寫法可能類似這樣：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.menu</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.menu.menu-open</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 250px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>總之就是加上 <code>menu-open</code> 的 class 時，高度上會有變化，進而達到展開關上的效果。</p>
<p>頁面性質也沒甚麼太複雜的操作，基本上就是呈現資訊的頁面而已，如果每個頁面都要大費周章 reload 好像不太划算，因此最後的解法是</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pageshow'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>persisted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        menu<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'menu-open'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>當頁面讀取完要 show 出來時，就移除掉 menu-open 的 class，既可確保 menu 關閉，也可以不用每次都 reload，維持 BFCache 的好處。</p>
<p>但如果是比較複雜的情境，比如涉及到表單提交，使用者如果提交後按上一頁又會回到提交先前狀態之類的狀況（比如 <a href="https://stackoverflow.com/questions/8861181/clear-all-fields-in-a-form-upon-going-back-with-browser-back-button">Clear all fields in a form upon going back with browser back button</a> 這篇文)，或許整個 reload 就會更好。</p>
<p>另外每個瀏覽器狀況都不太一樣，大部分 BFCache 的問題都發生在 Firefox、Safari 瀏覽器，Chrome 先前似乎是將 BFCache 移除了(詳情可以看<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=229605">這裡</a>)，不過在查找資料的時候，發現 Chrome 在 2019 宣布在開發新的 bfcache 技術，預計在 2020 會應用到 Chrome 上。(<a href="https://developers.google.com/web/updates/2019/02/back-forward-cache">這篇文章</a>) 不過根據實測，在發佈這篇文章以前 Chrome 目前是還沒有 BFCache。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/1.5/Using_Firefox_1.5_caching">Using Firefox 1.5 caching</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Archive/Misc_top_level/Working_with_BFCache">Working with BFCache</a></p>
<p><a href="https://blog.darkthread.net/blog/safari-bfcache-ignore-nocache/">【茶包射手日記】Safari 回上頁時無法停用 Cache</a></p>
<p><a href="https://harttle.land/2017/03/12/backward-forward-cache.html">浏览器前进/后退缓存（BF Cache）</a></p>
<p><a href="https://seminelee.github.io/2016/08/29/bfcache/">BFCache相关</a></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Front-End</tag>
      </tags>
  </entry>
  <entry>
    <title>Functional-Light JavaScript - Argument Adapters</title>
    <url>/2021/02/06/Functional-Light-JavaScript-Argument-Adapters/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此為 frontend master 的 <a href="https://frontendmasters.com/courses/functional-javascript-v3/">Functional-Light JavaScript, v3</a> 的課程筆記，這篇主要講的是 argument adapters，在使用 function 時，不一定每個 function parameters 的順序、數量符合我們的需求，因此就需要透過 adapter 去調整，把 function 修改成符合我們需求的形狀。</p>
<p>內容不完全和課程編排相同，單純是個人消化過後的編排。</p>
<p>因為剛開始學 functional programming 的緣故，內容、觀念可能會有諸多錯誤，如有發現錯誤麻煩不吝指教，感謝！</p>
<span id="more"></span>

<h2 id="Function-Arguments"><a href="#Function-Arguments" class="headerlink" title="Function Arguments"></a>Function Arguments</h2><p>先來談談 parameter 和 argument 的差別，parameter 指的是 function 的參數，argument 指的是傳進去的數，舉例來說：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">&#125;</span>

<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>x</code> 和 <code>y</code> 就是 parameter，<code>3</code>、<code>4</code> 就是 arguments。</p>
<h2 id="Ths-shape-of-function"><a href="#Ths-shape-of-function" class="headerlink" title="Ths shape of function"></a>Ths shape of function</h2><p>再來要講一件很重要的事情，就是 function 的 shape。</p>
<p>function 的 shape 指的是接收多少個 input 以及回傳多少 output，舉例來說：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// unary</span>
<span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// binary</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>只需要傳進去一個 input，回傳一個 output 的叫做 <strong>unary</strong>；需要傳兩個 input，回傳一個 output 的叫做 <strong>binary</strong>，而三個以上的 input 就叫做 ternary。所以<code>increment</code> 就是 unary，<code>sum</code> 就是 binary。</p>
<p>Function 的形狀是很重要的，因為這代表了和其他 function 的契合程度、好不好共同使用，就像是小朋友在堆樂高積木一樣，下面的積木必須要和上面的積木形狀是契合的，才能夠組成一座高塔，如果積木不合就沒辦法合在一起使用了，function 也是如此，shape 決定了 function 一起使用的方便性。</p>
<p>當我們在設計 function 的時候就必須考量到 shape，而一般來說，好的 FP program 通常大部分的 function 都會是 unary 的，少部分是 binary，ternary 就特別少。</p>
<p>往後其他章節提到的例子，就會看到如果 function 的 shape 不合，會遭遇什麼不方便，以及我們如何用其他技巧克服這問題喔。</p>
<h2 id="Arguments-Shape-Adapters"><a href="#Arguments-Shape-Adapters" class="headerlink" title="Arguments Shape Adapters"></a>Arguments Shape Adapters</h2><p>有時候我們想要使用的 function 不一定是我們期望的 shape，比如我們想要 unary 的，function 卻是 binary 的，這時候就要透過一個叫 adapter 的方法來去處理這件事情。</p>
<p>什麼是 adapter 呢？以設計模式來說，有一個叫做 Adapter Pattern（適配器模式）的東西，概念上就是把兩個形狀不合的東西，透過一個 Adapter 橋接兩者，讓兩個形狀不同的東西可以合在一起使用，是個類似於轉接頭的概念，所以我們會用 adapter 當作轉接頭橋接兩個 shape 不合的 function 。</p>
<p>adapter 基本上會是 HOF（Higher Order Function），那甚麼叫 HOF（Higher Order Function）呢？</p>
<p>Higher Order Function 是至少滿足下列一個條件的函數：</p>
<ul>
<li>接受一個或多個函數作為輸入</li>
<li>輸出一個函數</li>
</ul>
<p>光用講的很抽象，所以我們都來看看例子吧：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">unary</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">fn</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">binary</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">fn</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> args
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token function">unary</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
<span class="token keyword">let</span> boo <span class="token operator">=</span> <span class="token function">binary</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// [1]</span>
<span class="token function">boo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>unary</code> 和 <code>binary</code> 兩個 function 就是 higher order function，他們接收了 function 當作 input，也把 function 當作 output 來 return。</p>
<p>所以當我們把 <code>f</code> 丟進 <code>unary</code> 的時候，<code>unary</code> 的 return 的 output 會是只接受一個 argument 的 function，所以 line18 的 <code>foo</code> 其實等同於 line2 的 <code>one</code> 這個 function，因此 <code>foo</code> 只會接受一個 argument。</p>
<p>透過了解 <code>unary</code> 和 <code>binary</code> 兩個 function 能夠注意到一件事情，那就是他們可以改變 function 的 shape，比如 <code>unary</code> 會把傳進來的 function 變成只接受一個參數，當我們需要改變 function 接受參數的數量時，就能夠透過它們來進行調整，因此我們可以把它們稱為 adapter，原因就是這類的 adapter function 能夠讓 function 的 shape 改變，進而接收不同數量的 input。</p>
<p>簡而言之，如果樂高積木形狀不同的話，可以透過 adapter 來調整積木的形狀，讓這兩塊積木能夠組裝在一起，如果要使用 FP，需要試著熟悉這樣的模式，不只是使用現成的 function 得到想要的輸出，當 function 的 shape 不合的的時候，懂的使用 HOF 來調整 shape 也是很重要的。</p>
<h2 id="Adapter-Examples"><a href="#Adapter-Examples" class="headerlink" title="Adapter Examples"></a>Adapter Examples</h2><p>接下來再示範幾個 adapter，看看我們能怎麼調整 function 的 shape。</p>
<h3 id="rest-parameters"><a href="#rest-parameters" class="headerlink" title="rest parameters"></a>rest parameters</h3><p>因為從這章節開始 rest parameter 這個語法使用頻率變得非常高，而我在這之前其實對這語法沒有到很熟，大部分都只用到 spread operater 而已，所以稍微筆記 rest parameter 的用法。</p>
<p>來看看這段程式碼：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a:'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b:'</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'args:'</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> 
<span class="token comment">// a: 1</span>
<span class="token comment">// b: 2</span>
<span class="token comment">// args: [3, 4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>a 和 b 分別為 1 和 2 很容易理解，值得注意的是 args 的值，rest parameter 的特性在於可以把剩下傳進來的 arguments 收進去一個陣列裡面，因此 args 的值會是 <code>[3, 4, 5]</code>，因為剩下傳進來的 argument 都放在這個陣列裡面了。</p>
<p>另外 rest parameter 也很常和 spread operator 一起使用，更詳細的內容可以參考 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Functions/rest_parameters">MDN - 其餘參數(rest parameter)</a></p>
<h3 id="範例-1-reverseArgs"><a href="#範例-1-reverseArgs" class="headerlink" title="範例 1 - reverseArgs"></a>範例 1 - reverseArgs</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">reverseArgs</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">reversed</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// [1, 2, 3, 4]</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4] -> ...[4, 3, 2, 1] -> 4, 3, 2, 1</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> args
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token function">reverseArgs</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>

<span class="token function">g</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// [4, 3, 2, 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>reverseArgs</code> 在這裡做的事情就是在 line2 將 paramter 集合起來，變成一個 array；接著再透過 <code>reverse()</code> 把 args 反轉，反轉後的 args 再接著被 spread operator 展開，變成被展開的 arguments。</p>
<p>被展開的 arguments 到了 <code>f</code> 這個 function 後再次透過 rest parameter 語法集合起來變成一個 array，然後被 return，也就得到了 <code>[4, 3, 2, 1]</code> 這個結果了。</p>
<p>透過 <code>reverseArgs </code> ，我們可以把傳進來的參數順序顛倒。</p>
<h3 id="範例-2-spreadArgs"><a href="#範例-2-spreadArgs" class="headerlink" title="範例 2 - spreadArgs"></a>範例 2 - spreadArgs</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">spreadArgs</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">spread</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token function">spreadArgs</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>

<span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>spreadArgs</code> 用處在於把傳進來的陣列展開，變成一個一個分開的 argument。</p>
<p>在 Function Programming 裡，通常就被稱為 <code>apply</code> 。（詳情可參考 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">Function.prototype.apply()</a>)</p>
<h3 id="範例-3-unspreadArgs"><a href="#範例-3-unspreadArgs" class="headerlink" title="範例 3 - unspreadArgs"></a>範例 3 - unspreadArgs</h3><p>臨時考來了！如果 <code>spreadArgs</code> 可以把陣列展開，那怎麼樣把分散的 arguments 收集成一個陣列呢？也就是 <code>unapply</code>，這要怎麼做呢？</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">unspreadArgs</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">unspread</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">fn</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其實就只是把 <code>spreadArgs</code> 做的事情反過來做而已～</p>
<h2 id="Adapter-的應用場景"><a href="#Adapter-的應用場景" class="headerlink" title="Adapter 的應用場景"></a>Adapter 的應用場景</h2><p>可以透過思考以下兩點，來想想自己是否需要創造 adapter：</p>
<ol>
<li>Can I change the shape of my function at definition so that it fits better？</li>
<li>If not, can I make an adapter that changes the shape？</li>
</ol>
<p>可以的話，FPer 會比較傾向從舊有的 utilities 裡面找尋、堆疊出想要的結果，為什麼呢？創造自己的 utilities 不也挺好玩的嗎？的確，但這同時也會讓 code 變得沒那麼令人熟悉。</p>
<p>Function Programming 有個特點是，假設你熟悉了 Ramda 或其他現成的 Library 後，通常就會了解那些 utilities 的命名慣例和作用了，因為它們的使用方式和命名幾乎都差不多，所以重新創造新 utilites 的缺點就在於破壞了這個熟悉度，FP 喜歡用舊有的樂高積木，當真的沒辦法的時候，才會鑄造自己適用的積木。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://frontendmasters.com/courses/functional-javascript-v3/">Functional-Light JavaScript, v3</a> </li>
</ul>
]]></content>
      <categories>
        <category>筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Functional Programming</tag>
        <tag>frontend master</tag>
      </tags>
  </entry>
  <entry>
    <title>Functional-Light JavaScript - Composition</title>
    <url>/2021/02/07/Functional-Light-JavaScript-Composition/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此為 frontend master 的 <a href="https://frontendmasters.com/courses/functional-javascript-v3/">Functional-Light JavaScript, v3</a> 的課程筆記，這篇講的是 composition，指的是如何把 function 結合，將小積木堆疊成大城堡的技巧。</p>
<p>內容不完全和課程編排相同，單純是個人消化過後的編排。</p>
<p>因為剛開始學 functional programming 的緣故，內容、觀念可能會有諸多錯誤，如有發現錯誤麻煩不吝指教，感謝！</p>
<span id="more"></span>

<h2 id="抽象化-abstraction"><a href="#抽象化-abstraction" class="headerlink" title="抽象化(abstraction)"></a>抽象化(abstraction)</h2><p>以 Kyle Simpson 的觀點來說，所謂 abstraction 指的是把兩個邏輯交織在一起的程式碼分離開來，讓我們可以關注各自的邏輯，而不是看一邊，還要顧及另一邊的邏輯。</p>
<blockquote>
<p>We’re not abstracting to hide details; we’re separating details to improve focus.</p>
</blockquote>
<h2 id="先從改造巧克力工廠開始"><a href="#先從改造巧克力工廠開始" class="headerlink" title="先從改造巧克力工廠開始"></a>先從改造巧克力工廠開始</h2><h3 id="提升產量"><a href="#提升產量" class="headerlink" title="提升產量"></a>提升產量</h3><p>我們來假設一個情境，假設今天你是個巧克力工廠的顧問，負責改進整個巧克力工廠的生產流程，或大大小小的問題，總之老闆遇到問題就會去找你求救。</p>
<p>而你的興趣就是寫程式，有事沒事就會寫程式，還會從寫程式找出解決工作問題的靈感。好，我知道這假設有點微妙，可是先接受這個假設吧，拜偷。</p>
<p>接著我們看一段 code，這段 code 是要計算運費：</p>
<p>今天有段 code 是要計算運費：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">minus2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">-</span> <span class="token number">2</span>
<span class="token keyword">const</span> <span class="token function-variable function">triple</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">*</span> <span class="token number">3</span>
<span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">+</span> <span class="token number">1</span>

<span class="token comment">// add shiping rate</span>
<span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
tmp <span class="token operator">=</span> <span class="token function">triple</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>
<span class="token keyword">let</span> totalCost <span class="token operator">=</span> basePrice <span class="token operator">+</span> <span class="token function">minus2</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但我們看看就好，暫時先不談 code，而是先談一個生活化的情境。</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmj2tjkjudj316m0kmq6e.jpg" alt="截圖 2021-01-11 上午12.13.30"></p>
<blockquote>
<p>某天老闆跟你說：「我們的競爭對手產量遠超我們啊！快用你無敵的白金之星想想辦法！趕快增加產量超過競爭對手吧！」</p>
<p>你開始苦惱怎麼處理這問題，因為要增加產量又需要更多機器，可是廠房空間不夠，以目前的運作機制只能放一台機器，但不管了，煩惱放一旁，我們先回去寫程式。</p>
</blockquote>
<p>接下來回到剛剛那段 code，我們把原本的程式改良成這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">minus2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">-</span> <span class="token number">2</span>
<span class="token keyword">const</span> <span class="token function-variable function">triple</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">*</span> <span class="token number">3</span>
<span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">+</span> <span class="token number">1</span>

<span class="token keyword">let</span> totalCost <span class="token operator">=</span> baseCost <span class="token operator">+</span> <span class="token function">minus2</span><span class="token punctuation">(</span><span class="token function">triple</span><span class="token punctuation">(</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我們簡化了原本較冗長的方式， <code>increment(4)</code> 執行完後的 output， 會被放進 <code>triple</code> 當作 input，<code>triple</code> 執行完的 output，又會被放進 <code>minus2</code> 當作 input，最終得到我們的結果。</p>
<p>想著想著，有發現提高巧克力工廠生產量的方法了嗎？</p>
<img data-src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmj30aoytwj30ci0w0q54.jpg" width="200px" height="auto"/>

<p>沒錯，如同我們的 function 生產完後的 output 會被當作下個 function 的 input 一樣，我們生產機器的 output 也可以當成下一個機器的 input 對吧，這樣就可以省去輸送帶佔的空間了！</p>
<h3 id="更加抽象化"><a href="#更加抽象化" class="headerlink" title="更加抽象化"></a>更加抽象化</h3><blockquote>
<p>老闆某天說：</p>
<p>「現在的生產流程有點複雜欸，機器間的順序都要安排好，如果想調整就蠻麻煩的，所以我在想啊…」</p>
<p>「能不能造出一台懶人專用的的機器，我直接放巧克力進去，阿出來就是包裝完整的巧克力，聽起來很讚對吧！」</p>
</blockquote>
<p>無奈之下我們依舊要回去寫 code 尋找靈感：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">minus2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">-</span> <span class="token number">2</span>
<span class="token keyword">const</span> <span class="token function-variable function">triple</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">*</span> <span class="token number">3</span>
<span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">+</span> <span class="token number">1</span>

<span class="token keyword">function</span> <span class="token function">shippingRate</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">minus2</span><span class="token punctuation">(</span><span class="token function">triple</span><span class="token punctuation">(</span><span class="token function">increment</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// how to do</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> totalCost <span class="token operator">=</span> baseCost <span class="token operator">+</span> <span class="token function">shippingRate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// what to do</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這段程式碼我們做了什麼？也沒什麼，就是把原本的計算變成 <code>shippingRate</code> 的 function，但邏輯來說變得更有意義。在 line 6 的地方，我們主要做的是「how to do」，指的是如何計算 shippingRate；而在 line9，我們做的則是「what to do」，指的是用 shippingRate 來做什麼。</p>
<p>這就是 Kyle 所指的 abstraction，我們分離出了「how to compute the shippingRate」以及「what to do with the shippingRate」</p>
<h3 id="Declarative-Data-Flow"><a href="#Declarative-Data-Flow" class="headerlink" title="Declarative Data Flow"></a>Declarative Data Flow</h3><blockquote>
<p>時光飛逝，巧克力工廠的生產流程經過你的改造後經營得不錯，只是又面臨了另一個問題，老闆某天又跑來說：</p>
<p>「上次的改造的確是不錯啦，工人只要按一個按鈕就可以生產出糖果，他也不用管理面在幹嘛，每次生產只要很簡單的按下按鈕就沒問題惹，只是調整機器細部還是稍嫌不方便。</p>
<p>而且最近我發現啊，我們的競爭對手居然每天都可以更新他們生產的巧克力品項欸？？比如今天生產 A 巧克力，隔天他就能夠生產 B 巧克力！</p>
<p>所以，我更直接的說我的需求好了，你有沒有辦法…製造出一個能夠製造機器的…機器？這樣我們就可以辦到同樣事情惹！」</p>
</blockquote>
<p>這是老闆理想的設計圖：</p>
<p><img data-src="https://raw.githubusercontent.com/Simingchen/Functional-Light-JS/master/manuscript/images/fig5.png"></p>
<p>只要把小機器丟進超巨大機器裡，就可以幫我們把這些零件結合，變成新的機器，讚拉。</p>
<p>雖然聽起來很荒謬，但你依然決定走老樣子的路線，寫程式找改造機器的靈感。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">composeThree</span><span class="token punctuation">(</span><span class="token parameter">fn3<span class="token punctuation">,</span> fn2<span class="token punctuation">,</span> fn1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">composed</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token function">fn1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> shippingRate <span class="token operator">=</span> <span class="token function">composeThree</span><span class="token punctuation">(</span>minus2<span class="token punctuation">,</span> triple<span class="token punctuation">,</span> increment<span class="token punctuation">)</span>

<span class="token keyword">let</span> totalCost <span class="token operator">=</span> baseCost <span class="token operator">+</span> <span class="token function">shippingRate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>從這段 code 你可以很清楚的明白，data flow 就是從右到左，從 <code>increment</code>、<code>triple</code> 再到 <code>minus2</code> 不斷地經過加工，最後得到我們想要的 shippingRate。</p>
<blockquote>
<p>Your programs don’t mean anything if they don’t mean data flow. </p>
<p>The whole point of your program is to have data coming in, doing stuff, and then going back out.</p>
</blockquote>
<p>整個 data flow 變得 declarative，imperative data flow 的問題在於 data flow 的變化變得難以追蹤，declarative 則清楚許多。<code>compose</code> 在 utility library 都會提供此 API，如 <a href="https://ramdajs.com/docs/#compose">Ramda compose</a>。</p>
<h2 id="Associativity"><a href="#Associativity" class="headerlink" title="Associativity"></a>Associativity</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 結合律（associativity）</span>
<span class="token keyword">var</span> associative <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token function">compose</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token function">compose</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>Compose 有結合律的特性，意指不管你將哪兩個分為一組都不重要，也就是說你的 code 可以像是下面這樣隨便組合：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">compose</span><span class="token punctuation">(</span>toUpperCase<span class="token punctuation">,</span> <span class="token function">compose</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> reverse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 或</span>
<span class="token function">compose</span><span class="token punctuation">(</span><span class="token function">compose</span><span class="token punctuation">(</span>toUpperCase<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">,</span> reverse<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>又或者像是下圖：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmlafplfc9j30ru0skqde.jpg" alt="截圖 2021-01-12 下午10.37.44"></p>
<p><code>f</code> 和 <code>p</code> 看似不同的 function，但其實都是一樣的，只是 compose 結合 function 的方式不一樣而已，只要你的 function 順序一樣，因為 compose 符合結合律，所以你要怎麼 compose 都可以。</p>
<p>結合律的特性為我們提供了很大的靈活性，更能夠有效的運用 function，從小小小塊的樂高積木，逐漸蓋出一座大城堡。</p>
<h2 id="Composition-with-Currying"><a href="#Composition-with-Currying" class="headerlink" title="Composition with Currying"></a>Composition with Currying</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">triple</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">divBy</span><span class="token punctuation">(</span><span class="token parameter">y<span class="token punctuation">,</span> x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">/</span> y <span class="token punctuation">&#125;</span>

<span class="token function">divBy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">triple</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>假設我們今天想要把這段 code 用 <code>compose </code>結合，會遇到什麼問題呢？就是 shape 不一樣的問題。上面幾個使用 <code>compose </code> 例子，傳入的每個 function 都是 unary 的，但有時候我們會遇到 shape 是 binary 的 function。</p>
<p>所以要是我們把 <code>triple</code> 的 output 放進 <code>sum</code>當作 input 就會出問題，因為 <code>sum</code>. 是 binary 的，兩者的 shape 對不上，而這時候就是 curry 要派上用場的時候惹！</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">triple</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">divBy</span><span class="token punctuation">(</span><span class="token parameter">y<span class="token punctuation">,</span> x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">/</span> y <span class="token punctuation">&#125;</span>

<span class="token function">divBy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">triple</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 12</span>

sum <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>
divBy <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>divBy<span class="token punctuation">)</span>

<span class="token function">compose</span><span class="token punctuation">(</span>
  <span class="token function">divBy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  triple<span class="token punctuation">,</span>
  <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>5</code> 會被當作 input 傳入，之後就會順著 <code>sum(3)</code> 、<code>triple</code>、<code>divBy(2)</code> 的順序執行，這就是 curry 在 composition 的妙用，我們改變了 function 的 shape！讓它們變成 unary，就可以和其他樂高積木接上了。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://frontendmasters.com/courses/functional-javascript-v3/">Functional-Light JavaScript, v3</a></li>
<li><a href="https://github.com/getify/Functional-Light-JS">Functional-Light-JS</a></li>
</ul>
]]></content>
      <categories>
        <category>筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Functional Programming</tag>
        <tag>frontend master</tag>
      </tags>
  </entry>
  <entry>
    <title>Functional-Light JavaScript - Pure Function</title>
    <url>/2021/02/06/Functional-Light-JavaScript-Pure-Function/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此為 frontend master 的 <a href="https://frontendmasters.com/courses/functional-javascript-v3/">Functional-Light JavaScript, v3</a> 的課程筆記，這篇主要講的是 pure function，內容不完全和課程編排相同，單純是個人消化過後的編排。</p>
<p>因為剛開始學 functional programming 的緣故，內容、觀念可能會有諸多錯誤，如有發現錯誤麻煩不吝指教，感謝！</p>
<span id="more"></span>

<h2 id="Function-Purity"><a href="#Function-Purity" class="headerlink" title="Function Purity"></a>Function Purity</h2><p>最一開始要先談 pure function 是因為 pure function 是 functional programming 的基石，如果缺少了 pure function，那使用 functional programming 的好處可以說是少了很多。</p>
<p>一般來說，如果我們下了 pure function 這個關鍵字去 google，會在大多數的文章看到 pure function 會符合以下的定義：</p>
<ol>
<li>same input, same output</li>
<li>no side-effects</li>
</ol>
<p><img data-src="https://cdn-media-1.freecodecamp.org/images/0*a_yub2gTwY-1eK8j.png" alt="pure function"></p>
<p>(圖片取自 <a href="https://www.freecodecamp.org/news/what-is-a-pure-function-in-javascript-acb887375dfe/">What Is a Pure Function in JavaScript?</a>)</p>
<p>所以我們就要逐條來討論這兩個定義是什麼意思，以及除了這兩個定義以外，有沒有什麼可以補充的內容。</p>
<h2 id="Function-vs-Procedure"><a href="#Function-vs-Procedure" class="headerlink" title="Function vs Procedure"></a>Function vs Procedure</h2><p>在談 pure function  的上述兩個定義以前，不如先來聊聊在 FP 中，什麼叫做一個 function。</p>
<p>function 在 FP 的定義上來說，就是<strong>它必須要有 input，也必須要有 output</strong>，所以如果你寫的 function 長得像這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addNumbers</span><span class="token punctuation">(</span><span class="token parameter">x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> total <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">extra</span><span class="token punctuation">(</span><span class="token parameter">x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">addNumbers</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>addNumbers</code> 就不是一個 function，因為它只有 input，沒有 output，這個會被叫做 procedure，指的是一段邏輯的集合。</p>
<p>那另一個有趣的問題是 <code>extra</code> 算是 function 嗎？也不算，因為 function 只會 call 其他 function，如果用到 procedure 就不算 function 了。</p>
<p>所以在最初始的 function 定義來說，我們「必須要有 input，也必須要有 output」，不過這仍然不夠完整，因此我們繼續往下探討。</p>
<h2 id="Function-Naming-Semantics"><a href="#Function-Naming-Semantics" class="headerlink" title="Function Naming Semantics"></a>Function Naming Semantics</h2><p><img data-src="https://tva1.sinaimg.cn/large/0081Kckwgy1gm2xtv1rpuj30vg0kwtbj.jpg" alt="截圖 2020-12-28 上午1.41.22"></p>
<p>看到上面這個圖形很懷念對吧！這是我們國中時期的數學，在談論這個函數的時候，我們會將 <code>x</code> 代入 0，得到 3；代入 1，得到 5 之類的，這樣依此類推代入各種數字，將結果點在圖形上，最後把所有點點連起來就得到上面的圖形。</p>
<p>這段數學函數跟程式碼的表達方式很像：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// f(x) = 2X ^ 2 + 3</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>從上面這段程式碼來思考，x 和 y 是有一定的關聯性的，比如我 x 放進 2，那 y ，也就是 <code>f(x)</code> 就會是 11；如果 x 放進 3，那 y 就會是 21，當 x 是某個數字的時候就會透過它來計算，得到相對應的 y。</p>
<p>Kyle Simpson 是如此說的：</p>
<blockquote>
<p>Function: the semantic relationship between input and computed output</p>
</blockquote>
<p>也就是 function 的 input 和 output 是會有一定的語意關聯性的。</p>
<p>不過這段定義也還不夠完整，讓我們繼續看下去。</p>
<h2 id="Side-Effects"><a href="#Side-Effects" class="headerlink" title="Side Effects"></a>Side Effects</h2><h3 id="side-effects-的定義"><a href="#side-effects-的定義" class="headerlink" title="side effects 的定義"></a>side effects 的定義</h3><p>講到副作用，讓我們先查查維基百科，維基百科對於 <a href="https://zh.wikipedia.org/wiki/%E5%89%AF%E4%BD%9C%E7%94%A8_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">副作用</a> 的定義是這樣的：</p>
<blockquote>
<p>在電腦科學中，<strong>函數副作用</strong>指當調用<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0">函數</a>時，除了<strong>回傳函數值</strong>之外，還<strong>對主調用函數產生附加的影響</strong>。例如修改全域變數（函數外的變數），修改參數或改變外部存儲。</p>
</blockquote>
<blockquote>
<p>如果一個函數通過<strong>隱式</strong>（英語：Implicit）方式，從外界獲取資料，或者向外部輸出資料，那麼，該函數就不是純函數，叫作非純函數（英語：Impure Function）。</p>
<p>隱式的意思是，函數通過參數和回傳值以外的渠道，和外界進行資料交換。比如，讀取全域變數，修改全域變數，都叫作以隱式的方式和外界進行資料交換；比如，利用 I/O API（輸入輸出系統函式庫）讀取設定文件，或者輸出到文件，列印到螢幕，都叫做隱式的方式和外界進行資料交換。</p>
</blockquote>
<p>簡而言之，就是 function 本身不是獨立的，它和外界產生了聯繫，像是讀取到外部的 variables、修改外部的 variables，都會產生 side effect，舉例來說：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">shippingRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  rate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> weight<span class="token punctuation">)</span> <span class="token operator">+</span> speed 
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> rate<span class="token punctuation">;</span>
<span class="token keyword">let</span> size <span class="token operator">=</span> <span class="token number">12</span>
<span class="token keyword">let</span> weight <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> speed <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token function">shippingRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rate<span class="token punctuation">)</span> <span class="token comment">// 57</span>

size <span class="token operator">=</span> <span class="token number">8</span>
speed <span class="token operator">=</span> <span class="token number">6</span>
<span class="token function">shippingRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rate<span class="token punctuation">)</span> <span class="token comment">// 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>很明顯的，<code>shippingRate</code> 就和外部的 variables 產生關聯了，因為它用到了外部的 variables 進行某些計算了對吧。</p>
<p>那如果我們把程式碼改成這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">shippingRate</span><span class="token punctuation">(</span><span class="token parameter">size<span class="token punctuation">,</span> weight<span class="token punctuation">,</span> speed</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> weight<span class="token punctuation">)</span> <span class="token operator">+</span> speed 
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> rate<span class="token punctuation">;</span>
rate <span class="token operator">=</span> <span class="token function">shippingRate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>就沒有 side effect 了，我們單純依賴 function 自身的 input 進行計算，得到 output 並 return，也就是說 function 是一個獨立的存在。</p>
<blockquote>
<p>⚠️ 在課程裡 Kyle Simpson 說這不只是有沒有使用到外面的 variable 這樣而已，而是「pure function need direct inputs and direct outputs」</p>
<p>我對這段話的理解是指 function 會直接地使用 input 進行計算得到 output，比如上面的 <code>shippingRate</code> 直接拿 size, weight, speed 三個 input 計算出了 output。</p>
<p>因為我對於他提出的「direct」理解還不夠深入，怕造成誤會就先省略了這個定義。</p>
</blockquote>
<h3 id="例外-Closure"><a href="#例外-Closure" class="headerlink" title="例外 - Closure"></a>例外 - Closure</h3><p>關於「不依賴到外部的變數」這個定義有個例外，那就是 Closure 的狀況：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addAnother</span><span class="token punctuation">(</span><span class="token parameter">z</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">addTwo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上面程式碼來說， <code>addTwo</code> 使用到了 <code>z</code> 這個外部的變數，也就是 <code>addAnother</code>  scope 的變數， 那這樣 <code>addTwo</code> 算 pure function 嗎？因為它依賴到自己 scope 以外的變數了對吧？</p>
<p>其實還是算，所以 input 也可以是自身 scope 以外的，只是你要確保它「不會變動」，在後續提到 Closure 的章節會再針對這個例外進行詳細的解釋。</p>
<h3 id="no-side-effect-的好處、其他-side-effects"><a href="#no-side-effect-的好處、其他-side-effects" class="headerlink" title="no side effect 的好處、其他 side effects"></a>no side effect 的好處、其他 side effects</h3><p>no side-effects 的好處在哪裡呢？在於閱讀 code 的人腦袋運作的壓力變小了，如果有段程式碼直接依賴外部變數、mutate 外部狀態的 function，或有其他 side effect 時，閱讀時我們就必須時時追蹤變數值的變化，除了可讀性較不好以外，程式也很可能產生非預期的錯誤，難以追蹤目前狀態的變化。</p>
<p>但除了上述程式碼的範例以外，還有什麼會造成 side effect 呢？我們可以看看下圖：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/0081Kckwgy1gm554tbj5kj313y0u0dj7.jpg" alt="side effects"></p>
<p>看了上圖會發現，靠北，這不就是我們平常會做的事情嗎？如果不要 side effect 的話是要我怎麼活？</p>
<p>side effect 無所不在，不如說程式碼有 side effect 才是很正常的事情，所以 functional programming 並沒有在追求「no side effects」，而是「具有 side effect」（impure）和「沒有 side effect」(pure) 的程式碼要有明顯的分隔。</p>
<p>如同 Kyle Simpson 在課程裡說到的：</p>
<blockquote>
<p>No such thing as “no side effects”, Avoid them where possible, make them obvious otherwise.</p>
</blockquote>
<p>又或者是前輩良葛格在 <a href="https://ithelp.ithome.com.tw/articles/10234206">這篇文</a> 所說的：</p>
<blockquote>
<p>FP 要追求的，其實不是整個程式都是 Pure，而是 Pure 與 Impure 有明顯的界線。</p>
</blockquote>
<p>no side effect 不是最終要追求的目標，而是將 pure function 當成程式中的核心，side effect 則是像包裹在核心之外的殼，當發生預期外的事情時，我們就能更快速、有效的定位問題在哪。</p>
<h2 id="Same-input-Same-output"><a href="#Same-input-Same-output" class="headerlink" title="Same input, Same output"></a>Same input, Same output</h2><p>「Same input, Same output」的概念很單純，就是你給 function 相同的 input，它都會給你相對應同樣的 output。</p>
<blockquote>
<p>A function is a special relationship between values: Each of its input values gives back exactly one output value.</p>
</blockquote>
<p>換句話說，這只是兩個數值之間的關係：輸入及輸出。所以下圖就是個合法的 function：</p>
<p><img data-src="https://jigsawye.gitbooks.io/mostly-adequate-guide/content/images/function-sets.gif"></p>
<p>(此圖取自 <a href="https://mostly-adequate.gitbooks.io/mostly-adequate-guide/content/">mostly-adequate-guide</a>)</p>
<p>從圖中可以看到，當你給他相同的 x 時，就可以得到相對應的 y，符合剛剛提及的 same input, same output 的概念。</p>
<p>如果是下圖就不是個合法的 function：</p>
<p><img data-src="https://jigsawye.gitbooks.io/mostly-adequate-guide/content/images/relation-not-function.gif" alt="impure function"></p>
<p>當你 x 給相同的 5 時，卻可能得到 4 或 5 或 7 三種不同的 y，代表這個結果是無法預期的，你每次給相同的值沒辦法保證它會得到一樣的結果，這就不是個 pure function。</p>
<p>以 Pure function 的特性來說，我們可以用不同的角度來看待 same input, same output 這件事，比如我們可以把它看成一張表：</p>
<p><img data-src="https://i.imgur.com/sl0NO7X.png"></p>
<p>又或者是看成 mapping ：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> isPrime <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token number">1</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token number">2</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token number">3</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token number">4</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token number">5</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token number">6</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

isPrime<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//=> true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我們有個 <code>isPrime</code> 的 mapping，key 代表 input，value 代表 output，當給入相對應的 key 時，就會得到相對應的 value，所以給入 <code>3</code> 的時候，因為 3 是質數，就會得到 true；如果給入 <code>4</code> ，因為 4 不是質數，就會得到 false。</p>
<p>題外話，如果給入「江」呢？會得到什麼？true，因為江是質數，江直樹。</p>
<p>mapping 這個舉例，就是要說明當我們給 pure function. 相同的 input 時，就一定會得到相對應的 output。</p>
<h2 id="Referential-Transparency"><a href="#Referential-Transparency" class="headerlink" title="Referential Transparency"></a>Referential Transparency</h2><p>前面提了「same input, same output」、「no side effects」，這兩個定義也是大多數 FP 文章講解 pure function 時會提到的兩個定義。</p>
<p>但還有比較少數的文章，會提到另一個重點，就是 pure function 是「<strong>Referential Transparency</strong>」的，這也是 Functional Light JS 的講者 Kyle Simpson 特別強調的一點，他認為最「full, cononical, complete」的 pure function 的定義，就是這個 function 是 referential transparency 的。</p>
<p>所以什麼叫 referential transparency？「<strong>可以用 return value 取代 function call，而整體的程式行為不會改變</strong>」，這個定義就叫做「Referencial Transparency」。</p>
<blockquote>
<p>Referencial transparency means a function call can be replaced with it’s return value and not affect any of rest of the program.</p>
</blockquote>
<p>所以舉例來說：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z
<span class="token punctuation">&#125;</span>

<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果在程式的某處，我用 <code>6</code> 取代 <code>add(1, 2, 3)</code> ，程式行為依舊不變，天下太平的話，這就叫 referencial transparency，也代表 <code>add</code> 是個 pure function。</p>
<p>那 referencial transparency 的好處是什麼呢？</p>
<p>在 Haskell 裡面，function 永遠是 pure，也就是永遠都會有 referencial transparency，compiler 可以基於這個特性，達到 memoize 每個東西的優點，因為他們可以把 return value 取代 function call 。</p>
<p>但 JavaScript 沒有，JavaScript 裡不會每個 function 都是 pure function，compiler 也不會幫你處理這些事情，那這樣來說，referencial transparency 在 JavaScript 的好處是什麼呢？答案是對 reader 的友善度，當 reader 重複閱讀到一樣的 function call 的時候，其實他不需要透過腦袋再思考一次，就能預測這段程式碼的結果，等同在腦袋進行 memoize 的事情，進而釋放部分腦袋的壓力，把專注力放在程式碼中其他更重要的事情。</p>
<h2 id="Exercise-Extracting-Impurity、Containing-Impurity"><a href="#Exercise-Extracting-Impurity、Containing-Impurity" class="headerlink" title="Exercise - Extracting Impurity、Containing Impurity"></a>Exercise - Extracting Impurity、Containing Impurity</h2><h3 id="Extracting-Impurity"><a href="#Extracting-Impurity" class="headerlink" title="Extracting Impurity"></a>Extracting Impurity</h3><p>這邊指的是抽取出 impure 程式碼的技巧。</p>
<p><img data-src="https://tva1.sinaimg.cn/large/0081Kckwgy1gm9k78df22j316e0mqdm9.jpg" alt="Extracting Impurity - image01"></p>
<p><code>addComment</code> 這個 function 是 impure function，可以看到它呼叫了 <code>uniqueID</code> 這個 function，以及 <code>appendChild</code> 操作了 DOM，顯而易見的都是屬於 side effect。</p>
<p>FP 講求的不是沒有 side effect，而是把 pure 和 impure 分出明顯的界線，因此我們可以改成這樣：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/0081Kckwgy1gm9k9gy74mj31500sk7bi.jpg" alt="Extracting Impurity - image02"></p>
<p>此時的 <code>addComment</code> 變得 pure，單純只是產生物件以及 DOM element 的 function，而 impure 的操作被放到了 function 外面，避免污染 pure function，因此分出了明顯的界線，抽取出了不純的地方。</p>
<p>但這方法不是每次都行得通，只是其中一個可行的辦法。</p>
<h3 id="Containing-Impurity"><a href="#Containing-Impurity" class="headerlink" title="Containing Impurity"></a>Containing Impurity</h3><p>有時候沒辦法將 impure 的程式碼抽取出來，這時我們的辦法就是減少 impure 程式碼產生的範圍。</p>
<p>舉例來說，假設今天有一個來自第三方套件的 API：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/0081Kckwgy1gm9u76iicyj311t0u0167.jpg" alt="Containing Impurity - image01"></p>
<p>我們可以確定第三方 API 會產生 side effect，因此做法是減少 side effect 的 surface，辦法是複製一份 numbers 的 array：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/0081Kckwgy1gm9u7r4rgqj30y80u07nc.jpg" alt="Containing Impurity - image02"></p>
<p>這樣無論怎麼操作，至少我們發生的 side effect 都是限縮在 line 9 - line 22 ，減少了 side effect 發生的範圍。</p>
<h3 id="Adapters"><a href="#Adapters" class="headerlink" title="Adapters"></a>Adapters</h3><p>但如果沒有辦法把 <code>insertSortedDesc</code> 包裹在 <code>getSortedNums</code> 裡呢？我們還可以怎麼做，Kyle Simpson 提供了第三種解法：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/0081Kckwgy1gm9u9gnillj310d0u0dpn.jpg" alt="Adapters - image01"></p>
<p>這邊透過六個步驟來處理 side effect：</p>
<ol>
<li>取得初始的 global value</li>
<li>設定 numbers 的 initial value</li>
<li>side effect 的操作，就是操作 global state</li>
<li>capture the new value</li>
<li>restore the previous state</li>
<li>return the new value</li>
</ol>
<p>雖然運作來說我懂在幹嘛，但概念上我可能還沒抓到真正的精髓，就先當作筆記放著 QQ</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>pure function 在 FP 裡面至關重要，正因為 function 是 pure 的，我們才能享受到使用 FP 的好處，才可以運用到數學上的特性。</p>
<p>Kyle Simpson 在課程中提到，他認為「pure function」不是一個二元的概念，也就是說不是 0 和 1，只能分成「pure」和「impure」，而是類似於一個光譜，指的是「一個 function pure 的程度是多少」，function pure 的程度代表了 「level of confidence」，當你的 function 越 pure，你對這段程式碼的信心就越高，因為你更確定它的結果能夠預測，不會發生非預期的狀況搞你。</p>
<p>「pure function 不是二分法，pure 指的是程度上的差別」這說法，我也只有從 Kyle Simpson 的課程裡聽到， Kyle Simpson 算是在程式開發蠻有個人想法的人，所以課程中很多定義、說法可能都是他個人的理解，可以當作參考就好囉。</p>
<p>不過「same input, same output」、「no side-effects」、「referencial  transparency」則是多數提及 pure function 一定會講到的定義，想知道更多的話可以點擊下方參考資料的連結。</p>
<p>最後，如果內容有錯誤的話也麻煩不吝指教，我會很感激的！</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><p><a href="https://www.educative.io/courses/functional-programming-patterns-with-ramdajs">Functional Programming Patterns With RamdaJS!</a></p>
</li>
<li><p><a href="https://frontendmasters.com/courses/functional-javascript-v3/">Functional-Light JavaScript, v3</a> </p>
</li>
<li><p><a href="https://medium.com/frochu/%E7%B4%94%E7%B2%B9%E7%9A%84%E5%A5%BD-pure-function-%E7%9F%A5%E9%81%93-574d5c0d7819">純粹的好，Pure Function 知道</a></p>
</li>
<li><p><a href="https://www.freecodecamp.org/news/what-is-a-pure-function-in-javascript-acb887375dfe/">What Is a Pure Function in JavaScript?</a></p>
</li>
<li><p><a href="https://mostly-adequate.gitbooks.io/mostly-adequate-guide/content/">mostly-adequate-guide</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Functional Programming</tag>
        <tag>frontend master</tag>
      </tags>
  </entry>
  <entry>
    <title>Just JavaScript - The JavaScript Universe 隨意筆記</title>
    <url>/2020/02/23/Just-JavaScript-The-JavaScript-Universe-%E9%9A%A8%E6%84%8F%E7%AD%86%E8%A8%98/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Dan Abramov 的 Just JavaScript 是他最近在進行的 side project，內容主要探討 JavaScript 的運作原理，目前只有類似大綱的內容，會不定期的寄給有報名的人 email。</p>
<p>關於這系列文的走向，主要會是我對內容的解讀和心得，文風可能生硬，也可能垃圾話很多，寫起來也會蠻隨便的，想到的話就會回頭把內容修的更易讀，不確定，總之先寫再說。</p>
<span id="more"></span>

<h2 id="Values"><a href="#Values" class="headerlink" title="Values"></a>Values</h2><p>在 Dan 的 JavaScript 世界中，他把整個 Program 想像成小王子的畫面。</p>
<p><img data-src="https://ci6.googleusercontent.com/proxy/ffy2pUD3ZDfcXylpSCZmkuDfyYFNTILMDcNwTQ-9T3nIXjEXrTVS5OyCnYJWtqYJW8RAxK0GLABuwRgNPr15EeeYFl4qzXJ-lg27tkzMkt0e3ZfgV120hRawQdRFw5rr96UNLNrvpM7yFh1XCepNG7tUFV9TpptJA6L9cP0gWy2nFXXq=s0-d-e1-ft#https://res.cloudinary.com/dg3gyk0gu/image/upload/v1578681449/just-javascript-email-images/jj02/little_prince.jpg" alt="Little Prince"></p>
<p>小王子所站的小行星，就是整個 JavaScript 的 program，在行星表面上，可以看到 if 判斷式、分號、或各式各樣的邏輯；裡面也會有各種指示，比如「呼叫函示」、「重複做某事好幾次」、「拋出錯誤」等等。</p>
<p>而 Values 在哪呢？它們存在於 JavaScript 宇宙裡，但並不在小王子所站的小行星當中，而是飄散於 JavaScript 宇宙的各處，當中有 <code>booleans</code>、<code>numbers</code>, <code>strings</code>、 <code>symbols</code>、 <code>functions and objects</code>、 <code>null and undefined</code> 等等。</p>
<p>長得就像這樣：</p>
<p><img data-src="https://ci3.googleusercontent.com/proxy/EnCCPdgSsW0ZT4kQOVUSktJwRMX7-YwVRmxev0UGjN_oalVxBC8lhT-VWr6NfDO3M56c3RW2EPC4o2iCgr1g40rS0YoYEYLJJn-iGohX8E-lDje_UWZ4JtzbrA4j9T1XSplB9JSGcjSKDEsonqY-4cTrW9c59mtl-9QyahgKKg=s0-d-e1-ft#https://res.cloudinary.com/dg3gyk0gu/image/upload/v1578681450/just-javascript-email-images/jj02/universe.png" alt="image alt"></p>
<p>從圖片當中可以看到 Values 有兩種不同的種類，Primitive Values 跟 Reference Values(Objects and Functions)。</p>
<h2 id="Primitive-Values"><a href="#Primitive-Values" class="headerlink" title="Primitive Values"></a>Primitive Values</h2><p>Dan 形容 Primitive Values 就像星星，寒冷且遙遠，但你需要它們的時候，它們永遠在那（我不懂這什麼形容，太抽象了吧乾）你觸碰不到他們，但可以仰望它們、refer 它們。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "hello"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>這是第一個種類，Primitive Values。</p>
<h2 id="Objects-and-Functions"><a href="#Objects-and-Functions" class="headerlink" title="Objects and Functions"></a>Objects and Functions</h2><p>物件跟函式也是 value，但這種就距離很近，像是在我們所站立的小行星旁邊不斷漂浮、環繞。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// []</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x => x * 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>這是第二種種類。</p>
<h2 id="Expressions"><a href="#Expressions" class="headerlink" title="Expressions"></a>Expressions</h2><p>JavaScript 有很多做不到、無法回答的事情，比如要不要跟好朋友坦白你的感受，或是要閉嘴都不講話直到老死為止這種問題。</p>
<p>但還是有一些問題它可以回答啦，這種問題就叫 expressions。比如你問  2 + 2 等於多少，JavaScript 會回答 4。</p>
<p>程式碼像是這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img data-src="https://ci6.googleusercontent.com/proxy/IIL76ypEXuz6Yr5kcSCeqO0FUhIDW1r61au1VMT3yCQCqSCCjS-uGGB9WFyY-OopXTcP8SWU4yOPjOH7OIM4Nry0OUKLNJMWXe_qlQz0ksfzceYhzLKpuhrlf0_5HtF-jWyvuEVOBZ2a4x-DOlA0fqambIgu6KzIoJWk7fPvCwHB=s0-d-e1-ft#https://res.cloudinary.com/dg3gyk0gu/image/upload/v1578681449/just-javascript-email-images/jj02/expression.gif" alt="image"></p>
<p>如果 expressions 是問題，那 value 就是答案。</p>
<p>之前有講過 JavaScript 有各種 value 的種類，那我們是要怎知道這個 value 是什麼型別勒？</p>
<h2 id="the-typeof-Expression"><a href="#the-typeof-Expression" class="headerlink" title="the typeof Expression"></a>the <code>typeof</code> Expression</h2><p>之前說過，Values 像是這種小星星飛散在 JavaScript 宇宙的各處，相同種類的 values 就會有相似的行為模式，但我們要怎麼觀星呢？</p>
<p>答案是透過 <code>typeof</code> 這個望遠鏡！它可以幫我們判斷 values 的型別。</p>
<p><img data-src="https://ci3.googleusercontent.com/proxy/FNcSEVdfOpP19BtSa7vnybcUojzyZo2P318fSlpeyLbe-hAHKnrrjZPVBSOio9f6iQZw5TNFXFFW0ELC1suaAsNm7gbuNv2kkZn2pazu0SPQxhevCoXkLixhO7thZ_ovDBae5-Zc-VNcHNoQ1JgEURDB27OwZ-UZoo0eYntEaAs=s0-d-e1-ft#https://res.cloudinary.com/dg3gyk0gu/image/upload/v1578681449/just-javascript-email-images/jj02/telescope.png" alt="image"></p>
<p>當我們使用 <code>typeof</code> 的時候，JavaScript 可以回答我們各種關於 values 的型別問題。</p>
<p>比如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "number"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "string"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "undefined"</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "object"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "object"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "function"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img data-src="https://ci5.googleusercontent.com/proxy/dcZhB4JUgn5l2-nKVmci6pHNRUg0xcrIR-OPra9YJe2nxKrCAEFgkaU60Pc8zfvbCR6EdHmH4YyvX4RHcmtq9RPUb9-bEtWsQFwyhJubY_08p3eCDnLfDCLMW4GH9jKjorlhXAwtyQfqyGbdy2LszgKhRtWbOJjYvo4ejLA=s0-d-e1-ft#https://res.cloudinary.com/dg3gyk0gu/image/upload/v1578681450/just-javascript-email-images/jj02/typeof.gif" alt="image"></p>
<h2 id="Types-of-Values"><a href="#Types-of-Values" class="headerlink" title="Types of Values"></a>Types of Values</h2><p>身為一個熱血的天文學家，你可能會想知道 JavaScript 宇宙中有幾種可以觀測到的 values 種類，經過專業科學家們長達 25 年的研究，目前歸類出九種型別。</p>
<h3 id="Primitive-Values-1"><a href="#Primitive-Values-1" class="headerlink" title="Primitive Values"></a>Primitive Values</h3><ul>
<li>**Undefined (undefined)**： 未被賦予 value 的變數會回傳的結果。</li>
<li>**Null (null)**： 空值，和 undefined 的差別在於它是有值的，只是這個值是空的。</li>
<li>**Booleans (true and false)**： 用於邏輯判斷的布林值。</li>
<li>**Numbers (-100, 3.14, and others)**： 數字，用於計算。</li>
<li>**Strings (“hello”, “abracadabra”, and others)**： 字串，用於文字。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol"><strong>Symbols (uncommon)</strong></a>： ES6 的新型別，目前還不太清楚使用場景。</li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/BigInt"><strong>BigInts (uncommon and new)</strong></a>： 大數，也是 ES6 的新型別，用於表示比 2 的 53 次方還大的數字（2 的 53 次方是原生 JavaScript 中 number 所能表現出來的最大值）</li>
</ul>
<h3 id="Reference-Values"><a href="#Reference-Values" class="headerlink" title="Reference Values"></a>Reference Values</h3><ul>
<li>**Objects ({} and others)**： 算是資料的集合體，相似的資料就可以用 object 整理成一整包來表示。</li>
<li>**Functions (x =&gt; x * 2 and others)**： 函式。</li>
</ul>
<h2 id="小複習"><a href="#小複習" class="headerlink" title="小複習"></a>小複習</h2><ol>
<li>values 飄散於 JavaScript 宇宙的各處，它們不存在於我們的 code 裡面，但可以任意使用它們。</li>
<li>values 分為兩大類： Primitive Values 跟 Reference Values。更細分的話，會分成 9 個型別，每個型別都有各自的使用場景和目的，但有些比較少用到。</li>
<li>有些型別比較孤單，比如 null 這個型別就只會有 null 這個值，而 undefined 也是。</li>
<li>我們可以用 expression 來向 JavaScript 問問題，比如 <code>console.log(2 + 2)</code>這個問題，JavaScript 會回答 4。</li>
<li>我們可以透過 <code>typeof</code> 這個 expression 來查看 values 的型別。</li>
</ol>
<h2 id="小練習"><a href="#小練習" class="headerlink" title="小練習"></a>小練習</h2><ol>
<li>當你想確認某個 value 是不是 date，於是寫了下面這段 code：<code>typeof(value) === &#39;date&#39;</code>，這會成功運作嗎？原因是什麼呢？</li>
<li><code>typeof()</code> 有可能會 return 錯誤的答案，是 JavaScript 中知名的 bug，試著找到這個會出 bug 的型別吧！</li>
</ol>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Front-End</tag>
      </tags>
  </entry>
  <entry>
    <title>Just JavaScript - Values and Variables 隨意筆記</title>
    <url>/2020/03/01/Just-JavaScript-Values-and-Variables-%E9%9A%A8%E6%84%8F%E7%AD%86%E8%A8%98/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>介紹完上次的 JavaScript 宇宙觀後，今天要來談談變數與值。</p>
<span id="more"></span>
<h2 id="先回顧上次的小題目"><a href="#先回顧上次的小題目" class="headerlink" title="先回顧上次的小題目"></a>先回顧上次的小題目</h2><h3 id="typeof-value-quot-date-quot-結果是如何呢？"><a href="#typeof-value-quot-date-quot-結果是如何呢？" class="headerlink" title="typeof(value) === &quot;date&quot; 結果是如何呢？"></a><code>typeof(value) === &quot;date&quot;</code> 結果是如何呢？</h3><p><code>typeof(value) === &quot;date&quot;</code> 的結果永遠都會是 false。</p>
<p>因為 date 不是任何 typeof 會回傳的結果，它不是 primitive types 也不是 functions，所以 typeof date 永遠都會是 object。</p>
<h3 id="typeof-的-bug"><a href="#typeof-的-bug" class="headerlink" title="typeof 的 bug"></a>typeof 的 bug</h3><p><code>typeof(null)</code> 回傳的結果會是 “object”。</p>
<p>即使 null 是 primitive value，但 typeof 會回傳 object，這是個眾所皆知的 bug，但因為改掉的話會讓很多現有的網站掛點，所以就這樣一直放著維持現狀了。</p>
<h3 id="typeof-typeof-value-永遠都會是-string"><a href="#typeof-typeof-value-永遠都會是-string" class="headerlink" title="typeof(typeof(value)) 永遠都會是 string"></a>typeof(typeof(value)) 永遠都會是 string</h3><p>因為 <code>typeof</code> 本身回傳的結果型別是 string，因此對回傳結果使用 <code>typeof</code> 的話，結果就會是 string！</p>
<h3 id="接著繼續"><a href="#接著繼續" class="headerlink" title="接著繼續"></a>接著繼續</h3><p>好，讓我們繼續下去囉！先看一小段程式碼：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> reaction <span class="token operator">=</span> <span class="token string">'yikes'</span><span class="token punctuation">;</span>
reaction<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'l'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reaction<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>這段程式碼會回傳什麼呢？</p>
<p>答案是 <code>&#39;yikes&#39;</code>，如果是在 strict mode 的話，則是會拋出錯誤。對，它不會回傳 <code>&#39;likes&#39;</code>。</p>
<p>Yikes。</p>
<h2 id="Primitive-Values-是-Immutable-的"><a href="#Primitive-Values-是-Immutable-的" class="headerlink" title="Primitive Values 是 Immutable 的"></a>Primitive Values 是 Immutable 的</h2><p>剛剛的問題有答對嗎？沒答對也沒關係，只是從剛剛的例子我們了解到一件事。</p>
<p><strong>我們沒辦法改變 primitive values。</strong></p>
<p>接下來再用一個小例子解釋吧！字串（屬於 primitive values）以及陣列（屬於 Objects，不是 primitive values）在某些地方有點相近，陣列是一連串的 items，字串則是一連串的字元：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">212</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">506</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>對於字串和陣列，你可以用相似的方式來存取的值：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 212</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "h"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>你可以改變 array 的第一個 Item：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">420</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [420, 8, 506]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>所以直覺性的，你很容易去假設 string 也可以做相似的改動：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'j'</span><span class="token punctuation">;</span> <span class="token comment">// ???</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>但事實上你不能。</strong></p>
<p><strong>所有的 primitive values 都是 immutable 的</strong>，「Immutable」的相似詞是 「unchangeable」，意思就是不能改動，Read only 的，你完全沒辦法對 primitive values 上下其手。</p>
<p>一般來說，我們可以直接 set object 的 property，比如這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> test<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>test<span class="token punctuation">)</span> <span class="token comment">// 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>但在 primitive values 中，比如 numbers 或 string，是沒辦法 set property 的。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> fifty <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
fifty<span class="token punctuation">.</span>shades <span class="token operator">=</span> <span class="token string">'gray'</span><span class="token punctuation">;</span> <span class="token comment">// No!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>50 是 number，也就是 primitive values，因此沒辦法 set property。</p>
<p><a href="https://www.youtube.com/watch?v=otCpCn0l4Wo">U can’t touch this</a></p>
<p>在 Dan 的 JavaScript 宇宙中，所有的 primitive values 存在於 code 的外圍圈圈中（如下圖所示），就像遙遠的恆星，你可以使用它們，但沒辦法改變。</p>
<p><img data-src="https://ci4.googleusercontent.com/proxy/pHsMAsQ4oeXCJVvsRlzWFQYlqEXbAQ2UC6BY6qUJlTuCtxABGWKi8G8Xp_RmAJDlW15vvEpes3RVmKWatNm7bhQzSbSLCgpMW_iWLCFk2-x3COs_Mb-YjMOzRPTbxIvBan8PVJ29yrIfNNIkNLR1yHlUA7bO8GrTEy_Pdnfmg9Ehb8TY=s0-d-e1-ft#https://res.cloudinary.com/dg3gyk0gu/image/upload/v1579283157/just-javascript-email-images/jj03/immutablemap3.png" alt="image"></p>
<h2 id="矛盾的地方"><a href="#矛盾的地方" class="headerlink" title="矛盾的地方"></a>矛盾的地方</h2><p>剛剛說到 primitive values 是 immutable 的，是 read-only，那接下來再用一個例子來測試看看：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> pet <span class="token operator">=</span> <span class="token string">'Narwhal'</span><span class="token punctuation">;</span>
pet <span class="token operator">=</span> <span class="token string">'The Kraken'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>按照剛剛 read-only 的理論，輸出的答案應該是…</p>
<p>答案是<code>&#39;The Kraken&#39;</code>！</p>
<p>怎麼會這樣咧？？剛剛不是說 primitive values 是 immutable 的嗎！</p>
<h2 id="把變數當線"><a href="#把變數當線" class="headerlink" title="把變數當線"></a>把變數當線</h2><p>我們再看一次剛剛的例子：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> pet <span class="token operator">=</span> <span class="token string">'Narwhal'</span><span class="token punctuation">;</span>
pet <span class="token operator">=</span> <span class="token string">'The Kraken'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "The Kraken"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>我們都知道型態為 string 的 value 因為是 primitive value 的關係，所以不能改變，但 <code>pet</code> 這個變數確實變成了 <code>&#39;The Kraken&#39;</code>，為什麼？</p>
<p>看起來好像有點矛盾，但其實不是，我們說 primitive values 不行改變，但完全沒有談論到變數！</p>
<p>我們必須理清一下我們的概念。</p>
<p><strong>Variables are not values. 變數並不是值</strong><br><strong>Variables point to values. 變數指向值</strong></p>
<p>在 Dan 的 JavaScript 宇宙中，變數像一條線，有兩個端點和一個方向，它開始於一個名字，結束於指向的某個值。</p>
<p>舉個例子，我們可以將 <code>pet</code> 這個變數指向於 <code>&#39;Narwhal&#39;</code> 這個值。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> pet <span class="token operator">=</span> <span class="token string">'Narwhal'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img data-src="https://ci5.googleusercontent.com/proxy/wcO3dHlW2VBtbMiLgfbSEZERAYOc21luc5E0-eHLB7Az9WYeR4O9rbYBzQxVyVt8jq5ZEPZ39HDs8J6xrN42TVEa2j0HaYR8apK3X7RecrYA_jL68QTpgLyn0tLIr1JrRansj8naa2PUG7A_uDfrOmdQOkTmChq0umF-6tIEB7vgpYvT7NyLIZo=s0-d-e1-ft#https://res.cloudinary.com/dg3gyk0gu/image/upload/v1579283157/just-javascript-email-images/jj03/narwhal-assignment.png" alt="pet point to Narwhal"></p>
<p>我們在這之後能對變數做兩件事。</p>
<h2 id="賦予變數某個值"><a href="#賦予變數某個值" class="headerlink" title="賦予變數某個值"></a>賦予變數某個值</h2><p>其中一件事是能夠賦予變數某個值。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">pet <span class="token operator">=</span> <span class="token string">'The Kraken'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img data-src="https://ci6.googleusercontent.com/proxy/igd1ZQUORgMYfeinNlCgb0x4rn4mrSck1h-MmtipgsxVoFEcq5gIXdMptBdLpgQSs0F8_NxfWUoW1LEHd0ZGOqjdStYJuX3jYHKviJVPTspYH6RW04aBB9g6S1UmeS5H8dIS7bGLj5mJeJhhivESCVneB1Ipz6UYxFcDBy5Xp_5bAF8n5-nuKpML=s0-d-e1-ft#https://res.cloudinary.com/dg3gyk0gu/image/upload/v1579283157/just-javascript-email-images/jj03/kraken-reassignment.png" alt="Assigning a Value to a Variable"></p>
<p>上面所做的就是將線左側(left side)的 pet 指向於線右側(right side)的 ‘The Kraken’，pet 會持續指向 The Kraken 這個 value 直到重新被賦值。</p>
<p><strong>左側的 assignment 必須是一條「線」。</strong></p>
<p><strong>右側的 assignment 則必須是 expressions。</strong> 可以是很簡單的 <code>2</code> 或是 <code>&#39;hello&#39;</code>，或是更複雜的 expressions，像是：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">pet <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token string">' Dalmatians'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>count + &#39; Dalmatians&#39;</code>是一個 expression，JavaScript 會回應這個 expression（像是 ‘101 Dalmatians’），從現在開始，<code>pet</code>變數會指向這個值。</p>
<p>如果右側必須是 expresssions 的話，那是否代表數字 <code>2</code> 或是 字串<code>&#39;The Kraken&#39;</code>也是 expressions 呢？沒錯！這樣的 expressions 稱為 <code>literals</code>。</p>
<h2 id="讀取變數中的值"><a href="#讀取變數中的值" class="headerlink" title="讀取變數中的值"></a>讀取變數中的值</h2><p>我們也可以讀取變數中的值，比如用 <code>console.log</code> 印出。</p>
<p><code>console.log(pet);</code></p>
<p>值得注意的是，我們並不是把 <code>pet</code> 這個變數傳給 <code>console.log</code>（雖然我們口語上可能會這樣說），但我們實際上並不能把變數傳給 functions，我們傳的是 <code>pet</code> 變數目前的值，這背後怎麼運作的呢？</p>
<p>當我們在 console.log 寫下 <code>pet</code>，是在問 JavaScript 一個問題：「<code>pet</code> 現在的值是什麼呢？」，為了回答這個問題，JavaScript 會沿著 pet 的線攀爬，並且給出這條線終點的「值（Value）」</p>
<p>所以在相同的 expression 在不同的時機會給我們不同的 values。</p>
<h2 id="Nouns-and-Verbs"><a href="#Nouns-and-Verbs" class="headerlink" title="Nouns and Verbs"></a>Nouns and Verbs</h2><p>爭論「傳一個值」或「傳一個變數」有點無聊，因為大家內心都能理解你要表達的意思，但於此同時，自己內心必須搞清楚在 JavaScript 中，你不能傳一個變數。</p>
<p>這邊是一個小例子：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> money <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">double</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果我們把 <code>double(money)</code> 當作傳一個變數進去，那我們會預期 <code>x = x * 2</code> 會把變數 double，但事實上並不是這樣，真正運作的邏輯是：「**找出 money 這個變數的 value，然後把這個 value 傳進去 double。」</p>
<h2 id="Put-it-toghther"><a href="#Put-it-toghther" class="headerlink" title="Put it toghther"></a>Put it toghther</h2><p>讓我們舉最後一個例子，並一步一步拆解它的運作方式吧～</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>第一行並沒有做太多事情：</strong></p>
<p><img data-src="https://ci5.googleusercontent.com/proxy/mRPUqNCsUztVVvWdc5b1uQ2n8itEJCm6tJoc_yFZPyxYJ_zFuDtO-8mq2MguQ6JbbfsJ68wbhxWRVWsuDv1bX8nzIsizFP_KyAaG0ACwDWnAA9tfXXC42-2h6owYtB_o8J7Uyats1v78zQms7gsFomnbcTmQ2yon8LHKLxL_VAJzVLU=s0-d-e1-ft#https://res.cloudinary.com/dg3gyk0gu/image/upload/v1579283157/just-javascript-email-images/jj03/assign-step1.gif" alt="image"></p>
<ul>
<li>宣告一個名稱為 x 的變數<br>（創造一個從 x 開始的線）</li>
<li>賦予 x 這變數 10 的值<br>（將 x 這個變數指向 10 這個值）</li>
</ul>
<p><strong>第二也很短，但做了一些事：</strong><br><img data-src="https://ci3.googleusercontent.com/proxy/GWxZZv1kTtnjB7GBE3m_GTkGE9tis9TMFupwBHQiVhqd7JKtMvHwKrsta3ANMZvN1cj62-i0edlhhNs2j7OHDmG70fmxEeB5piaiREsgWC8wjnMf718EKrUHOqiqZy_0iLVG2ksA1k_nN8mPHuuFA855xoAmZl-dDvwaaElwOus7Rgg=s0-d-e1-ft#https://res.cloudinary.com/dg3gyk0gu/image/upload/v1579283157/just-javascript-email-images/jj03/assign-step2.gif" alt="image"></p>
<ul>
<li>宣告一個名稱為 y 的變數<br>(創造一個從 y 開始的線）</li>
<li>賦予 y 變數值，這個值是 x 變數的值</li>
</ul>
<ol>
<li>詢問 x 這個變數的值，沿著 x 變數的線，找到它指向 10 這個值</li>
<li>從 x expression 得到 10 這個結果。</li>
<li>因此，賦予 y 變數 10 的值。</li>
<li>y 變數把線的尾端指向 10。</li>
</ol>
<p><strong>最後，我們到達了第三行：</strong><br><img data-src="https://ci5.googleusercontent.com/proxy/el8tFBsFMKGaJql4A6TZa1pHFZY8YaQun7-6Ns79Tj8Gcejs_AocEjpSp-c6G7rmlZILXF--bC0j47RwYaEfEMjPIooxfewket2iwAP4CePpPJalLxp61_xjIFJCRhtflOqWleuHtyH5sAycIG0ld1O-gBzX2-aNBAHzLXWH3UJXROI=s0-d-e1-ft#https://res.cloudinary.com/dg3gyk0gu/image/upload/v1579283157/just-javascript-email-images/jj03/assign-step3.gif" alt="image"></p>
<ul>
<li>賦予 x 值，這個值是 0<br>（將 x 線的尾端指向 0）</li>
</ul>
<p>因此在結尾時， x 指向 0 這個值，y 指向 10 這個值。值得注意的地方是，<code>y = x</code> 並不代表把 y 指向 x，我們沒辦法把變數指向彼此！<strong>變數永遠指向值</strong>，當我們賦予某個值時，都是把左側的變數指向於右側的值。</p>
<p>Dan 說到，一般大家的 Mental Models 都會把變數想成箱子，不過我們目前建立的宇宙觀並沒有提到任何箱子，<strong>只有可愛的線們</strong>。那為什麼我們不能只想像成把 0 或 10 這個值放進變數裡，而是一定要用線指向某個值的方式來想像呢？</p>
<p>因為這對後續解釋某些概念會比較有幫助，像是 strict equality、object identity 和 mutation，這些概念在後續也會用線的概念來作延伸。</p>
<p>Dan 的 JavaScript 宇宙觀中充滿各種線線。</p>
<h2 id="小回顧"><a href="#小回顧" class="headerlink" title="小回顧"></a>小回顧</h2><ul>
<li><strong>Primitive values 是 immutable 的。</strong> 我們沒辦法改變或影響它們，舉個例子，我們沒辦法幫 string 型態的值 set property，因為它是 primitive values，但 array 的話就可以。</li>
<li><strong>變數不是值。</strong> 每個變數都指向某個特定的值，我們可以改變變數指向的值，透過 <code>=</code> 這個 assignment operator。</li>
<li><strong>變數像是線</strong>。這不是 JavaScript 中的概念，但可以幫助我們想像變數指向某個值的狀況。</li>
<li><strong>注意矛盾的地方</strong>。 如果你在學習某個慨念的時候彼此衝突，先不要沮喪，通常是有更深層的真相潛藏在其中。</li>
</ul>
<h2 id="練習題"><a href="#練習題" class="headerlink" title="練習題"></a>練習題</h2><p><a href="https://eggheadio.typeform.com/to/RWJg3m?email=Jigsaw0401@gmail.com&ck_subscriber_id=690829198">Click here to solidify this mental model with a few short exercises.</a></p>
<p>這是 Dan 提供的練習題，答案會在下次的信件進行講解，建議做了一週再前往下一週，這可以鞏固你目前在建立的 mental model，有了這樣的基礎，下次討論更複雜的主題時才可以更順利。</p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Front-End</tag>
      </tags>
  </entry>
  <entry>
    <title>Lidemy MTR 第四期官網 - 打雜小弟心得</title>
    <url>/2020/05/09/Lidemy-MTR-%E7%AC%AC%E5%9B%9B%E6%9C%9F%E5%AE%98%E7%B6%B2-%E6%89%93%E9%9B%9C%E5%B0%8F%E5%BC%9F%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這篇心得預計不會有什麼價值，就是想發廢文，讚讚。</p>
<span id="more"></span>

<h2 id="MTR-第四期官網誕生的過程中，我擔任甚麼角色？"><a href="#MTR-第四期官網誕生的過程中，我擔任甚麼角色？" class="headerlink" title="MTR 第四期官網誕生的過程中，我擔任甚麼角色？"></a>MTR 第四期官網誕生的過程中，我擔任甚麼角色？</h2><p>打雜小弟，Totally 打雜。</p>
<p>MTR 官網運用的技術為 pug, scss, gulp, babel, browserify，而我主要做的事情就是用 pug + scss 刻出設計稿的頁面，少部分用 Vanilla JS 簡單的操作 DOM，閒暇之餘看版面、文案上有沒有什麼問題，然後幫忙加上各種連結，對啦就是雜事。</p>
<p>所以環境建置、效能優化、部屬、設計甚麼的不是我弄的，而是其他偉大的協作者搞定的，所以在過程中我就是接收打雜任務並負責執行，大部分任務都在處理切版，偶爾機動性的處理跨瀏覽器問題或寫寫 Vanilla JS、解解 bug。</p>
<h2 id="獲得了什麼？"><a href="#獲得了什麼？" class="headerlink" title="獲得了什麼？"></a>獲得了什麼？</h2><p>主要是切版（pug、scss）。</p>
<p>在前端的路上我一直都是切版很弱的人，倒也不是切不出來，而是寫不出好閱讀的架構，又或者是切版速度沒那麼快，所以這次是很好的練功契機，另外協作的夥伴在切版屬於很有經驗的人，很多開發上的技巧可以在協作中學習（就是偷偷吸收功力）</p>
<h3 id="💪-PUG"><a href="#💪-PUG" class="headerlink" title="💪 PUG"></a>💪 PUG</h3><p>過去只有用過一次 pug，那時候見識淺薄，以為只是寫 tag 比較方便的 HTML，不知道還可以用 JS 來快樂寫 HTML，這次開發驚覺這件事情後才知道 PUG 棒在哪！其實寫起來有點像 React 的 JSX，下面就寫寫我在開發中常用的技巧吧，另外因為開發過程都是用 JSX 方式來思考的，所以會常常用 JSX 協助講解。</p>
<h4 id="Iteration"><a href="#Iteration" class="headerlink" title="Iteration"></a>Iteration</h4><p>在這次開發中最常使用的技巧就是 Iteration，像是下面這樣：</p>
<pre class="line-numbers language-pug" data-language="pug"><code class="language-pug"><span class="token tag">ul</span>
  <span class="token punctuation">-</span>
    <span class="token tag">var</span> <span class="token plain-text">headerContents = [</span>
      &#123;
        <span class="token tag">title<span class="token punctuation">:</span></span> "程式基礎",
        <span class="token tag">week<span class="token punctuation">:</span></span> "week1 <span class="token punctuation">-</span> week5",
        <span class="token tag">anchor<span class="token punctuation">:</span></span> "anchor<span class="token punctuation">-</span>part1"
      &#125;,
      &#123;
        <span class="token tag">title<span class="token punctuation">:</span></span> "網站開發",
        <span class="token tag">week<span class="token punctuation">:</span></span> "week6 <span class="token punctuation">-</span> week10",
        <span class="token tag">anchor<span class="token punctuation">:</span></span> "anchor<span class="token punctuation">-</span>part2"
      &#125;,
      &#123;
        <span class="token tag">title<span class="token punctuation">:</span></span> "探究原理",
        <span class="token tag">week<span class="token punctuation">:</span></span> "week11 <span class="token punctuation">-</span> week20",
        <span class="token tag">anchor<span class="token punctuation">:</span></span> "anchor<span class="token punctuation">-</span>part3"
      &#125;,
      &#123;
        <span class="token tag">title<span class="token punctuation">:</span></span> "專案開發",
        <span class="token tag">week<span class="token punctuation">:</span></span> "week21 <span class="token punctuation">-</span> week26",
        <span class="token tag">anchor<span class="token punctuation">:</span></span> "anchor<span class="token punctuation">-</span>part4"
      &#125;,
    ]
  <span class="token flow-control"><span class="token each"><span class="token keyword">each</span> content <span class="token keyword">in</span></span> headerContents</span>
    <span class="token tag">a<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">href</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>content<span class="token punctuation">.</span>anchor<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span></span><span class="token punctuation">)</span></span></span>
      <span class="token tag">li<span class="token attr-class">.syllabus__header-text</span></span> <span class="token plain-text">= content.title</span>
        <span class="token tag">p</span> <span class="token plain-text">= content.week</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>先宣告一個 object 後，用 Iteration 把物件內容一個一個丟出來放進 HTML tag 之中，使用起來和 JSX 有 87% 像，上面的 code 換成 JSX 大概會像是這樣：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token punctuation">&#123;</span>
    headerContents<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">content</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>content<span class="token punctuation">.</span>anchor<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>syllabus__header-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token punctuation">&#123;</span>content<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>content<span class="token punctuation">.</span>week<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Mixin"><a href="#Mixin" class="headerlink" title="Mixin"></a>Mixin</h4><p>就是 function。</p>
<pre class="line-numbers language-pug" data-language="pug"><code class="language-pug"><span class="token mixin"><span class="token keyword">mixin</span> <span class="token function">list_item</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></span>
  <span class="token tag">a<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">href</span><span class="token punctuation">=</span> <span class="token attr-value">item<span class="token punctuation">.</span>src</span><span class="token punctuation">)</span></span></span>
    <span class="token tag">li</span> <span class="token plain-text">= item.content</span>
      <span class="token tag">p</span> <span class="token plain-text">= item.text</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>JSX:</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">renderListItem</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>src<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>cotent<span class="token punctuation">&#125;</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>好用的地方不只在這，在 Mixin 當中還能加上判斷式，因此使用上就更彈性了。</p>
<pre class="line-numbers language-pug" data-language="pug"><code class="language-pug"><span class="token mixin"><span class="token keyword">mixin</span> <span class="token function">list_item</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></span>
  <span class="token tag">a<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">href</span><span class="token punctuation">=</span> <span class="token attr-value">item<span class="token punctuation">.</span>src</span><span class="token punctuation">)</span></span></span>
    <span class="token tag">li</span> <span class="token plain-text">= item.content</span>
      <span class="token tag">p</span> <span class="token plain-text">= item.text</span>
  <span class="token flow-control"><span class="token branch keyword">if</span></span>(block)
    <span class="token tag">block</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h4><p>可以繼承頁面內容，但可以做到彈性的改動，如果有固定的 header、footer 或每一頁都會出現的內容，extends 就很好用。</p>
<h4 id="include"><a href="#include" class="headerlink" title="include"></a>include</h4><p>可以把整個檔案引入，相當於你把整個檔案貼上到某個片段。</p>
<h3 id="💪-SCSS"><a href="#💪-SCSS" class="headerlink" title="💪 SCSS"></a>💪 SCSS</h3><p>過去用 SCSS 我只會用巢狀、&amp; 選擇器，偶爾再用用變數而已，超級不擅長。</p>
<p>這次開發最大的收穫是可以觀察到擅長使用這項工具的人是如何運用的。</p>
<h4 id="常用-mixin"><a href="#常用-mixin" class="headerlink" title="常用 mixin"></a>常用 mixin</h4><p><strong>media query</strong></p>
<pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token variable-line"><span class="token variable">$breakpoints</span><span class="token punctuation">:</span> (</span>
  <span class="token string">'mobile-s'</span><span class="token selector">: $width-mobile-s</span><span class="token selector">,</span>
  <span class="token string">'mobile-m'</span><span class="token selector">: $width-mobile-m</span><span class="token selector">,</span>
  <span class="token string">'mobile-l'</span><span class="token selector">: $width-mobile-l</span><span class="token selector">,</span>
  <span class="token string">'tablet'</span><span class="token selector">: $width-tablet</span><span class="token selector">,</span>
  <span class="token string">'tablet-s'</span><span class="token selector">: $width-tablet-s</span><span class="token selector">,</span>
  <span class="token string">'desktop-s'</span><span class="token selector">: $width-desktop-s</span><span class="token selector">,</span>
  <span class="token string">'desktop-m'</span><span class="token selector">: $width-desktop-m</span><span class="token selector">,</span>
  <span class="token string">'desktop-l'</span><span class="token selector">: $width-desktop-l</span><span class="token selector">,</span>
  <span class="token string">'desktop-xl'</span><span class="token selector">: $width-desktop-xl</span>
<span class="token selector">);</span>

<span class="token atrule-line"><span class="token atrule">@mixin</span> mq($width) &#123;</span>
<span class="token atrule-line">  <span class="token atrule">@if</span> map_has_key($breakpoints, $width) &#123;</span>
<span class="token variable-line">    <span class="token variable">$width</span><span class="token punctuation">:</span> map_get(<span class="token variable">$breakpoints</span>, <span class="token variable">$width</span>);</span>

<span class="token atrule-line">    <span class="token atrule">@media</span> screen and (max-width: $width) &#123;</span>
<span class="token atrule-line">      <span class="token atrule">@content</span>;</span>
    <span class="token selector">&#125;</span>
  <span class="token selector">&#125;</span>
<span class="token selector">&#125;</span>

<span class="token comment">// 使用的時候就像這樣</span>

<span class="token selector">.content &#123;</span>
<span class="token property-line">  <span class="token property">width</span><span class="token punctuation">:</span> 500px;</span>

<span class="token atrule-line">  <span class="token atrule">@include</span> mq('tablet') &#123;</span>
<span class="token property-line">    <span class="token property">width</span><span class="token punctuation">:</span> 200px;</span>
  <span class="token selector">&#125;</span>
<span class="token selector">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>pseudo</strong><br>使用偽元素時常用到的 mixin。</p>
<pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token comment">/* pseudo */</span>
<span class="token atrule-line"><span class="token atrule">@mixin</span> pseudo($display: block, $content: '') &#123;</span>
<span class="token property-line">  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token variable">$content</span>;</span>
<span class="token property-line">  <span class="token property">display</span><span class="token punctuation">:</span> <span class="token variable">$display</span>;</span>
<span class="token selector">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>position</strong></p>
<pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token atrule-line"><span class="token atrule">@mixin</span> absolute($args...) &#123;</span>
<span class="token atrule-line">  <span class="token atrule">@include</span> position(absolute, $args...);</span>
<span class="token selector">&#125;</span>

<span class="token atrule-line"><span class="token atrule">@mixin</span> relative($args...) &#123;</span>
<span class="token atrule-line">  <span class="token atrule">@include</span> position(relative, $args...);</span>
<span class="token selector">&#125;</span>

<span class="token atrule-line"><span class="token atrule">@mixin</span> fixed($args...) &#123;</span>
<span class="token atrule-line">  <span class="token atrule">@include</span> position(fixed, $args...);</span>
<span class="token selector">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>position 很常搭配上面的 pseudo mixin，用起來就會是這樣：</p>
<pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token selector">.content &#123;</span>
<span class="token property-line">  <span class="token property">width</span><span class="token punctuation">:</span> 500px;</span>

<span class="token property-line">  <span class="token property">&amp;</span><span class="token punctuation">:</span><span class="token property">before</span> &#123;</span>
<span class="token atrule-line">    <span class="token atrule">@include</span> pseudo(inline-block);</span>
<span class="token atrule-line">    <span class="token atrule">@include</span> absolute($top: 2px, $left: 5px)</span>
  <span class="token selector">&#125;</span>
<span class="token selector">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>非常滴好用！</p>
<h4 id="extends-1"><a href="#extends-1" class="headerlink" title="extends"></a>extends</h4><p>當有相同的樣式時，用 extends 就會很方便，編譯後的 css 檔案也會比較小，extends 的使用方式應該隨意找都一大把，就不贅述。</p>
<h3 id="網站上線後感想"><a href="#網站上線後感想" class="headerlink" title="網站上線後感想"></a>網站上線後感想</h3><p>其實蠻感動又緊張的，感動的是終於有時間去約會了，爽啊啊啊！！緊張的點是怕上線後有一堆問題，又或者是怕使用者回應不佳，但看到分享後底下的留言都是「設計好美！」、「速度很快欸」就放心了，深深為合作的夥伴們感到驕傲，阿我沒做什麼就不替自己驕傲了。</p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Front-End</tag>
        <tag>Pug</tag>
        <tag>Scss</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native v2 - Hooks and Network Requests</title>
    <url>/2021/03/18/React-Native-v2-Hooks-and-Network-Requests/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要轉換跑道學習開發 React Native，學習的課程是 Kadi Kraman 的 <a href="https://frontendmasters.com/courses/react-native-v2/">React Native v2</a> ，寫這篇筆記的時候是學習 React Native 的第三天，這個章節的前半部在講 Hook，算是我相對熟悉的區塊，看到熟人總是有點感動。</p>
<p>初學 React Native，概念上應該會有不少錯誤，如果有誤的話也麻煩不吝指正，非常感謝！</p>
<span id="more"></span>

<h2 id="useState-useCallback-useEffect"><a href="#useState-useCallback-useEffect" class="headerlink" title="useState, useCallback, useEffect"></a>useState, useCallback, useEffect</h2><p><a href="https://kadikraman.github.io/react-native-v2/react-hooks">useState, useCallback, useEffect</a></p>
<p>這章節就是在介紹這三個 hook 如何使用，就不多做介紹。</p>
<h2 id="Network-Requests-Exercise-📝"><a href="#Network-Requests-Exercise-📝" class="headerlink" title="Network Requests Exercise 📝"></a>Network Requests Exercise 📝</h2><p><a href="https://kadikraman.github.io/react-native-v2/network-requests-exercise">Network Requests Exercise</a></p>
<blockquote>
<p>Update your application to fetch the color palettes from the following url: <a href="https://color-palette-api.kadikraman.now.sh/palettes">https://color-palette-api.kadikraman.now.sh/palettes</a></p>
<p>Hint: you should use <code>useEffect</code>, <code>useCallback</code> and <code>useState</code> for this!</p>
</blockquote>
<p>這邊如果平常有在寫 React 的人應該很快就能完成，所以就不多做贅述。</p>
<p><code>Home.tsx</code>：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> navigation <span class="token punctuation">&#125;</span><span class="token operator">:</span> TProps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>colorPalettes<span class="token punctuation">,</span> setColorPalettes<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> fetchColorPalettes <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>
      <span class="token string">'https://color-palette-api.kadikraman.now.sh/palettes'</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token keyword">await</span> result<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setColorPalettes</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">renderPalettePreview</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> item<span class="token operator">:</span> TPalette <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">PalettePreview</span></span>
        <span class="token attr-name">handlePress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> navigation<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">'ColorPalette'</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">colorPalette</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span></span>
      <span class="token punctuation">/></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">fetchColorPalettes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>fetchColorPalettes<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FlatList</span></span>
      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>colorPalettes<span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">renderItem</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>renderPalettePreview<span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">keyExtractor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>paletteName<span class="token punctuation">&#125;</span></span>
    <span class="token punctuation">/></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="Pull-to-refresh"><a href="#Pull-to-refresh" class="headerlink" title="Pull to refresh"></a>Pull to refresh</h2><p><a href="https://kadikraman.github.io/react-native-v2/pull-to-refresh">Pull to refresh</a></p>
<p>這章節主要講的是使用 App 的時候，我們有個很直覺的更新資料方式是把手機往下滑，這時候通常會出現 loading 圖示把資料做更新，我們要做的事情就是這個。</p>
<p>在 <code>FlatList</code> 裡面，可以透過 <code>refreshing</code> 和 <code>onRefresh</code> 來辦到，首先我們要做的事情就是新增 onRrefresh 用的 function：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>isRefreshing<span class="token punctuation">,</span> setIsRefreshing<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 上面先宣告 state</span>

<span class="token keyword">const</span> <span class="token function-variable function">handleRefresh</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token function">setIsRefreshing</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">fetchColorPalettes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setIsRefreshing</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token comment">/* FlatList 這樣寫 */</span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FlatList</span></span>
  <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">&#125;</span></span>
  <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>colorPalettes<span class="token punctuation">&#125;</span></span>
  <span class="token attr-name">renderItem</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>renderPalettePreview<span class="token punctuation">&#125;</span></span>
  <span class="token attr-name">keyExtractor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>paletteName<span class="token punctuation">&#125;</span></span>
  <span class="token attr-name">refreshing</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>isRefreshing<span class="token punctuation">&#125;</span></span>
  <span class="token attr-name">onRefresh</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleRefresh<span class="token punctuation">&#125;</span></span>
<span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>步驟也很單純，就是四件事：</p>
<ol>
<li>宣告 <code>isRefreshing</code> state 和 <code>setIsRefreshing</code></li>
<li>宣告 <code>handleRefresh</code> 的 function，先把 <code>setIsRefreshing</code> 設置為 true</li>
<li>await <code>fetchColorPalettes</code> 執行完成</li>
<li><code>setIsRefreshing</code> 將 state 改為 false</li>
</ol>
<p>另外會注意到，第 4 個步驟做了 <code>setTimeout</code> 的事情，原因是有時候 data fetch 太快，loading 圖示甚至來不及跑完，為了讓使用者感受到「App 有在更新資料」，為了 UX 體驗才會設置 1 秒的 loading 時間，看起來很反直覺，因為我們在做的是讓 App 變慢的事情，但又有點道理。</p>
<h3 id="客製化的-RefreshIcon"><a href="#客製化的-RefreshIcon" class="headerlink" title="客製化的 RefreshIcon"></a>客製化的 RefreshIcon</h3><p>剛剛提到 <code>FlatList</code> 裡面，可以透過 <code>refreshing</code> 和 <code>onRefresh</code> 來處理 refresh，不過目前 refresh 的 icon 都是系統內建的樣式，有時候自己的 App 會想要有客製化的 refreshIcon，就可以透過 <code>RefreshControl</code> 來辦到這件事情。</p>
<p>延續上面 <code>FlatList</code> 的 code，並且做點小改動：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FlatList</span></span>
   <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">&#125;</span></span>
   <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>colorPalettes<span class="token punctuation">&#125;</span></span>
   <span class="token attr-name">renderItem</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>renderPalettePreview<span class="token punctuation">&#125;</span></span>
   <span class="token attr-name">keyExtractor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>paletteName<span class="token punctuation">&#125;</span></span>
   <span class="token attr-name">refreshControl</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>
   	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RefreshControl</span></span> <span class="token attr-name">refreshing</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>isRefreshing<span class="token punctuation">&#125;</span></span> <span class="token attr-name">onRefresh</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleRefresh<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
   <span class="token punctuation">&#125;</span></span>
<span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://frontendmasters.com/courses/react-native-v2/">React Native, v2</a></p>
]]></content>
      <categories>
        <category>筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>frontend master</tag>
        <tag>React Native</tag>
        <tag>Expo</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native v2 - Setup</title>
    <url>/2021/03/18/React-Native-v2-Setup/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要轉換跑道學習開發 React Native，目前學習的課程是 Kadi Kraman 的 <a href="https://frontendmasters.com/courses/react-native-v2/">React Native v2</a> ，之前完全碰過 App 的開發，所以寫這篇文的時候是我學習 React Native 第一天，主要是講講基本的 Setup，但應該會跳過 Native 的 Setup，單純只使用 Expo。</p>
<p>我認為這門課程適合的人：</p>
<ul>
<li>會使用 React 的人</li>
<li>沒碰過 React Native 的人，而且對 React Native 有興趣</li>
</ul>
<p>課程最終會做出一個簡單的 React Native App，功能就是可以顯示現有的調色盤、檢視調色盤的細節、彈出 Modal 新增調色盤等等。</p>
<p>大概就這樣，因為初學的關係，內容應該會有諸多錯誤，有誤的地方也麻煩不吝指正，感恩感恩。</p>
<span id="more"></span>

<h3 id="Getting-Started-with-Expo"><a href="#Getting-Started-with-Expo" class="headerlink" title="Getting Started with Expo"></a>Getting Started with Expo</h3><p><a href="https://kadikraman.github.io/react-native-v2/setup-expo">[Expo] Getting started with Expo</a></p>
<p>基本上可以參考 React Native 官方文件的 Quick Start with Expo CLI</p>
<h3 id="Getting-Started-with-Plain-React-Native"><a href="#Getting-Started-with-Plain-React-Native" class="headerlink" title="Getting Started with Plain React Native"></a>Getting Started with Plain React Native</h3><p>這章節我先略過，感覺很麻煩，後續有時間看的時候會再補上。</p>
<h3 id="Adding-a-Linter"><a href="#Adding-a-Linter" class="headerlink" title="Adding a Linter"></a>Adding a Linter</h3><p><a href="https://kadikraman.github.io/react-native-v2/code-style">Adding a linter</a></p>
<p>主要是安裝 React Native 的 eslint plugin，首先輸入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> eslint @react-native-community/eslint-config --dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><strong>eslint</strong> - the code linter for JavaScript</li>
<li><strong>@react-native-community/eslint-config</strong> - a community-built eslint configuration for React Native</li>
</ul>
<p>再來於 root 新增 <code>.eslintrc.js</code> 檔案，在檔案裡面加上：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// .eslintrc.js</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  root<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token string">'@react-native-community'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>讓 linter 知道我們用了什麼 extends。</p>
<p>另外還要調整 prettier 的設定檔，所以我們要新增 <code>.prettierrc.js</code>，然後再裡面加上：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// .prettierrc.js</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  bracketSpacing<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  singleQuote<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  trailingComma<span class="token operator">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>bracketSpacing</code> - adding a space around brackets, e.g. <code>import &#123; useState &#125; from &#39;react&#39;;</code> vs <code>import &#123;useState&#125; from &#39;react&#39;;</code></li>
<li><code>singleQuote</code> - using single quotes for strings, e.g. <code>import React from &#39;react&#39;</code> vs <code>import React from &quot;react&quot;</code></li>
<li><code>trailingComma</code> - adding a trailing comma after array arguments (the default is not to have a trailing comma for the last element of the array)</li>
</ul>
<h3 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h3><p>如果 Expo 在手機裝置上 debug 的方式蠻酷的，就是搖手機，帥吧！</p>
<ul>
<li>on device - shake the device (yes, really!)</li>
<li>iOS simulator - Cmd + D</li>
<li>Android emulator - Cmd + M on Mac, Crl + M on Windows/Linux</li>
</ul>
<p>搖手機之後可以看到幾個 debug 工具，目前覺得最有用的應該就是「Debug Remote JS」，可以在 Chrome 打開 dev tool 來看 console。</p>
<p>「Show Element Inspector」我目前感受不到它的用處，因為是在手機裡面 inspect element，眼睛真的是會看到脫窗。</p>
<p>另外，除了熟悉的 <code>console.log</code> 以外，<code>console.warn</code> 和 <code>console.error</code> 也是很棒的除錯工具。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://frontendmasters.com/courses/react-native-v2/">React Native, v2</a></p>
]]></content>
      <categories>
        <category>筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>frontend master</tag>
        <tag>React Native</tag>
        <tag>Expo</tag>
      </tags>
  </entry>
  <entry>
    <title>React 學習資源推薦</title>
    <url>/2019/09/01/React-%E5%AD%B8%E7%BF%92%E8%B3%87%E6%BA%90%E6%8E%A8%E8%96%A6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前是學習 React 約兩個禮拜的初學者，菜到爆，到現在都還在卡關啦其實，不過當菜雞的優勢是還沒受到知識的詛咒，了解初學的困境，下面的東西都是我剛接觸 React 卡關後幫助我蠻多的東西。</p>
<span id="more"></span>
<p><strong>需要的前置知識</strong>： Webpack、JavaScript、OOP</p>
<p><strong>學習目標</strong>：搞懂 React 基礎，知道 React 的思維、原理，知道 state、props，各種 life cycle，JSX 語法。</p>
<h2 id="資源推薦"><a href="#資源推薦" class="headerlink" title="資源推薦"></a>資源推薦</h2><h3 id="影片"><a href="#影片" class="headerlink" title="影片"></a>影片</h3><p><a href="https://www.youtube.com/watch?v=Ke90Tje7VS0">React Tutorial - Learn React - React Crash Course [2019]</a></p>
<h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><p><a href="http://huziketang.mangojuice.top/books/react/">React 小書</a></p>
<p><a href="https://reactjs.org/tutorial/tutorial.html">React 官方文件</a></p>
<p>當中我首推 React 小書。</p>
<h2 id="學習的障礙"><a href="#學習的障礙" class="headerlink" title="學習的障礙"></a>學習的障礙</h2><p>我剛開始學習的障礙是 state 對應 UI 這件事情，觀念上應該能夠理解，因為就是改 state 畫面就變，很直覺。</p>
<p>但資訊量頗大，沒辦法把原本操作 DOM 的思維馬上轉換成這樣的思考方式，加上把程式碼切分成很多 component 後，又多了父子 Component 溝通，還有各種 life cycle，其實頗複雜的，有一陣子我真的不知道自己在學三小。</p>
<p>另外如果對 JavaScript 的 filter、map 不熟的話，蠻建議多看一下文件然後隨意實作一下多熟悉，React 會有很多相關的應用方式。</p>
<h2 id="學習順序與首推資源"><a href="#學習順序與首推資源" class="headerlink" title="學習順序與首推資源"></a>學習順序與首推資源</h2><h3 id="順序"><a href="#順序" class="headerlink" title="順序"></a>順序</h3><p>React 小書 -&gt; 影片 -&gt; 官方文件</p>
<h3 id="首推資源-React-小書"><a href="#首推資源-React-小書" class="headerlink" title="首推資源 - React 小書"></a>首推資源 - React 小書</h3><p>我認為教學比較忌諱的是理所當然的塞給你一些原本不懂的資訊，然後操作又很快，略過太多細節，你只會想說這是什麼？為什麼你理所當然的講出來了？我在這裡幹嘛？</p>
<p>React 小書是我剛接觸 React 覺得最友善的資源，先從 JavaScript 物件說起，慢慢從原理說理，一步一步帶你，每個章節的結尾還有評論系統的實作，在理論和實作都沒有遺漏。</p>
<p>另外，React 小書很棒的地方是有把 Component 之間的關係畫成樹狀圖，一開始看到的時候大大幫助我理解 React，剛接觸 React 會迷失在父子Component 溝通的大海中，在腦中建立 Component 的樹狀圖就會清楚許多！</p>
<h3 id="其他資源"><a href="#其他資源" class="headerlink" title="其他資源"></a>其他資源</h3><p>React 官方文件大家好像蠻推的，的確是不錯的資源，但我認為 tic tac toe 的範例教學就有節奏太快的問題，剛開始做可能就很懞懂的照做，結束後不懂自己到底剛剛做了什麼，所以會推薦 React 小書建立觀念後碰官方教學會好一點。</p>
<p>Mosh 的影片口條不錯，然後也超級詳細，推推，不過我看影片容易恍神，所以排序就在 React 小書後面，單純是個人學習方式的偏好。</p>
<p>結尾來一張巴哥</p>

<p>photographed by <a href="https://unsplash.com/@matthewhenry">Matthew Henry</a></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://github.com/Lidemy/mentor-program-3rd">Lidemy/mentor-program-3rd</a></p>
<p><a href="https://www.youtube.com/watch?v=Ke90Tje7VS0">React Tutorial - Learn React - React Crash Course [2019]</a></p>
<p><a href="http://huziketang.mangojuice.top/books/react/">React 小書</a></p>
<p><a href="https://reactjs.org/tutorial/tutorial.html">React 官方文件</a></p>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">Array.prototype.filter()</a></p>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/map">Array.prototype.map()</a></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>The Complete Junior to Senior Web Developer Roadmap - Performance part2 隨意筆記</title>
    <url>/2020/03/28/The-Complete-Junior-to-Senior-Web-Developer-Roadmap-Performance-part2-%E9%9A%A8%E6%84%8F%E7%AD%86%E8%A8%98/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這章節主要在講述 React Performance 的優化。</p>
<span id="more"></span>
<h2 id="為何要-code-splitting"><a href="#為何要-code-splitting" class="headerlink" title="為何要 code splitting"></a>為何要 code splitting</h2><p>如果不做 code splitting，就會直接載入 Webpack bundle 好的一大包檔案，這當然也是沒問題，但使用者就會因為下載這一大包檔案而在使用時卡住一陣子，影響使用者體驗。</p>
<p>code splitting 的用意就是在進入那個頁面，需要使用那個 Component 時才下載檔案，改善網頁讀取速度，增進使用體驗。</p>
<h2 id="Code-Splitting-React-lazy"><a href="#Code-Splitting-React-lazy" class="headerlink" title="Code Splitting - React lazy"></a>Code Splitting - React lazy</h2><p><a href="https://zh-hant.reactjs.org/docs/code-splitting.html">React 官方文件 - Code-Splitting</a></p>
<p><a href="https://juejin.im/post/5c60e1d2f265da2dd16843f6">[译] 延迟加载 React Components (用 react.lazy 和 suspense)</a></p>
<p>React 官方提供 code splitting 的方法是 <code>React.lazy</code>，以下提供簡單的使用範例，可以到 <a href="https://github.com/aneagoie/code-splitting-exercise">這裡</a> clone 專案玩玩看</p>
<p>這邊課程提供的是一個自製的 router，在點擊按鈕的同時，就會切換到不同 route，return 相對應的 component，達到 code splitting 的效果。</p>
<p>首先要用 React.lazy 包裹著要 import 進來的檔案。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Page2Lazy <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./Components/Page2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> Page3Lazy <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./Components/Page3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>再來在相對應的 return Component 中，加入 Suspense 包裹住使用 React.lazy 的 Component。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>route <span class="token operator">===</span> <span class="token string">'page1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token operator">&lt;</span>Page1 onRouteChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>onRouteChange<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>route <span class="token operator">===</span> <span class="token string">'page2'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">&lt;</span>div<span class="token operator">></span>Loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>Page2Lazy onRouteChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>onRouteChange<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">></span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">&lt;</span>div<span class="token operator">></span>Loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>Page3Lazy onRouteChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>onRouteChange<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">></span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>lazy component 都必須包裹在 Suspense Component 裡面，Suspense 的用處在於可以在 fallback 這個 props 放入 loading 時要給予的 Component，以避免在 import 檔案時的空檔使用者會很疑惑，陷入等待空畫面的狀態。</p>
<p>當然，搭配 Router 也是可以的，就像下面這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">&lt;</span>div<span class="token operator">></span>Loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>Switch<span class="token operator">></span>
        <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/page1"</span> component<span class="token operator">=</span><span class="token punctuation">&#123;</span>Page1<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/page2"</span> component<span class="token operator">=</span><span class="token punctuation">&#123;</span>Page2Lazy<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/page2"</span> component<span class="token operator">=</span><span class="token punctuation">&#123;</span>Page3Lazy<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>另外，關於 module 載入失敗的 error 也可以做相對應的處理，可以寫一個 ErrorBoundary 的 Component 來處理錯誤，更多詳情在 <a href="https://zh-hant.reactjs.org/docs/error-boundaries.html">React 官方文件 - 錯誤邊界</a> 可以參考。</p>
<p>使用的話就像這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>MyErrorBoundary<span class="token operator">></span>
      <span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">&lt;</span>div<span class="token operator">></span>Loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>section<span class="token operator">></span>
          <span class="token operator">&lt;</span>OtherComponent <span class="token operator">/</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>AnotherComponent <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>MyErrorBoundary<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h3><p>值得注意的是，React.lazy 並不能用在 Server Side Rendering，所以如果要做 SSR 的話，可以改用另一個叫做 <a href="https://loadable-components.com/docs/loadable-vs-react-lazy/">Loadable Components</a> 的套件！</p>
<p>另外當然還有其他優化能做，比如 class component 裡的 shouldComponentUpdate，React Hooks 裡面的 useCallback 等等，課程裡面也有提及，但目前有點懶惰，先紀錄下 React lazy～</p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Udemy 課程</tag>
      </tags>
  </entry>
  <entry>
    <title>The Complete Junior to Senior Web Developer Roadmap - SSH 筆記</title>
    <url>/2020/03/07/The-Complete-Junior-to-Senior-Web-Developer-Roadmap-SSH-%E7%AD%86%E8%A8%98/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這部分就是我學習 「The Complete Junior to Senior Web Developer Roadmap」這堂 Udemy 線上課程的筆記，這篇是有關 SSH 的內容。</p>
<span id="more"></span>

<h2 id="Introduction-to-SSH"><a href="#Introduction-to-SSH" class="headerlink" title="Introduction to SSH"></a>Introduction to SSH</h2><p>SSH 是一種協定。</p>
<p>什麼意思呢？你也許聽過 HTTP、FTP、HTTPS 等協定，這些協定都是用於讓兩台電腦間溝通的協定，SSH 也是同理，是一座讓兩台機器溝通的橋樑。</p>
<p>舉個例子，HTTP 讓你能夠在 Browser 和 Server 兩者傳輸檔案（像 HTML、CSS、JavaScript 檔）；FTP 讓你能夠傳輸檔案、在 hostgator 或 generic hostng 等平台上傳檔案；HTTPS 類似於 HTTP，但是有經過加密，這代表著第三方沒辦法讀取正在傳輸的檔案。</p>
<p>SSH 也是一種協議，讓兩台電腦能夠在網路連結，它讓使用者能夠透過網路控制遠端電腦，並且在連結過程中加密，使第三方的壞蛋沒辦法監控你。</p>
<p>這時候你可能會想，那跟 HTTPS 差在哪？畢竟他們兩個都能用於兩台機器間的溝通，過程中也會加密啊！Well，就像 web browser 透過 HTTPS 與 Server 溝通，並且呈現 Web 頁面一樣，shell 需要一個特定的協定來交換資料，或是讓兩台電腦溝通（並不只是 browser 跟 server），這也是為什麼 SSH 稱為 <strong>secure shell protocal</strong>。</p>
<p>SSH 最大的優點就是它用了加密的方式，讓 client 和 host 之間傳遞資訊的時候能夠保持安全。</p>
<h2 id="SSH-Command"><a href="#SSH-Command" class="headerlink" title="SSH Command"></a>SSH Command</h2><p>接下來要開始實作了！首先我們要買虛擬機器，這邊課程選擇的是 Digital Ocean，最便宜的方案是 $5 美金/月，但其實有其他免費的平台可以買虛擬機器，比如 AWS、GCP 等，但這邊我就用 Digital Ocean 了。</p>
<p>首先點擊 Navbar 的 product 中的 Droplet。<br><img data-src="https://upload.cc/i1/2020/03/01/KSCBg6.png" alt="image"></p>
<p>接著會進入到 console 面板中，點擊 New Droplet。<br><img data-src="https://upload.cc/i1/2020/03/01/Gfq3rC.png" alt="new droplet"></p>
<p>點擊後會進入到 Create Droplet 頁面，裡面可以調整一些像是作業系統、使用方案等等的選項，這邊我作業系統選擇 Ubuntu，plan 選擇最便宜的 $5 /月的方案。</p>
<p><img data-src="https://upload.cc/i1/2020/03/01/yeA34o.png" alt="create droplet"></p>
<p><img data-src="https://upload.cc/i1/2020/03/01/y5lsWE.png" alt="plan"></p>
<p>datacenter region 我就隨便選，離自己所在地近一點應該會比較好。<br><img data-src="https://upload.cc/i1/2020/03/01/Ei5F1B.png" alt="datacenter"></p>
<p>create 成功後，可以點擊進去自己剛剛買的機器，看詳細的資訊，此時我們順便複製機器的 IPv4，並且將我們目光轉移到自己的 Terminal 上，我們要開始連接到自己剛剛創建的機器裡了！</p>
<p>在 Terminal 輸入這行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> sudo@剛剛複製的 IPv4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此時它會要求你輸入密碼，密碼可以在 digital ocean 寄給你的 email 中看到 password，成功進入機器後，又會要求你更改密碼，再次輸入 email 中的密碼後，就可以改成自己想要的密碼了～</p>
<p>當你看到這樣的畫面時，就代表成功連進去遠端的機器了！<br><img data-src="https://upload.cc/i1/2020/03/01/IH3NjU.png" alt="remote"></p>
<h3 id="說明一下剛剛的-command-line"><a href="#說明一下剛剛的-command-line" class="headerlink" title="說明一下剛剛的 command line"></a>說明一下剛剛的 command line</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token punctuation">&#123;</span>user<span class="token punctuation">&#125;</span>@<span class="token punctuation">&#123;</span>host<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>透過 ssh，我們可以遠端連線到任何允許 ssh 連線的電腦中，酷吧！</p>
<p><code>ssh</code> 代表你要使用 ssh 加密的方式連線，</p>
<p><code>user</code> 代表你要登入的帳戶，舉例來說，你想要使用 root 來登入，root 代表你是系統的管理者，有完整的權限可以更改系統。</p>
<p><code>host</code> 代表你想要登入的電腦，可以是 IP 名稱或者是 domain name。</p>
<h3 id="為何要學-SSH"><a href="#為何要學-SSH" class="headerlink" title="為何要學 SSH"></a>為何要學 SSH</h3><p>在工程師的生涯中，你很可能會遇到各種需要用到 SSH 的情況，像課程中的老師過去就發生已經部署好的 App 不小心被刪除，所以需要重新用 SSH 連線到遠端電腦，重新 install 的狀況。</p>
<h2 id="Saving-The-Day-Through-SSH"><a href="#Saving-The-Day-Through-SSH" class="headerlink" title="Saving The Day Through SSH"></a>Saving The Day Through SSH</h2><h3 id="安裝-nodejs"><a href="#安裝-nodejs" class="headerlink" title="安裝 nodejs"></a>安裝 nodejs</h3><p>首先 ssh 連線進虛擬機器後，輸入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此時會 update 一些有的沒的，我也不太確定實際上在 update 什麼，但如果不先 update 的話，會說找不到 Nodejs 的 package。</p>
<p>update 結束後，接著輸入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="複製本機的檔案到遠端機器中"><a href="#複製本機的檔案到遠端機器中" class="headerlink" title="複製本機的檔案到遠端機器中"></a>複製本機的檔案到遠端機器中</h3><p>接著試試看把本機的資料夾透過 ssh 複製到遠端機器裡吧！</p>
<p>首先我在 Desktop 創建一個叫 <code>emptyFolder</code> 的資料夾，接著進入 <code>emptyFolder</code>中，此時的 terminal 長這樣：</p>
<p><img data-src="https://upload.cc/i1/2020/03/02/6cFQ1z.png" alt="emptyFolder"></p>
<p>接著輸入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rsync</span> -av <span class="token builtin class-name">.</span> @機器的IPv4 ~/路由<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>就可以成功把本機的檔案傳送到遠端機器囉。</p>
<h2 id="How-SSH-Works"><a href="#How-SSH-Works" class="headerlink" title="How SSH Works"></a>How SSH Works</h2><p>SSH 當中有三項技術</p>
<ol>
<li>Symmetrical Encryption (對稱性加密)</li>
<li>Asymmetrical Encryption （非對稱性加密）</li>
<li>Hashing （雜湊）</li>
</ol>
<h3 id="Symmetrical-Encryption"><a href="#Symmetrical-Encryption" class="headerlink" title="Symmetrical Encryption"></a>Symmetrical Encryption</h3><p>對稱性加密提供一把 secret key 讓加密/解密兩方使用，</p>
<p>運作的方式像是以下的圖片<br><img data-src="https://upload.cc/i1/2020/03/02/mgQtRZ.png" alt="symmetrical encryption"></p>
<p>client 端把想要傳遞的內容經過 secret key 加密後，會變成一串奇妙的文字，讓第三方沒辦法看懂， host 端再藉由那把 secret key 解密，得到 client 端傳遞的資訊。</p>
<p>此時能注意到的問題是，看來只要能有這把鑰匙的人，就能得到資訊的內容，<strong>那鑰匙被幹走怎辦呢？</strong> 看來問題就會出現在「交換鑰匙的方式」是否安全了，因此，這個安全交換鑰匙的方式我們就稱為 <strong>key exchange algorithm。</strong></p>
<h3 id="Asymmetrical-Encryption"><a href="#Asymmetrical-Encryption" class="headerlink" title="Asymmetrical Encryption"></a>Asymmetrical Encryption</h3><p>延續前面提及的 key exchange algorithm，它需要透過一個叫做 asymmetrical encryption（非對稱性加密）的方式執行。</p>
<p>至於非對稱性加密是什麼，以下取自<a href="https://blog.techbridge.cc/2017/04/16/simple-cryptography/">網路安全(1) - 基礎密碼學</a>一文：</p>
<blockquote>
<p>非對稱式加密，就是每個鑰匙 pair 有兩個鑰匙，一個公鑰一個私鑰。</p>
<p>可以公鑰加密私鑰解密，也可以私鑰加密公鑰解密。</p>
<p>可以公鑰加密私鑰解密，也可以私鑰加密公鑰解密。</p>
<p>可以公鑰加密私鑰解密，也可以私鑰加密公鑰解密。</p>
<p>傳訊之前呢，A 跟 B 都先生成一組公私鑰的 pair，A 把 A 的公鑰傳給 B，B 把 B 的公鑰傳給 A。</p>
<p>好現在 A 有他自己的私鑰跟 B 的公鑰，B 有他自己的私鑰跟 A 的公鑰。<br>A 要傳東西給 B 就用 B 的公鑰加密，然後 B 拿到之後用 B 自己的私鑰解密。</p>
<p>一切搞定，即使在中途被攔截，只要 B 的私鑰沒有流出就完全不會有事。反之亦然。</p>
<p>中心思想就是利用公鑰可以用來加密的特性，而如果你是用公鑰加密你必須要用私鑰解密。所以我根本不怕公鑰流出(公開給所有人也沒差)，只要我私鑰保存好就好，我私鑰根本就沒傳過，也不可能被攔截。</p>
</blockquote>
<h4 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h4><p><a href="https://blog.techbridge.cc/2017/04/16/simple-cryptography/">網路安全(1) - 基礎密碼學</a></p>
<p><a href="https://medium.com/@RiverChan/%E5%9F%BA%E7%A4%8E%E5%AF%86%E7%A2%BC%E5%AD%B8-%E5%B0%8D%E7%A8%B1%E5%BC%8F%E8%88%87%E9%9D%9E%E5%B0%8D%E7%A8%B1%E5%BC%8F%E5%8A%A0%E5%AF%86%E6%8A%80%E8%A1%93-de25fd5fa537">基礎密碼學(對稱式與非對稱式加密技術)</a></p>
<p><a href="https://www.youtube.com/watch?v=NmM9HA2MQGI">Secret Key Exchange (Diffie-Hellman) - Computerphile</a></p>
<p><a href="https://www.youtube.com/watch?v=Yjrfm_oRO0w">Diffie Hellman -the Mathematics bit- Computerphile</a></p>
<h3 id="Hashing"><a href="#Hashing" class="headerlink" title="Hashing"></a>Hashing</h3><p>透過 Symmetrical Encryption + Asymmetrical Encryption 的搭配，看起來 client 和 host 溝通是挺安全的，沒什麼問題對吧！</p>
<p>但此時又有一個問題，就是如果有個中間人可以偽造他自己的身份，讓 host 相信對面是 client，讓 client 相信對面是 host，偽造了身份並且在當中做手腳，就會很不妙，因此需要 hash 來做相關處理。</p>
<p>以下取自<a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">SSH原理与运用（一）：远程登录</a>：</p>
<blockquote>
<p>SSH之所以能够保证安全，原因在于它采用了公钥加密。</p>
<p>整个过程是这样的：（1）远程主机收到用户的登录请求，把自己的公钥发给用户。（2）用户使用这个公钥，将登录密码加密后，发送回来。（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</p>
<p>这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。</p>
<p>可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的”中间人攻击”（Man-in-the-middle attack）。</p>
</blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">SSH原理与运用（一）：远程登录</a></p>
<h2 id="SSH-Into-a-Server"><a href="#SSH-Into-a-Server" class="headerlink" title="SSH Into a Server"></a>SSH Into a Server</h2><p>根據前面連線到遠端機器的經驗，應該會發現每次輸入 <code>ssh root@IPv4</code>都必須輸入 password 才能連線，那更方便的辦法是什麼呢？</p>
<p>就是用前面提到的 ssh key 來進行登入！</p>
<p>至於要怎麼做呢？</p>
<h4 id="第一步-進入-ssh-資料夾"><a href="#第一步-進入-ssh-資料夾" class="headerlink" title="第一步 - 進入 ssh 資料夾"></a>第一步 - 進入 ssh 資料夾</h4><p>首先在 terminal 輸入 <code>cd ~/.ssh</code>，此時可以進入到隱藏的 <code>.ssh</code> 資料夾中，這邊是存放你電腦各種 ssh key 的地方。</p>
<h4 id="第二步-產生-ssh-key"><a href="#第二步-產生-ssh-key" class="headerlink" title="第二步 - 產生 ssh key"></a>第二步 - 產生 ssh key</h4><p>接下來，我們要輸入 command line 產生 public 和 private 的 ssh key for Digital Ocean。</p>
<p>輸入<code>ssh-keygen -C &quot;你的email&quot;</code>，-C 代表 comment，按下 enter 後可以看到 terminal 出現「Generating public/private rsa key pair.」，代表產生了一對 public/private key。</p>
<p>接著要輸入你想儲存的檔案名，因為是為了 digital ocean 的 server 而創建的，我就把名稱取為 <code>id_rsa_digitalocean</code></p>
<p>再來會問你 passphrase，這是為了額外的安全設定而出現的，可以直接按 Enter 略過，它就會是 empty。</p>
<p>連按兩次 Enter 後，我們就成功產生 ssh key 了！</p>
<h4 id="第三步-把-public-key-內容放進遠端機器中"><a href="#第三步-把-public-key-內容放進遠端機器中" class="headerlink" title="第三步 - 把 public key 內容放進遠端機器中"></a>第三步 - 把 public key 內容放進遠端機器中</h4><p>首先在 <code>.ssh</code> 資料夾內，輸入這個 command line：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pbcopy <span class="token operator">&lt;</span> ~/.ssh/id_rsa_digitalocean.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>這個指令的用途是可以把檔案內的內容複製。</p>
<p>接下來輸入 <code>ssh root@IPv4</code> 連線到你的遠端機器裡，再輸入 <code>cd .ssh</code> 進入 ssh 資料夾中，輸入 <code>ls</code> 可以發現裡面會有一個叫做 <code>authorized key</code> 的檔案，這份檔案用途就是記錄 public key 的 rsa 內容，所以輸入 <code>nano authorized_key</code> 把剛剛複製的內容貼到檔案裡面後，按下 CTRL + X 並且保存退出。</p>
<h4 id="第四步-在本機做-ssh-add"><a href="#第四步-在本機做-ssh-add" class="headerlink" title="第四步 - 在本機做 ssh-add"></a>第四步 - 在本機做 ssh-add</h4><p>接著要進入最後一步了！</p>
<p>如果沒有做最後一步的話，連線到遠端機器的時候應該會出現 <code>permission denied</code>。</p>
<p>因此要回到剛剛本機的 <code>.ssh</code> 資料夾中，輸入 <code>ssh-add ~/.ssh/id_rsa_digital_ocean</code> ，把 private key 的內容加進去，這樣就能不用輸入密碼，利用 ssh key 快速來往自己租用的機器啦！</p>
<p>也可以試試看把本機裡面 .ssh 檔案的 digital ocean private key 刪掉試試看，會發現被 permission denied 喔，因為你不再有 private key 了。</p>
<h3 id="Digital-Ocean"><a href="#Digital-Ocean" class="headerlink" title="Digital Ocean"></a>Digital Ocean</h3><p>其實 Digital Ocean 也有提供更快速的方式用 ssh key 連線，進入到 console 控制台點擊 add ssh key，把產生的 public key 複製貼上後就能使用，超級快速！</p>
<h3 id="Github-練習"><a href="#Github-練習" class="headerlink" title="Github 練習"></a>Github 練習</h3><p>為了練習，接著就用 Github 來實作吧！</p>
<p>你可以發現，一般在 clone 別人的 repo 時，是用 HTTPS 的方式來 clone，麻煩的是每次都要重複輸入自己 Github 帳密，但我們現在學了 ssh key 的使用方式，當然就是要讓自己生活方便點啦。</p>
<p>至於怎麼實作，其實和前面 digital ocean 使用 ssh key 的方式大同小異，Github 文件也寫得很完整，就附上連結自行練習了～<br><a href="https://help.github.com/en/enterprise/2.17/user/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">Generating a new SSH key and adding it to the ssh-agent</a></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>Udemy 課程</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 自動刪除沒屁用 import 以及排版</title>
    <url>/2020/06/27/VSCode-Auto-Organize-Import/</url>
    <content><![CDATA[<h3 id="🤞前言"><a href="#🤞前言" class="headerlink" title="🤞前言"></a>🤞前言</h3><p>目前 Framework 都使用模組化方式撰寫的關係，通常都會 import 各種 library、component，不過通常會遇到兩個煩惱，第一個是 import 沒用到的內容，把沒用到的東西 import 進來除了擾亂閱讀以外，還會跳出很煩的黃字警告（最討厭的是這個），第二個是 import 的排版，一般來說為了可讀性，在排版上會有一些順序的規則，通常順序規則會是： 「library ➡️ 你的 component ➡️ 根據路徑的長短排版」，比如像這樣：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Switch <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Chat <span class="token keyword">from</span> <span class="token string">'./components/ChatPage'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Join <span class="token keyword">from</span> <span class="token string">'./components/JoinPage'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Playground <span class="token keyword">from</span> <span class="token string">'./components/Playground'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<h3 id="🤞怎麼解決"><a href="#🤞怎麼解決" class="headerlink" title="🤞怎麼解決"></a>🤞怎麼解決</h3><p>好，那在遇到這兩個問題時，我都怎麼解決呢？第一個沒用 import 的問題，我是都會把它刪掉，但怎麼刪掉呢？手動刪掉，那第二個排版順序的問題呢？手動排版。對，超級 DRY 的，我很羞愧。</p>
<p>前幾天覺得喔幹真的太麻煩了，每次都要檢查一遍真的 hen 麻煩，IDE 有沒有自動幫我檢查然後刪掉沒用 import 還有排版的功能啊？？有！而且只要兩三行設定就可以了。</p>
<p>首先打開 VSCode 的 settings.json（就是 VScode 的設定檔），加上這行：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"editor.codeActionsOnSave"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token property">"source.organizeImports"</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>光看語意上的意思應該很明白，<code>editor.codeActionsOnSave</code> 就是你的 IDE 在儲存時會執行的 actions，<code>source.organizeImports</code> 就是會幫你 <code>organize</code> import，把沒用的 import 都刪掉啦～～</p>
<p>使用前：<br>可以看到有兩個沒用的 useEffect 和 useCallback，以及凌亂的排版<br><img data-src="https://i.imgur.com/1s92Xtn.png" alt="before"></p>
<p>使用後：<br>按下 ctrl + s 後<br><img data-src="https://i.imgur.com/mkgYc3W.png" alt="after"></p>
<p>噹啷！乾淨的版面出現了！而且方便到靠北！</p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Front-End</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Builder Pattern（生成器）</title>
    <url>/2021/01/02/builder-pattern/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這是在讀書會當主講時負責的 builder pattern，因為本人對 OOP 以及 design pattern 並沒有到非常熟悉，內容非常可能有諸多錯誤，因此僅供參考，如果有錯歡迎指正，感謝！</p>
<span id="more"></span>

<h2 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h2><p>假設今天你是建商，要替客戶蓋房子，但房子會有各式各樣的要求，比如會有需要泳池的、需要雕像的、需要車庫的房子等等，也就是說生產產品時，你會有各式各樣客製化的需求。</p>
<p>而為了達成這個需求，你可能會有幾種解法，下面是可能的解法：</p>
<h3 id="想法一：建立一堆-subclass"><a href="#想法一：建立一堆-subclass" class="headerlink" title="想法一：建立一堆 subclass"></a>想法一：建立一堆 subclass</h3><p><img data-src="https://i.imgur.com/hCJHkBX.png"></p>
<p>辦法就是基於 house 這個 class 去 extends 很多 subclass，也就是說會有很多客製化的房子會繼承 house 這個 class，程式碼可能會像是這樣：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">House</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 房子</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">HouseWithSwimPool</span> <span class="token keyword">extends</span> <span class="token class-name">House</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 有游泳池的房子</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">HouseWithStatues</span> <span class="token keyword">extends</span> <span class="token class-name">House</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 有雕像的房子</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">HouseWithGardens</span> <span class="token keyword">extends</span> <span class="token class-name">House</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 有花園的房子</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但這方法不是很理想，因為當你需要客製化的房子很多種類時，就要跟著寫一堆 subclass，擴充起來非常的麻煩。</p>
<h3 id="想法二：用參數來決定"><a href="#想法二：用參數來決定" class="headerlink" title="想法二：用參數來決定"></a>想法二：用參數來決定</h3><p><img data-src="https://i.imgur.com/3gmN3rf.png"></p>
<p>既然 subclass 很麻煩，那我們改用 constructor 裡面的參數來客製化房子吧！辦法就是在 new 一個新的 House 時，透過參數來決定客製化的內容是甚麼，程式碼可能會像是這樣：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">House</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span>
      windows<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> 
      doors<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> 
      rooms<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> 
      hasGarage<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> 
      hasSwimPool<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> 
      hasStatues<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> aHouse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">House</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>看起來是一定程度達成了需求，但會有甚麼問題呢？</p>
<p>可以發現到每 new 一個 House 就要傳非常多參數進去，假設今天有 10 個參數，new 的時候就要傳 10 個；又或者今天你只想要第 1 和第 10 個參數，中間 2 - 8 的參數你就只能傳 null，不得不給它一個值，但其實 2 - 8 的參數你是不需要的，也就是說每 new 一個 House 就會變得頗為麻煩。</p>
<h3 id="想法三：Builder-Pattern"><a href="#想法三：Builder-Pattern" class="headerlink" title="想法三：Builder Pattern"></a>想法三：Builder Pattern</h3><p><img data-src="https://i.imgur.com/y7Z5Rh6.png"></p>
<p>接著就輪到我們 Builder Pattern 出場的時機了，我們不用 subclass，也不用參數來決定客製化的細節，而是把每個客製化的細節拆分成一個一個的 method，在調整完客製化的內容之後，再呼叫 <code>getResult</code> 來取得客製化的結果。</p>
<h2 id="Builder-Pattern-程式碼示範呢？"><a href="#Builder-Pattern-程式碼示範呢？" class="headerlink" title="Builder Pattern 程式碼示範呢？"></a>Builder Pattern 程式碼示範呢？</h2><p>來惹來惹，熱騰騰的範例來惹。</p>
<h3 id="Builder-Pattern-的-UML"><a href="#Builder-Pattern-的-UML" class="headerlink" title="Builder Pattern 的 UML"></a>Builder Pattern 的 UML</h3><p>單純用文字講解有點不夠力，要理解 Builder Pattern 來看程式碼會更快一點！首先來看一下 Builder Pattern 的 UML 圖：</p>
<p><img data-src="https://i.imgur.com/cXa0fsE.png"></p>
<p>從上圖可以看到關於 Builder Pattern 我們需要幾個東西，</p>
<ol>
<li><strong>Builder 的 Interface</strong>：定義 Builder class 需要實作的 method。</li>
<li><strong>Builder 的 class</strong>：建造客製化產品的 Class，裡面會實作 <code>Builder Interface</code> 的客製化 method。</li>
<li><strong>Director</strong>：屬於 optional 的 class，在 Builder Pattern 裡面可用可不用，用處是把常用的建造產品步驟寫成一個 method，而後再使用 builder 快速建立出常用的產品。</li>
<li><strong>Product 的 class</strong>：要生產的客製化產品。</li>
</ol>
<p>可以看到總共需要有三個 class，一個 interface，接著我們就一個一個來實作，更仔細探討每個 class 的用途及細節吧！</p>
<p>既然我們剛剛的情境是擔任建商，那我們就先看看需要什麼：</p>
<ol>
<li><code>IHouseBuilder</code>：HouseBuilder 的 Interface</li>
<li><code>HouseBuilder</code>：房子的建造者</li>
<li><code>Director</code>：指揮 HouseBuilder 進行一連串步驟蓋出房子的 class。</li>
<li><code>House</code>：要客製化的房子。</li>
</ol>
<p>既然知道需要什麼了，就來動手實作吧！</p>
<h3 id="實作：House-Class"><a href="#實作：House-Class" class="headerlink" title="實作：House Class"></a>實作：House Class</h3><p>首先來到我們想要製造的產品 — <code>House</code>：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 要製造的 product</span>
<span class="token keyword">class</span> <span class="token class-name">House</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> windows<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">2</span>
  <span class="token keyword">public</span> walls<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">4</span>
  <span class="token keyword">public</span> doors<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token keyword">public</span> rooms<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">2</span>
  <span class="token keyword">public</span> hasGarage<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token keyword">public</span> hasSwimPool<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token keyword">public</span> hasStatue<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span>

  <span class="token keyword">constructor</span><span class="token punctuation">(</span>windows<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> walls<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>windows <span class="token operator">=</span> windows
    <span class="token keyword">this</span><span class="token punctuation">.</span>walls <span class="token operator">=</span> walls
  <span class="token punctuation">&#125;</span>
  
  <span class="token comment">// 為了待會列出調整完客製化細節而使用的 console.log，實際上不需要</span>
  <span class="token keyword">public</span> <span class="token function">listParts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      window<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>windows<span class="token punctuation">,</span>
      walls<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>walls<span class="token punctuation">,</span>
      doors<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>doors<span class="token punctuation">,</span>
      rooms<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rooms<span class="token punctuation">,</span>
      hasGarage<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hasGarage<span class="token punctuation">,</span>
      hasSwimPool<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hasSwimPool<span class="token punctuation">,</span>
      hasStatue<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hasStatue
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>從 House 的 class 能看到內容就是各種可以調整的 member，以及為了 console 出 member 所使用的 method。</p>
<h3 id="實作：IHouseBuilder"><a href="#實作：IHouseBuilder" class="headerlink" title="實作：IHouseBuilder"></a>實作：IHouseBuilder</h3><p>再來輪到了 <code>IHouseBuilder</code>，這個 interface 的用途是用來定義 <code>HouseBuilder</code> 需要實作什麼 method 的。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// builder 的 interface</span>
<span class="token keyword">interface</span> <span class="token class-name">IHouseBuilder</span> <span class="token punctuation">&#123;</span>
  <span class="token function">reset</span><span class="token punctuation">(</span>windows<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> walls<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token function">buildDoors</span><span class="token punctuation">(</span>doors<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> IHouseBuilder
  <span class="token function">buildRooms</span><span class="token punctuation">(</span>rooms<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> IHouseBuilder
  <span class="token function">buildGarage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> IHouseBuilder
  <span class="token function">buildSwimPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> IHouseBuilder
  <span class="token function">buildStatue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> IHouseBuilder
  <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> House
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到這邊定義了 <code>reset</code>，目的是建造完產品後可以歸零，以便進行下一次的生產；<code>buildDoors</code>、<code>buildRooms</code> 等等的 method，則是我們要客製化需要使用的 method，讓我們能夠調整 House 的細節；<code>getResult</code> 則是調整完各種東西後，呼叫它能夠讓我們得到客製化後的 <code>House</code>。</p>
<h3 id="實作：HouseBuilder"><a href="#實作：HouseBuilder" class="headerlink" title="實作：HouseBuilder"></a>實作：HouseBuilder</h3><p>接著來到我們的主角，<code>House Builder</code></p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">
<span class="token comment">// house builder</span>
<span class="token keyword">class</span> <span class="token class-name">HouseBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">IHouseBuilder</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> house<span class="token operator">:</span> House<span class="token punctuation">;</span>
  
  <span class="token keyword">constructor</span><span class="token punctuation">(</span>windows<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> walls<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>house <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">House</span><span class="token punctuation">(</span>windows<span class="token punctuation">,</span> walls<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* 重置 this.house，以便下一次的 build */</span>
  <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>house <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">House</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/**
   * 客製化 product 用的 method 們
   * 另外，return this 的原因是方便可以用 chain 的方式來呼叫 method，
   * 這個方式叫做 Fluent interface（流暢介面）
   */</span> 
  <span class="token function">buildDoors</span><span class="token punctuation">(</span>doors<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>house<span class="token punctuation">.</span>doors <span class="token operator">=</span> doors
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">buildRooms</span><span class="token punctuation">(</span>rooms<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>house<span class="token punctuation">.</span>rooms <span class="token operator">=</span> rooms
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">buildGarage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>house<span class="token punctuation">.</span>hasGarage <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">buildSwimPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>house<span class="token punctuation">.</span>hasSwimPool <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">buildStatue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>house<span class="token punctuation">.</span>hasStatue <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">/**
   * getResult 會 return 客製化完成的 product，並且 reset，
   * 以便下一次客製化 product。
  */</span>
  <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>house
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>HosueBuilder</code> 有幾個重點可以注意：</p>
<ol>
<li><code>reset</code>：每次客製化完，並執行 <code>getResult</code> 後，通常都會執行 <code>reset</code>，得到初始的 <code>House</code>，以便進行下一次的客製化生產。</li>
<li><code>buildDoors</code>、<code>buildStatue</code> 等 method：客製化用的 method，這邊為了示範有簡化，實際應用會更複雜，值得注意的是一般來說在每個客製化 method 都會 <code>return this</code>，目的是為了可以用 chain 的方式來調用 method。（待會看範例就會懂在說什麼了）</li>
<li><code>getResult</code>：客製化完取得產品用的 method，通常會在這個地方做 reset，因為得到結果後通常就又會再進行下一次客製化，不過這只是通常，實際 reset 的時機可以看應用的情景。</li>
</ol>
<h3 id="實作：Director"><a href="#實作：Director" class="headerlink" title="實作：Director"></a>實作：Director</h3><p>再來輪到 <code>Director</code></p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Director</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> builder<span class="token operator">:</span> IHouseBuilder

  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HouseBuilder</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">public</span> <span class="token function">setBuilder</span><span class="token punctuation">(</span>builder<span class="token operator">:</span> HouseBuilder<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>builder <span class="token operator">=</span> builder
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">public</span> <span class="token function">buildCastle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">buildRooms</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">buildDoors</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">buildStatue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">buildGarage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">buildApartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">buildDoors</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">buildRooms</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到這邊 <code>Director</code> 的用處就是命令 <code>Builder</code> 來執行一連串的客製化 method，把常用的產品步驟集合成一個 method，快速建立出常用產品。</p>
<h3 id="實作：實際使用"><a href="#實作：實際使用" class="headerlink" title="實作：實際使用"></a>實作：實際使用</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// new 出 Director </span>
<span class="token keyword">let</span> director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// new 出 HouseBuilder</span>
<span class="token keyword">let</span> houseBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HouseBuilder</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>

<span class="token comment">// 建造 houseA</span>
<span class="token keyword">const</span> houseA <span class="token operator">=</span> houseBuilder<span class="token punctuation">.</span><span class="token function">buildDoors</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">buildGarage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">buildRooms</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 建造 hosueB</span>
<span class="token keyword">const</span> houseB <span class="token operator">=</span> houseBuilder<span class="token punctuation">.</span><span class="token function">buildDoors</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">buildGarage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">buildSwimPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">buildRooms</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 客製化的 houseA，結果：</span>
<span class="token comment">// &#123;</span>
<span class="token comment">//   window: 2,</span>
<span class="token comment">//   walls: 4,</span>
<span class="token comment">//   doors: 2,</span>
<span class="token comment">//   rooms: 2,</span>
<span class="token comment">//   hasGarage: true,</span>
<span class="token comment">//   hasSwimPool: false,</span>
<span class="token comment">//   hasStatue: false</span>
<span class="token comment">// &#125;</span>
houseA<span class="token punctuation">.</span><span class="token function">listParts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 建造客製化的 houseB，結果：</span>
<span class="token comment">// &#123;</span>
<span class="token comment">//   window: 2,</span>
<span class="token comment">//   walls: 4,</span>
<span class="token comment">//   doors: 100,</span>
<span class="token comment">//   rooms: 2,</span>
<span class="token comment">//   hasGarage: true,</span>
<span class="token comment">//   hasSwimPool: true,</span>
<span class="token comment">//   hasStatue: false</span>
<span class="token comment">// &#125;</span>
houseB<span class="token punctuation">.</span><span class="token function">listParts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 使用 director，先設定 builder 為 HouseBuilder</span>
director<span class="token punctuation">.</span><span class="token function">setBuilder</span><span class="token punctuation">(</span>houseBuilder<span class="token punctuation">)</span>

<span class="token comment">// 接著 director 命令 builder 執行一連串客製化 method</span>
director<span class="token punctuation">.</span><span class="token function">buildCastle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 使用 houseBuilder 得到結果</span>
<span class="token keyword">const</span> houseC <span class="token operator">=</span> houseBuilder<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 建造客製化的 houseC，結果：</span>
<span class="token comment">// &#123;</span>
<span class="token comment">//   window: 2,</span>
<span class="token comment">//   walls: 4,</span>
<span class="token comment">//   doors: 1000,</span>
<span class="token comment">//   rooms: 200,</span>
<span class="token comment">//   hasGarage: true,</span>
<span class="token comment">//   hasSwimPool: false,</span>
<span class="token comment">//   hasStatue: true</span>
<span class="token comment">// &#125;</span>
houseC<span class="token punctuation">.</span><span class="token function">listParts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>實作上大概是這樣，但這邊想提一次剛剛實作 <code>HouseBuilder</code> 時提到每個客製化 method <code>return this</code> 的事情。</p>
<p>jQuery 用 chain 的方式來調用 function 的用法大家應該都有印象，比如可以像是這樣：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span> <span class="token string">"button.continue"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span> <span class="token string">"Next Step..."</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以這樣使用的原因，是因為每次 jQuery 內建的方法執行完之後，都會再回傳一次 jQuery 的 element，你就可以再次使用它內建的方法了。</p>
<p>而 <code>HouseBuilder</code> 會 <code>return this</code> 的原因也是一樣，當我們在客製化 method 裡面 <code>return this</code> 的時候：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">buildGarage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>house<span class="token punctuation">.</span>hasGarage <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>我們 return 的是 <code>HouseBuilder</code> 本身，而 return <code>HouseBuilder</code> 能做什麼呢？我們就能夠繼續 chain 下去，呼叫 <code>buildeRooms</code>、<code>buildeDoors</code> 等 method 了！</p>
<p>所以實際使用就會變成像剛剛實作那樣：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> houseA <span class="token operator">=</span> houseBuilder
      <span class="token punctuation">.</span><span class="token function">buildDoors</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 執行完 return houseBuilder</span>
      <span class="token punctuation">.</span><span class="token function">buildGarage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 執行完 return houseBuilder</span>
      <span class="token punctuation">.</span><span class="token function">buildRooms</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 執行完 return houseBuilder</span>
      <span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 得到結果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="應用時機"><a href="#應用時機" class="headerlink" title="應用時機"></a>應用時機</h2><p>可以發現到和工廠模式不同，工廠模式著重在生產的每個產品，而 Builder 則是注重在每個產品的客製化內容，也因此當你有需要很多的客製化細節需要調整時，就可以考慮 Builder 這個 Pattern，而根據我看到的文章所說，當你發現一個 class 的 contructor 有超過四個參數時，就是使用 Builder 的時機了！</p>
<p>Builder 的優點顯而易見，就是我們可以更細部的調整每一個 new 出來的 instance，並且 <code>getResult</code> 的時機也可以適時的調整；而 Builder 缺點是什麼呢？是每個 product 的同質性要夠高，像是 <code>IHouseBuilder</code> 定義的方法就很侷限，幾乎和房子有關的 class 才能夠 implement，差異比較大的 class 就需要另闢蹊徑，重新寫不一樣的 builder。</p>
<h2 id="現實的應用"><a href="#現實的應用" class="headerlink" title="現實的應用"></a>現實的應用</h2><p>可以參考看看 Android 的 <a href="https://developer.android.com/reference/android/app/Notification.Builder">Notification.Builder</a></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這次當 builder pattern 的主講感想是自己對 OOP 真的還很不熟，實作、概念上都是，以目前的文章而言，實作也僅止於書上紙上談兵的程度，沒有實際應用在專案的經驗，當想要講解這個 pattern 的概念給其他人的時候，會有點不太知道該用什麼樣實際的應用來讓自己以及別人知道實戰上如何使用 QQ  但能夠先知道這個 pattern 也是好的，未來看到相關應用的時候就能夠較快的理解程式碼。</p>
<h2 id="Refercences"><a href="#Refercences" class="headerlink" title="Refercences"></a>Refercences</h2><p><a href="https://zhuanlan.zhihu.com/p/126305311">TypeScript 设计模式与重构技巧 · 建造者模式</a></p>
<p><a href="https://juejin.cn/post/6844904133519114253">设计模式——建造者模式（TypeScript版）</a></p>
<p><a href="https://medium.com/wenchin-rolls-around/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F-builder-design-pattern-7c8eac7c9a7">設計模式—建造者模式 (Builder Design Pattern)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/58093669">秒懂设计模式之建造者模式（Builder pattern）</a></p>
<p><a href="https://blog.techbridge.cc/2017/05/22/factory-method-and-abstract-factory/">設計模式 - 工廠方法及抽象工廠</a></p>
]]></content>
      <categories>
        <category>技術</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 p5.js and ml5.js 打造 Google Meets 的濾鏡</title>
    <url>/2021/12/02/build-Google-Meets-filter-with-p5-and-ml5/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近偶然在 TheCodingTrain 上看到 ml5 和 p5 的教學影片，就看著教學用 ml5 + p5 玩出有趣的效果了！</p>
<p>廢話不多說直接上圖：</p>
<img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gv13m1tjc4g60zk0qmnph02.gif" alt="螢幕錄製 2021-10-02 下午5" style="zoom: 33%;" />

<p>玩出上面圖片的效果以後，發現居然還可以搭配 OBS 放到 Google Meets 上面玩，讓會議上其他人看看這副模樣，所以現在就稍微來介紹一下這兩個小玩具。</p>
<p>另外，這篇文的靈感來源、實作很大部份都是參考 <a href="https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw">The Coding Train</a> youtube 頻道裡的影片，大力推薦，這是個可以讓人找到寫程式快樂之處的頻道！</p>
<span id="more"></span>

<h2 id="實作流程"><a href="#實作流程" class="headerlink" title="實作流程"></a>實作流程</h2><p>首先看今天實作的流程：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gwqoexk239j30ul08dt94.jpg" alt="Screen Shot 2021-11-24 at 11.51.08 PM"></p>
<p>流程很單純，單純是我硬要畫圖，我們會開啟鏡頭取得畫面，接著把畫面當作 input 丟給 ml5，讓 ml5 去 classify，接著 ml5 就會回傳它辨識後的 data，我們接著就可以用這些資料搭配 p5，在畫面上做一些有趣的特效！ </p>
<h2 id="p5-js-介紹"><a href="#p5-js-介紹" class="headerlink" title="p5.js 介紹"></a>p5.js 介紹</h2><p><a href="https://processing.org/">Processing</a> 是一個廣受歡迎用來做 creative coding 的語言，後來有了各語言的版本，而 p5.js 就是 Processing 的 JavaScript 版本，標榜簡單易用，讓非工程師相關的職業如教育者、設計師、藝術家也能輕鬆上手打造自己想要的作品。</p>
<p>要了解 p5 如何使用不難，我們可以從 p5 官方文件的 <a href="https://p5js.org/get-started/">Get Started</a> 開始著手，首先我們可以到 <a href="https://editor.p5js.org/">p5 web editor</a> 實際的操作，會先看到以下的 code：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">createCanvas</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">background</span><span class="token punctuation">(</span><span class="token number">220</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>p5.js 的專案由 setup() 與 draw() 這兩個主要的函式所組成，setup() 會負責程式的初始化，只會執行一次；draw 則是以每秒 60 次的方式做執行，會不斷地持續更新畫面。從 <code>createCanvas(400, 400)</code> 這個 function 不難看出用意是創建出一個 canvas 的畫布，這個畫布就是我們待會要揮灑創意的地方啦～</p>
<p>接著我們把 code 改成：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">createCanvas</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">background</span><span class="token punctuation">(</span><span class="token number">220</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ellipse</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>你看到的畫面應該會長得像這樣，恭喜成功畫出一個圈圈！</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gwqorel98mj30mh0j7t9w.jpg" alt="first-sketch"></p>
<p>試著把 <code>ellipse(50, 50, 80, 80)</code> 改成 <code>ellipse(150, 100, 80, 80)</code>，會發現圈圈往下移動了：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gwqoxj4kdqj31mi0u0414.jpg" alt="Screen Shot 2021-11-25 at 12.07.09 AM"></p>
<p>聰明的你應該發現第一跟第二個參數分別代表了 ellipse 的方位，第二跟第三則是代表了 ellipse 的 width 和 height，在 p5 的世界中，X 軸就和我們認知的方向一樣，X 軸給了 50 就會往右 50px；Y 軸則是和我們一般數學上認知的相反，給 Y 軸 100 就會往下 100px。</p>
<p>接下來我們來了解一些 p5 內建的全域變數以及圖層的概念，假設我們有今天這段 code：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">createCanvas</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">ellipse</span><span class="token punctuation">(</span>mouseX<span class="token punctuation">,</span> mouseY<span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gx0r1y58crg30go097ta9.gif" alt="p5 - example"></p>
<p>會發現隨著滑鼠移動，圈圈跟著滑鼠的位置移動，而且圈圈竟然會一直疊加上去！有兩個值得注意的地方：</p>
<ol>
<li>每次 <code>draw</code> 執行的時候，可以想成是疊一層新的畫布上去，因此如果我們在 draw 最前面加上了 <code>background(255)</code>，那等同每次執行的時候都會疊上一層白色的背景，所以我們這時候移動滑鼠就只會有一個圈圈跟著滑鼠，但如果移掉 background 後，每次 draw 執行都不會疊上新的背景，也因此會看到圈圈不會消失，而是一直疊加上去。</li>
<li>p5 提供了一些內建的全域變數以及 function 使用，以上面程式碼來說，<code>mouseX</code> 和 <code>mouseY</code> 是鼠標的 X 和 Y 軸的位置，透過這個全域變數就能夠讓 ellipse 跟著你跑啦！所以如果我們提供目前鏡頭某個部位的所在方位，那就可以讓 p5 畫出來的圖案跟著鏡頭上的部位移動了。</li>
</ol>
<p>p5 的介紹大概先這樣，這些基本的介紹就足夠待會要做的事情了。</p>
<p> 想要更了解 p5.js 如何玩的話，有個很不錯的網站 <a href="https://openhome.cc/Gossip/P5JS/index.html">非關語言：玩轉 p5.js</a>，還有前言提到的 The Coding Train 也很頻繁的會釋出關於 p5.js 的 coding challenge；當然，還有<a href="https://openprocessing.org/user/139364/?view=sketches#sketches">吳哲宇的 Open Processing</a> 可以看到何謂厲害的 creative coding 創作。</p>
<h2 id="ml5-js-介紹"><a href="#ml5-js-介紹" class="headerlink" title="ml5.js 介紹"></a>ml5.js 介紹</h2><p>ml5.js 是一個基於 tensorflow.js 之上開發的 library，在官網的介紹中：</p>
<blockquote>
<p>ml5.js is being developed to make machine learning more accessible to a wider audience.</p>
</blockquote>
<p>可以知道 ml5 跟 p5 一樣是以好上手為前提來開發的一個 library，不像使用 tensorflow.js 需要機器學習的前置知識，使用 ml5 只要看個文件，傳入想要使用的 pre-trained model，很快就能夠快樂的在瀏覽器使用 ml5。</p>
<p>印象中 p5 有部分的開發者同時也是 ml5 的開發者，所以搜尋 ml5 相關應用的時候，很常會看到跟 p5 結合一起使用，而因為兩個 library 結合起來也真的蠻順手的，打造一些小玩具非常方便，所以能夠搜尋到不少有趣的作品。</p>
<h3 id="PoseNet"><a href="#PoseNet" class="headerlink" title="PoseNet"></a>PoseNet</h3><p>此段落內容皆出自於 <a href="https://learn.ml5js.org/#/reference/posenet?id=posenet">PoseNet</a> 和 <a href="https://www.youtube.com/watch?v=OIo-DIOkNVg">ml5.js Pose Estimation with PoseNet</a>，如果喜歡看影片的人歡迎進去觀看，然後就可以跳過這一 part。</p>
<p>我們待會只會用到 html + js，然後為了開發方便起見，建議安裝 VSCode 的 <a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer">Live Server</a> extension，開發時就直接啟動 server 就好囉。</p>
<p>首先是環境的設置，簡單起見我們就直接開一個 html 檔，然後引入 ml5 和 p5 的 CDN，以及引入我們待會要寫的 <code>pose-net.js</code> 檔：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Getting Started with ml5.js<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- p5 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.2.0/p5.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- ml5 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/ml5@latest/dist/ml5.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./sketches/pose-net.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著就可以開始實作了，首先我們要讀取 PoseNet 這個 pre-train model：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 全域變數</span>
<span class="token keyword">let</span> video
<span class="token keyword">let</span> poseNet
<span class="token keyword">let</span> pose

<span class="token keyword">function</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">createCanvas</span><span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">520</span><span class="token punctuation">)</span>
  <span class="token comment">// Create the video</span>
  video <span class="token operator">=</span> <span class="token function">createCapture</span><span class="token punctuation">(</span><span class="token constant">VIDEO</span><span class="token punctuation">)</span>
  video<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  poseNet <span class="token operator">=</span> ml5<span class="token punctuation">.</span><span class="token function">poseNet</span><span class="token punctuation">(</span>video<span class="token punctuation">,</span> modelLoaded<span class="token punctuation">)</span>
  poseNet<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'pose'</span><span class="token punctuation">,</span> getPoses<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">modelLoaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'poseNet loaded'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">getPoses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>createCapture</code> 是 p5 提供的 method，可以幫我們創造 <code>&lt;video&gt;</code> 的 element  並且會取得我們 webcam 的內容，然後 video element 預設會和 canvas 分開並被顯示，也就是說如果單純使用 <code>createCapture</code> 並且 render 出來的時候，你會發現會有個 video element 在 canvas 的外面，看起來就怪怪的，所以會搭配 <a href="https://p5js.org/reference/#/p5.Element/hide">hide()</a> 來去隱藏這個 canvas 之外的 element。</p>
<p>這時候你可能會想，不對吧，那我怎麼看到自己目前的 webcam 畫面長怎樣，所以我們會在 <code>draw</code> 裡面顯示鏡頭的畫面：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">background</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

  <span class="token comment">// Draw the video</span>
  <span class="token function">image</span><span class="token punctuation">(</span>video<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這時候就可以正常的在瀏覽器看到鏡頭畫面了。</p>
<p>回到剛剛的程式碼，執行 <code>ml5.poseNet(video, modelLoaded)</code> 代表我們要把目前捕捉到的畫面丟給 PoseNet 進行辨識，等 model 完成之後就會觸發 <code>modelLoaded</code> 這個 callback。</p>
<p><code>poseNet.on(&#39;pose&#39;, getPoses)</code> 則是我們的重點，概念類似於 <code>addEventListener</code> 那樣，PoseNet 會監聽你目前畫面上的姿勢，當它發現你姿勢有變化的時候，就會觸發 <code>getPoses</code> 這個 callback，<code>getPoses</code> 預計會接收一個參數，這參數就是 PoseNet 辨識完之後回傳的 data。</p>
<p>接著，我們就要來看看 <code>getPoses</code> 得到什麼資料，首先我們在 <code>getPoses</code> 印出它究竟收到什麼資料吧：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getPoses</span><span class="token punctuation">(</span><span class="token parameter">poses</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>poses<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>這時候你應該會發現，哇靠，怎麼 console 瘋狂跑出資料，這就代表 PoseNet 已經在進行辨識了！資料大概會長得像這樣：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gx0n0jvffcj30j90l0q8l.jpg" alt="Screen Shot 2021-12-03 at 2.38.37 PM"></p>
<p>會是 array 的原因是因為 PoseNet 可以辨識畫面上的多個人，而目前只有我自己被辨識到，所以 array 裡就只會有一筆資料，而 pose 裡面的資料 key 就對應到各部位的名稱，value 則是對應到部位的位置，如 <code>leftEar: &#123; x: 443, y: 244, cofidence: 0.94 &#125;</code> 就是指左耳的位置，以及它的 confidence（不知道中文怎麼翻，信心程度之類的嗎？）</p>
<p>有了 data 以後，我們要做的事情就很簡單了，只要取得部位的資料，把它畫出來就好了，舉個例子來說，假設我今天想在鼻子上畫個紅色的圈圈，首先我們要賦予 <code>pose</code> 值，這個值就是剛剛 callback 所接收到的 <code>poses</code> ：</p>
<pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">// 變數
let video
let poseNet
let pose

// 創造 video element、load PoseNet
function setup() &#123;
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> createCanvas(640, 520)
</span><span class="token prefix unchanged"> </span><span class="token line"> video = createCapture(VIDEO)
</span><span class="token prefix unchanged"> </span><span class="token line"> video.hide()
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> poseNet = ml5.poseNet(video, modelLoaded)
</span><span class="token prefix unchanged"> </span><span class="token line"> poseNet.on('pose', getPoses)
</span></span>&#125;

function getPoses(poses) &#123;
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> console.log(poses)
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> if (poses.length) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">   pose = poses[0].pose
</span><span class="token prefix inserted">+</span><span class="token line"> &#125;
</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著就可以用 <code>pose</code> 來畫出鼻子，概念很簡單，我們把 <code>pose.nose</code> 當中的方位傳給 <code>ellipse</code> 以後，圓圈就能夠跟著目前 PoseNet 辨識到的鼻子位置移動了！<code>fill</code> 則是用於填入 <code>ellipse</code> 色彩用的：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">background</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

  <span class="token comment">// Draw the video</span>
  <span class="token function">image</span><span class="token punctuation">(</span>video<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	
  <span class="token comment">// 畫出鼻子</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pose<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">ellipse</span><span class="token punctuation">(</span>pose<span class="token punctuation">.</span>nose<span class="token punctuation">.</span>x<span class="token punctuation">,</span> pose<span class="token punctuation">.</span>nose<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這時候打開 Live Server，應該就能看到紅鼻子出現在你臉上！</p>
<img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gx0oqr4bkfg30zo0t4npf.gif" alt="螢幕錄製 2021-10-02 下午5" style="zoom: 33%;" />

<p>是不是很簡單！我個人認為 p5 和 ml5 搭配起來很簡單的原因在於 ml5 的資料有時會吐一些方位的資訊（x, y），而 p5 很多繪製於畫面上的 API 都需要傳入方位，所以兩者搭配起來的時候只要簡單的把 ml5 的資料傳入 p5 API 就好，完全不費力氣。</p>
<h2 id="搭配-OBS-在-Google-Meets-耍腦！"><a href="#搭配-OBS-在-Google-Meets-耍腦！" class="headerlink" title="搭配 OBS 在 Google Meets 耍腦！"></a>搭配 OBS 在 Google Meets 耍腦！</h2><p>知道怎麼在瀏覽器配合 ml5 + p5 在畫面上畫出自己想要的東西以後，就可以來試試看怎麼在 google mmets 輸出這個影像了！首先讓我們看看可愛的概念圖：</p>
<img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gx0pd4j9hzj314l0u0gnj.jpg" alt="Screen Shot 2021-12-03 at 3.54.09 PM" style="zoom:50%;" />

<p>我們剛剛做的事情都是在 Browser 上面執行的，但怎麼放到 Google Meets 上讓其他人看到呢？這時候就需要搭配 <a href="https://obsproject.com/">OBS</a> 這個 Open Source 的應用程式，它可以幫我們擷取想要影像輸出的地方，再搭配 Virtual Cam 就能夠順利輸出瀏覽器的畫面，接著在 Google Meets 的設定區選擇射影像的攝影機為 OBS Virtual Cam，就可以達到我們要的目的了。</p>
<p>用說的似乎太抽象，直接來進行操作，首先打開 OBS，並且新增 Window Capture 的 Screen：</p>
<img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gx0pi0awyfj31gu0u0gom.jpg" alt="Screen Shot 2021-12-03 at 4.05.42 PM" style="zoom:50%;" />

<p>新增之後，在 Window 的部分選擇你要輸出的瀏覽器分頁，總之他會跑出你目前 Chrome 分頁的標題：</p>
<img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gx0pny9xwzj31fw0u0770.jpg" alt="Screen Shot 2021-12-03 at 4.10.21 PM" style="zoom:50%;" />

<blockquote>
<p>By the way，我實作時一直找不到自己想要選擇的瀏覽器分頁，如果是這種狀況，那可能是因為 OBS 需要跟瀏覽器在同一個視窗裡，也就是說你要輸出的那個分頁不能是全螢幕，必須兩個都是小螢幕，然後放在同一個視窗（比如都放在桌面）</p>
<p>我知道這很瞎，但我目前還找不到其他解法。</p>
</blockquote>
<p>選擇完之後，應該就會看到 OBS 目前預覽的畫面跑出你瀏覽器的畫面了，如果你這時有開啟剛剛開發的那個分頁，應該會看到你攝影機的畫面惹：</p>
<img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gx0psg6ewvj31hj0u0tcd.jpg" alt="Screen Shot 2021-12-03 at 4.15.41 PM" style="zoom:50%;" />

<p>如果擷取的畫面不滿意，可以用 option + shift 調整寬高，或是去 js 檔那裡調整 canvas、video 的大小。然後有注意到 OBS 右下角有個 Start Virtual Camera 嗎？大力按下去就對了，這時候就會啟動我們的 Virtual Cam。</p>
<p>接著到 Google Meets，去設定那裡選擇 Virutal Cam：</p>
<img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gx0puoz0srj31160u0jt2.jpg" alt="Screen Shot 2021-12-03 at 4.00.39 PM" style="zoom:50%;" />

<p>這時候應該就可以順利輸出影像到 Google Meets 了，嗚呼！</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gx0r055o8ug30go093tvr.gif" alt="ezgif.com-gif-maker (2)"></p>
<p>抱歉，沒朋友只能開一人會議，嗚嗚。</p>
<p>所以如果再處理一下 p5 畫出來的圖，就能夠繪製出像文章開頭的畫面囉！</p>
<img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gv13m1tjc4g60zk0qmnph02.gif" alt="螢幕錄製 2021-10-02 下午5" style="zoom: 33%;" />

<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這次亂玩的結果收穫比我想的還多，首先 p5、ml5 這些都是我先前未接觸過的東西，每次看到 Creative Coding、機器學習都想說應該跟我無關吧，那不是藝術家跟神人們在玩的東西嗎（？）但這次才發現世界上已經有人默默創造出簡單好用的 library 讓平民如我可以一探究竟了。</p>
<p>當初為了理解圖像辨識的原理，還去看了 CNN 模型的運作方式，如果有興趣的話可以看 <a href="https://brohrer.github.io/how_convolutional_neural_networks_work.html">How do Convolutional Neural Networks work?</a>，講得非常淺顯易懂。所以本來還想說要不要在文章放入機器學習相關的內容，但機器學習不是我的專業，感覺會錯誤連篇漏洞百出，索性就移除了，改成只講一些沒營養但是好玩的事物。</p>
<p>雖然目前工作上用不到這些東西，但我認為跨出自身工作的領域，去探索其他人的世界在玩些什麼也是很棒，不用把自己侷限於工作的領域。前陣子時常會覺得哎呀好像暫時沒有什麼覺得有趣的東西想學習時，偶然看到 p5 + ml5 的應用時，頓時又燃起了喜歡用 Coding 探索、創造有趣事物的熱忱 😎</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://p5js.org/">p5.js</a></li>
<li><a href="https://ml5js.org/">ml5.js</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLRqwX-V7Uu6YPSwT06y_AEYTqIwbeam3y">Beginners Guide to Machine Learning in JavaScript</a></li>
<li><a href="https://www.youtube.com/watch?v=9z9mbiOZqSs&t=1140s">Coding Challenge #157: Zoom Annotations with Machine Learning + p5.js</a></li>
<li><a href="https://blog.greenroots.info/princess-finder-using-react-ml5js-and-teachable-machine-learning">Princess Finder using React, ml5.js, and Teachable Machine Learning</a></li>
<li><a href="https://www.youtube.com/watch?v=OIo-DIOkNVg">ml5.js Pose Estimation with PoseNet</a></li>
<li><a href="https://www.youtube.com/watch?v=EA3-k9mnLHs">Hour of Code with p5.js and PoseNet</a></li>
<li><a href="https://brohrer.github.io/how_convolutional_neural_networks_work.html">How do Convolutional Neural Networks work?</a></li>
<li><a href="https://editor.p5js.org/brunoruchiga/sketches/ByrqL6UJE">Coding Train Clown Nose copy</a></li>
</ul>
]]></content>
      <categories>
        <category>技術</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>p5.js</tag>
        <tag>ml5.js</tag>
      </tags>
  </entry>
  <entry>
    <title>冥想正念指南 day01 - 如何開始</title>
    <url>/2021/01/06/headspace-guide-to-meditation-day01/</url>
    <content><![CDATA[<p>起源於看到 Netflix 上看到 <a href="https://www.netflix.com/browse?jbv=81280926">冥想正念指南</a> 這個系列，目前總共有八集，過去有陸陸續續嘗試冥想，但都不得其解，或是做做就忘了，最近打算來把這八集看完，寫下看完每集之後的感受，不一定是同一天看完，但總之會記錄一下內容，以及看完當天集數後冥想的感受。</p>
<span id="more"></span>

<h4 id="冥想的好處"><a href="#冥想的好處" class="headerlink" title="冥想的好處"></a>冥想的好處</h4><p>其實我沒有很在乎這部分，當作隨便聽聽，大意上是說 Andy（這系列的旁白、HeadSpace 創辦人）遭受情緒困擾後去了喜馬拉雅山當僧侶，從各個寺院的大師身上學習到了冥想的精髓，並打算將之推廣。</p>
<p>有說到冥想在科學研究上證實有益於大腦發展，鍛煉大腦肌肉、增加大腦愉悅度等等。</p>
<h4 id="車流"><a href="#車流" class="headerlink" title="車流"></a>車流</h4><p>Andy 提到大師認為看待冥想的思緒，可以把它當作你正坐在一個馬路邊，觀看車子的流動一般；思緒就像是車子，不要試圖去攔下車子，既危險又衝動，而是要不斷的提醒自己，你是一個觀看思緒流動的人。</p>
<p>任由思緒在那漂流，你只需要觀看他們流動。</p>
<h4 id="專注力錨點"><a href="#專注力錨點" class="headerlink" title="專注力錨點"></a>專注力錨點</h4><p>我忘記這集用的詞是什麼了，總之取一個我最有印象的詞。</p>
<p>當你發現自己會不斷分心，讓思緒打亂你的冥想時，可以試著找到你的<strong>專注力錨點</strong>，錨點可以是任何東西，一個動作、一個外在事物、一個聲音都可以，但最常見的錨點是「<strong>呼吸</strong>」，當你發現思緒混亂、胡思亂想時，就把專注力放在吸氣、吐氣上面，把呼吸當作一個集中專注力的錨點，自然而然可以把專注力重新找回來。</p>
<h2 id="本集感想"><a href="#本集感想" class="headerlink" title="本集感想"></a>本集感想</h2><p>美術很讚！因為我蠻容易看影集、動畫看到沒耐心的，但這集完全不會，畫面屬於會讓人想一直看下去的那種，另外講到車流的時候，改成用第一人稱的視角覺得很酷。</p>
<p>另外，講到的概念我覺得都挺實用的，講到冥想的時候常常會覺得沒有概念、不知道如何實作，又或者是聽到的概念都蠻模糊的，但這個不會，有很多概念被提及後會覺得「哦！原來是這樣」，比如專注力錨點的概念在今天冥想就蠻有幫助的。</p>
<h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><p>之前做冥想都蠻無感的，但今天這集的感受很不錯欸，也許是有經過前面的引導吧，覺得專注力錨點和車流的概念有幫助到我，當腦袋稍微亂的時候，就把所有注意力放在吸氣吐氣上面，就什麼都沒有想了。</p>
<p>比較干擾的是有時候還要注意聽他在講什麼，比如感受身體、數呼吸次數之類的有點讓人分心。</p>
<p>不過整體而言覺得挺讚的，心靈變得蠻平靜的，然後心情莫名的很好，當中有特別注意到的是，Andy 說要把「<strong>覺察感受</strong>」這件事情帶到日常中，這句話看了挺有感覺的，目前感覺是冥想這件事能夠把無論是心靈或肉體的感受變得更透徹，仔細一想日常生活中很多感受都被當成理所當然的資訊，比如喝水的感覺、衣物的摩擦、情緒的波動、接收到的聲音、與人擁抱的感覺，很容易就會被忽略掉，當自身刻意去感受日常的時候，會得到蠻多不一樣的感受，而我大部分得到的是一種生活的幸福感。</p>
<p>話說「<strong>覺察感受</strong>」這件事情在看完《靈魂急轉彎》的時候我也有同樣的感覺欸，這部片很大一部分是在講當你用心體驗生活時，內心的 spark 自然會被點燃，spark 指的不是你人生的志向或絕對要做的事情，而是真心體驗、享受生活的那一刻。</p>
<p>今天的冥想大概就是這樣。</p>
]]></content>
      <categories>
        <category>雜記</category>
      </categories>
      <tags>
        <tag>廢文日記</tag>
        <tag>meditation</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次貢獻開源就緊張到手抖</title>
    <url>/2020/12/06/first-contribution/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在此紀錄人生第一次貢獻開源專案的背景和 debug 過程，好啦我也不確定算不算開源，因為是「程式導師實驗計畫」裡面使用到的「學習系統」，使用者就是課程裡的老師、助教和學生，維護者主要是老師 Huli 和助教 minw。雖然這次的貢獻蠻微小的，但因為還是挺興奮的，不記錄一下說不過去吧！！</p>
<p>（此次 <a href="https://github.com/Lidemy/lidemy-learning-frontend/pull/37">PR</a> 時間為 2020/9/27）</p>
<span id="more"></span>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>發這次 PR 起源於課程在 9 月台南的小聚會時，其中一位同學說最近使用學習系統時有個很惱人的 bug，我們的學習系統的心得頁是一堆學生的心得卡片，上面會顯示每個同學關於學習的過程，或一些日常生活（By the way，比起學習，我更愛看日常生活的紀錄），預設是每次顯示 20 筆，要看更多的話就要滑到網頁底部，按下「載入更多」的按鈕，載入更之前的 20 筆心得。</p>
<p>行為大概會像是下面這張圖：</p>
<p><img data-src="https://camo.githubusercontent.com/b806c0059ac7db9b25af29b9e02ae41ffd2040c3ed1eceeea900a0adeba75c75/68747470733a2f2f692e696d6775722e636f6d2f76306d583357762e676966" alt="loadmore"></p>
<p>而擾人問題的情形，也顯示在上面這張圖。</p>
<p>通常點 load more 的按鈕後，比較好的使用者體驗是你瀏覽器的 scroll bar 不會移動，維持在剛剛的高度，而只要往下滑就可以看到剛剛點 load more 得到的 20 筆資料。</p>
<p>但從上面那張圖可以看到他不是這樣，你不管怎麼點 load more 按鈕，瀏覽器的 scroll bar 都會在最底部，導致你每載入一次心得又要往上滑，才能找到剛剛看到哪裡，如果每次想看更多心得都要重複這行為，真的是會覺得這網頁頗機歪。</p>
<p>幸好同學頗熱心的在學習系統的前端 repo 發了 <a href="https://github.com/Lidemy/lidemy-learning-frontend/issues/36">issue</a>，內容還很完整，作業系統、瀏覽器等等都幫忙先測了一遍，讓我少了蠻多定位問題的功夫，同學讚啦。</p>
<h2 id="查找過程"><a href="#查找過程" class="headerlink" title="查找過程"></a>查找過程</h2><p>接著就是開始思考問題出在哪的過程了，因為問題的資訊提供蠻足夠的關係，過程挺順利的。</p>
<p>同學的 issue 提到：</p>
<blockquote>
<p>用 chrome 看進度報告，點擊「載入更多」載入後會直接跳到頁面底部。<br>不過使用電腦的 safari 還有手機的 chrome 與 safari 都沒有這個問題，載入後頁面仍然停留在剛剛看到的最後一篇心得。<br>有嘗試重新設定 chrome 不過沒有用。</p>
</blockquote>
<p>初步定位問題是出在每個瀏覽器的行為不一致，而過去使用學習系統時沒有這個問題，猜測是 Chrome 在某個版本改了 scroll bar 的行為。</p>
<p>所以一開始的關鍵是「Chrome load more button problem」，超級直白，結果好死不死還真的找到這篇 <a href="https://support.google.com/chrome/thread/62861011?hl=en">Load More Button Click Issue </a>，裡面有位 <a href="https://support.google.com/chrome/profile/63312008?hl=en">Hassan Tahir</a> 大大提到：</p>
<blockquote>
<p>Managed to find a hotfix for now: add <code>overflow-anchor: &quot;none&quot;,</code> to the CSS properties of the button, or even the parent. See <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-anchor">https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-anchor</a></p>
</blockquote>
<p>看了 MDN 的敘述，<code>overflow-anchor</code> property 看起來是能夠改變瀏覽器 scroll anchor 的行為，避免載入更多時的頁面跳動，造成不好的使用者體驗。而解決辦法也很簡單，就是在那顆按鈕或者是它的 parent 加上 <code>overflow-anchor:none</code> 就好了，非常滴神奇。</p>
<h2 id="後續"><a href="#後續" class="headerlink" title="後續"></a>後續</h2><p>好奇之下，也開始想說 Chrome 的 scroll bar 預設行為到底是怎麼回事，為什麼狠狠的一夜之間換了行為，讓我變成了大人？</p>
<p><img data-src="https://tva1.sinaimg.cn/large/0081Kckwgy1gle2x5bs3uj30qo0qoac8.jpg" alt="CodI9CMUEAA9vlg"></p>
<p>找著找著發現了這篇文 <a href="https://blog.chromium.org/2017/04/scroll-anchoring-for-web-developers.html"> Scroll anchoring for web developers</a>，文章大致上是在說 Chrome 在 version 56 的時候改變了滾動的行為，裡面說到：</p>
<blockquote>
<p>Similar to other features designed to protect our users from bad experiences, starting in version 56 Chrome prevents these unexpected page jumps with a new feature called scroll anchoring. This feature works by locking the scroll position on an on-screen element to keep our users in the same spot even as offscreen content continues to load. </p>
</blockquote>
<p>嗯嗯我十分同意…不對啊如果是這樣，那為什麼會發生今天的問題！所以應該是在某個版本有改變 scroll bar 的行為吧？</p>
<p>所以就又找到了幾篇文也在提問相關的問題，像是 ionic 框架的論壇有篇 <a href="https://forum.ionicframework.com/t/new-scroll-behaviour-always-scrolls-to-the-former-position/194360">New scroll behaviour: Always scrolls to the former position</a>、或者是剛剛的 <a href="https://support.google.com/chrome/thread/62861011?hl=en">Load More Button Click Issue </a>、<a href="https://www.mmxiaowu.com/article/5f474328f40060649e041682">Chrome v84/85 追加元素后 滚动条位置问题</a>、或是 Bootstrap 的 issue <a href="https://github.com/twbs/bootstrap/issues/31341">Accordion scroll behavior in Chrome #31341</a>，都提到 Chrome 在 v84 之後的 scroll anchor 的預設行為改變了。</p>
<p>看來下一步就是要去找 Chrome 更新的 log，所以我跑去找了 <a href="https://developers.google.com/web/updates/2020/07/nic84">New in Chrome 84</a>，翻了一翻都沒有，搜尋「scroll」或是「anchor」也都沒有，但說不定原因是這個改變不是 New in Chrome 84，而是舊行為被更改了，所以發在其他文章裡面嗎？像是關於棄用、修改的文章，所以又去找了 <a href="https://developers.google.com/web/updates/2020/05/chrome-84-deps-rems">Deprecations and removals in Chrome 84</a>，ok 看來還是沒有。</p>
<p>之後東翻西找下了各種關鍵字，還是找不到關於 scroll bar 在 Chrome v84 被修改的細節是什麼，或是也沒有任何線索，就暫時先放下它啦。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>翻找文章翻得好累。</p>
<p>然後我也不算這算不算貢獻開源，因為只有這個課程的學生才會用到的系統，不過過去都是在自己的 repo、和其他人協作的狀況下發 PR，這次算是第一次發給沒有參與的公開專案發 PR，真的是蠻緊張的的欸乾，在 commit 前還瘋狂確認有沒有任何地方改錯，深怕造成別人的困擾。</p>
<p>但總之是順利完成第一次的貢獻啦，可喜可賀可喜可賀。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://blog.chromium.org/2017/04/scroll-anchoring-for-web-developers.html"> Scroll anchoring for web developers</a></p>
<p><a href="https://support.google.com/chrome/thread/62861011?hl=en">Load More Button Click Issue </a></p>
<p><a href="https://blog.kalan.dev/scroll-pin-bottom/">透過 overflow-anchor 實作 pin to bottom 元件</a></p>
<p><a href="https://forum.ionicframework.com/t/new-scroll-behaviour-always-scrolls-to-the-former-position/194360">New scroll behaviour: Always scrolls to the former position</a></p>
<p><a href="https://stackoverflow.com/questions/42205462/disable-chromes-scroll-preserving-feature">Disable Chrome’s scroll preserving feature</a></p>
<p><a href="https://saschaeggi.medium.com/fix-issue-with-scroll-position-after-loading-data-in-chrome-7deb67e5fc29">Fix issue with scroll position after loading data in Chrome</a></p>
<p><a href="https://www.reddit.com/r/chrome/comments/i51r8g/load_more_button_scrolls_page_to_bottom_in_most/">“Load More” button scrolls page to bottom in most recent update!</a></p>
<p><a href="https://www.mmxiaowu.com/article/5f474328f40060649e041682">Chrome v84/85 追加元素后 滚动条位置问题</a></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>廢文日記</tag>
        <tag>JavaScript</tag>
        <tag>Front-End</tag>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>冥想正念指南 day02 - 如何放下</title>
    <url>/2021/01/07/headspace-guide-to-meditation-day02/</url>
    <content><![CDATA[<p>這集講的是如何把執念放下。</p>
<span id="more"></span>

<h4 id="放下"><a href="#放下" class="headerlink" title="放下"></a>放下</h4><p>你人生中放不下的東西是什麼呢？我沒有要舉例，單純覺得用問句好像很酷。</p>
<p>這集 Andy 說到他去當僧侶的時候，必須要離開原本生活所有的一切，原本的環境、生活，對，還有頭髮。但最讓他感到訝異的是，他以為要離開原本忙碌的思緒，但這比他想像中困難。</p>
<p>對大多數人來說腦袋是不斷在運轉的，像一隻瘋狂蹦跳的猴子，永遠不休息，這也是我們時常感到疲倦的原因。通常我們會用想的來解決問題，這就像用猴子去控制猴子一般。</p>
<h4 id="創造環境"><a href="#創造環境" class="headerlink" title="創造環境"></a>創造環境</h4><p>我們要做的是創造使自己放鬆、自然放下的環境。</p>
<p>Andy 的僧院有一位老師是這樣跟他說的，想像有一片藍天，這片藍天就是你的心智(Mind），這片藍天永遠存在，而藍天之中會有雲朵飄著，這些雲朵就是你的思緒(thought），有時候會多到蓋過藍天，但當你用這種角度看待心智的時候，就可以透過想像技巧把雲朵撥開，看見藍天。</p>
<h4 id="想像技巧"><a href="#想像技巧" class="headerlink" title="想像技巧"></a>想像技巧</h4><p>想像一團白光從你的頭頂開始往下繞過全身，不用去想白光應該要長怎樣，就算是模糊的想像也沒問題，只要是白光就好。</p>
<p>再來是想像你人生中覺得最舒服的環境，環境很模糊也沒關係，只要腦內有這個概略的想法就好。</p>
<p>當你想像這些畫面的時候，就能夠置身於較為放鬆的身心環境。</p>
<h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><p>這集挺無感的，不懂怎麼把他講的概念和放下執念如何連結在一起。</p>
<p>藍天、白光、舒服環境什麼的無法理解和想像，今天冥想思緒也常常跑進來亂，旁白在冥想過程會叫你想像白光從頭頂進入身體，當我想像白光已經從頭頂跑到腳底的時候，結果旁白說：「好，白光現在已經到你的肩膀了」，我就會驚訝靠北原來白光跑這麼慢的嗎？再讓想像中的白光跑回肩膀。</p>
<p>這樣一來一往導致冥想不是很順，有各種雜念的干擾；另外就是在冥想前還在忙其他事情，一時之間腦袋沒辦法轉換過來，導致冥想到後期會忍不住去想這件事，回神過來的辦法就是透過前一天「專注力錨點」，調整呼吸、數呼吸讓腦袋有其他能夠專注的事情。</p>
<p>嗯，今天冥想效果不是很好。</p>
]]></content>
      <categories>
        <category>雜記</category>
      </categories>
      <tags>
        <tag>廢文日記</tag>
        <tag>meditation</tag>
      </tags>
  </entry>
  <entry>
    <title>學習英文的神套件 - Language Reactor</title>
    <url>/2021/10/01/nice-english-learning-chrome-extension/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不知道大家有沒有用過 VoiceTube 這個平台來學過英文？介面長得像是這樣：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1guws2uxudgj610s0gzn0e02.jpg" alt="截圖 2021-09-28 下午11.51.10"></p>
<p>我大概用過一次，但始終有個痛點沒辦法解決，那就是我只能用平台有提供的影片來做學習，很多影片提供的主題我偏偏就沒什麼興趣，有時候光是找自己有興趣的影片就比看影片本身花的時間還多了，哭哭。</p>
<p>所以即使我還蠻喜歡 VoiceTube 的介面，用起來也覺得蠻讚的，但始終就是只用了那一兩次，沒辦法長時間的使用。</p>
<p>但如今找到了一個很讚，我強力推薦的 Chrome Extension 了！介面跟 VoiceTube 有 87% 像以外，還解決了我之前使用的痛點。</p>
<p>這個 Chrome Extension 就是「<a href="https://chrome.google.com/webstore/detail/language-reactor/hoombieeljmmljlkjmnheibnpciblicm?hl=zh-TW">Language Reactor</a>」！</p>
<span id="more"></span>

<h2 id="Language-Reactor"><a href="#Language-Reactor" class="headerlink" title="Language Reactor"></a>Language Reactor</h2><p>這款 Chrome Extension 的前身叫做 Language Learning with Netflix，改版之後就叫做 Language Reactor，我是沒用過之前的版本，但前幾天一用就覺得頗讚，忍不住寫了一篇文想要分享。</p>
<p>廢話不多說，我們先直接看介面：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1guwsaqxn76j61h20qkgra02.jpg" alt="截圖 2021-09-28 下午11.45.54"></p>
<p>看起來和 VoiceTube 有 87% 像，UX 我認為做得蠻不錯的，有用過 VoiceTube 的人應該馬上就可以上手，沒用過的人摸個幾分鐘也會很快熟悉。Langauge Reactor 提供了幾個我覺得蠻方便的功能：</p>
<ol>
<li>左右方向鍵可以逐句回放</li>
<li>不會的單字移上去就會有單字翻譯</li>
<li>能夠開關「讀完一句就暫停」的功能，s 可以重複播放該句字幕</li>
<li>多種客製化選項調整（關閉下方字幕、雙語字幕、調整播放速度、調整字體大小等）</li>
<li>單字可以加入清單（收費功能）</li>
<li>可以做單字複習（收費功能）</li>
</ol>
<p>如果點開右上角的齒輪可以看到不少的選像可以做調整：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1guwsx2z01jj60nu0ga75q02.jpg" alt="截圖 2021-09-29 上午12.20.43"></p>
<p>以我的需求來說，我需要的其實只有在右邊顯示字幕，以及逐句回放的功能，平常看影片的時候不開字幕，真的不懂、沒聽清楚的地方可以偷瞄字幕以及回放到上一句，之前 Netflix 只能回到前十秒真的是讓我有點困擾。念完一句就自動暫停的功能，對於想練習回音法時候也是蠻方便的。</p>
<p>另外，用 Netflix 的時候有個擾人的地方是英文字幕有點醜，還會給我隨便亂跳，總之排版有點醜，Langauge Reactor 也一並解決了這個煩惱。</p>
<p>它還有一些額外的收費功能，要登入之後才能使用，收費我記得不算太貴，但因為我很窮，所以也沒有花錢試試看付費會員的功能，目前的免費功能就已經很滿意了。</p>
<p>但好還能夠更好，如果想要學英文的話，還能夠用什麼套件做輔助呢？</p>
<h2 id="Online-Dictionary-Helper（在線辭典助手）"><a href="#Online-Dictionary-Helper（在線辭典助手）" class="headerlink" title="Online Dictionary Helper（在線辭典助手）"></a>Online Dictionary Helper（在線辭典助手）</h2><p><a href="https://chrome.google.com/webstore/detail/online-dictionary-helper/lppjdajkacanlmpbbcdkccjkdbpllajb">Online Dictionary Helper</a></p>
<p>這個 Chrome Extension 也是近期發現的好物，使用方法很單純，就是把不懂的單字選取起來就好：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1guwstqrd6uj61h90qpwku02.jpg" alt="截圖 2021-09-29 上午12.17.50"></p>
<p>隔個一秒就會跑出 pop-up 視窗自動幫忙翻譯，有提供 Collins、Cambridge 等英漢、英英辭典使用，上圖都只有英文是因為我用的是 Collins 英英辭典。</p>
<p>但如果只是單純翻譯的話當然有一堆套件都有這功能了，沒什麼了不起，所以它還有提供一個很方便的功能，那就是可以一鍵把單字加入 Anki 裡面。說到 Anki，因為聽聞過多少人推薦 Anki 來進行語言學習，我也曾經幻想過自己會很有毅力的使用它來學習，無奈太低估自己的惰性，我覺得 Anki 最勸退人的地方就是添加字卡了，真的好麻煩！複習我覺得不會麻煩，就是例行性的打開然後點點字卡，但添加字卡真的好花時間，大概做了幾次我就馬上放棄了。所幸「在線辭典助手」提供了一鍵添加單字的功能，讓我覺得在使用 Anki 的路上輕鬆不少。</p>
<p>要把 Anki 結合在線辭典助手的方式也不難，首先打開 Anki，到選單的「Tools -&gt; Add-ons -&gt; Get Add-ons」，接著到 <a href="https://ankiweb.net/shared/info/2055492159">Anki Connect</a> 複製它的 code：<code>2055492159</code> ，接著輸入到 Anki 裡面，就會安裝 Anki Connect 了。</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1guwt6hw6lmj60wa0mcmzr02.jpg" alt="截圖 2021-09-29 上午12.30.12"></p>
<p>接著到 Chrome 點擊「在線辭典助手」做調整，點擊右上角的三個點點，就會跑到 settings：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1guwt7nbrerj60cv0ae0tg02.jpg" alt="截圖 2021-09-29 上午12.31.16"></p>
<p>我們要做的設定就是把數據導出改成「Anki Connect」，並且設定 Anki 要存在哪個 Deck、Template 名稱、以及一些字卡要放在哪個欄位等等。</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1guwt8l8uj1j60co0d6my302.jpg" alt="截圖 2021-09-29 上午12.31.32"></p>
<p>重點中的重點，那就是這個套件的欄位都要是如我上圖寫的，像單字就會對應到「expression」，例句就會對應到「sentence」，所以 Anki 的字卡模板都要有這些欄位可以選擇才行。</p>
<p>這時候你可能會有疑問，靠杯我要用這套件還要自己刻模板喔？是在逼我放棄吧？不用緊張，我也折騰了一陣子，之後發現開發者的 blog 有提供好看的 Anki 卡片模板：「<a href="https://www.laohuang.net/20180108/antimoon-template-3/">Antimoon</a>」，只要點擊下方的連結下載 Anki 的 pkg，接著點擊「File -&gt; import」把剛剛下載的 template import 就可以使用現成的 Anki 卡片模板了。</p>
<p>Antimoon 提供的卡片模板真的蠻不錯的，重點是不用自己切版：</p>
<img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1guznxtnm3wj60zq0s0goe02.jpg" alt="截圖 2021-10-01 上午11.45.14" style="zoom:50%;" />

<p>附帶一提，如果想要配合 Language Reactor 使用的話，記得要把 Language Reactor 預設的「滑鼠懸停時」、「點擊左鍵」、「點擊右鍵」這些行為先關掉，避免兩個套件行為打架。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://otoitsuki.info/%E5%AF%A6%E8%A1%8C-100ls-%E7%9C%8B-netflix-%E5%AD%B8%E8%8B%B1%E6%96%87%E7%9A%84%E8%B6%85%E5%A5%BD%E7%94%A8%E5%B7%A5%E5%85%B7%E5%80%91-f2d4c9dc7b01">實行 100LS 看 Netflix 學英文的超好用工具們</a></li>
</ul>
]]></content>
      <categories>
        <category>筆記</category>
      </categories>
      <tags>
        <tag>English Learning</tag>
        <tag>Chrome Extension</tag>
      </tags>
  </entry>
  <entry>
    <title>複習趴萬 - Git、Command line</title>
    <url>/2019/10/20/%E8%A4%87%E7%BF%92%E8%B6%B4%E8%90%AC-Git%E3%80%81Command-line/</url>
    <content><![CDATA[<p>放一些之前的筆記還有這陣子的複習，內容比較隨意。</p>
<span id="more"></span>
<h2 id="交作業流程"><a href="#交作業流程" class="headerlink" title="交作業流程"></a>交作業流程</h2><p>請用文字一步步敘述應該如何交作業。</p>
<p><strong>Ans</strong>：</p>
<ol>
<li><code>git branch newBranchName</code> 新開一個 branch</li>
<li><code>git chekcout newBranchName</code> 切換到 branch</li>
<li>寫作業，告一個段落後用<code>git commit -am &#39;要記錄的內容&#39;</code>，這邊 am 同時有 add ，所以會把新增、刪除的檔案都加入 git 做版本控制。</li>
<li>作業全寫完就用 <code>git push origin branchName</code> 把本地的 branch push 到遠端的 repo 上。</li>
<li>點擊 pull request 要求 merge</li>
</ol>
<h2 id="如何回到上一個-commit"><a href="#如何回到上一個-commit" class="headerlink" title="如何回到上一個 commit"></a>如何回到上一個 commit</h2><p>會提到這個是因為上次 deploy 前發現大事不妙，居然改錯東西了，所以就先退回上一個 commit 版本。</p>
<p>這時候打：<code>git reset HEAD^</code> 就可以回到上一個版本</p>
<h2 id="之前的筆記-command-line"><a href="#之前的筆記-command-line" class="headerlink" title="之前的筆記 - command line"></a>之前的筆記 - command line</h2><h2 id="基本-Command-line-指令"><a href="#基本-Command-line-指令" class="headerlink" title="基本 Command line 指令"></a>基本 Command line 指令</h2><table>
<thead>
<tr>
<th align="center">指令名稱</th>
<th align="center">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center">pwd</td>
<td align="center">顯示目前自己的位置</td>
</tr>
<tr>
<td align="center">ls</td>
<td align="center">列出所在地方的所有檔案</td>
</tr>
<tr>
<td align="center">cd</td>
<td align="center">加空格鍵後，打出名稱就可移動至想要前往的目的地。（可用絕對、相對路徑來移動）</td>
</tr>
<tr>
<td align="center">man</td>
<td align="center">空格加上指令後，會有詳細的指令講解</td>
</tr>
<tr>
<td align="center">touch</td>
<td align="center">觸碰一個檔案讓它更新最後修改時間，或者是建立檔案（自己實測 Windows 是沒有這指令）</td>
</tr>
<tr>
<td align="center">rm(ReMove)</td>
<td align="center">刪除檔案，如果要刪除整個資料夾的內容，可以加 rm -r 資料夾名稱 ，就可以把整個資料夾內容刪光。</td>
</tr>
<tr>
<td align="center">mkdir(MaKe DIRectory）</td>
<td align="center">建立資料夾。</td>
</tr>
<tr>
<td align="center">rmdir</td>
<td align="center">刪除資料夾。</td>
</tr>
<tr>
<td align="center">mv(MoVe)</td>
<td align="center">移動檔案或者是幫檔案改名</td>
</tr>
<tr>
<td align="center">cp（CoPy）</td>
<td align="center">複製檔案或資料夾，如果要複製資料夾則是 cp -r，這邊歸納出一個邏輯是：如果是關於資料夾內容的指令，無論刪除、複製等等，加上 -r 就可以了。</td>
</tr>
</tbody></table>
<h2 id="如何使用-Vim？"><a href="#如何使用-Vim？" class="headerlink" title="如何使用 Vim？"></a>如何使用 Vim？</h2><h4 id="切換模式"><a href="#切換模式" class="headerlink" title="切換模式"></a>切換模式</h4><p>Vim 是藉由切換模式來輸入的，按下 I 可以進入 Insert 模式，也就是輸入，如果沒按就會是 Normal 模式，在 Normal 模式你做甚麼它都不會屌你，但是只要按下 I 你要它幹嘛它都服從，Vim 真的很難搞。</p>
<h4 id="解除-Insert-模式以及儲存並離開-Vim"><a href="#解除-Insert-模式以及儲存並離開-Vim" class="headerlink" title="解除 Insert 模式以及儲存並離開 Vim"></a>解除 Insert 模式以及儲存並離開 Vim</h4><p>離開輸入模式的方法是按下 esc，在 Normal 模式下按冒號 （：）然後輸入 w 和 q ，就會儲存並離開了。</p>
<h2 id="進階-Command-line-指令"><a href="#進階-Command-line-指令" class="headerlink" title="進階 Command line 指令"></a>進階 Command line 指令</h2><table>
<thead>
<tr>
<th align="center">指令名稱</th>
<th align="center">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center">grep</td>
<td align="center">抓取文件內的關鍵字</td>
</tr>
<tr>
<td align="center">wget</td>
<td align="center">目前了解是可以下載網頁的樣子</td>
</tr>
<tr>
<td align="center">curl</td>
<td align="center">發送一個 GET 的 Request 到目標 URL 並返回 reponse</td>
</tr>
</tbody></table>
<h2 id="之前的筆記-Git"><a href="#之前的筆記-Git" class="headerlink" title="之前的筆記 - Git"></a>之前的筆記 - Git</h2><h2 id="Git-基本概念"><a href="#Git-基本概念" class="headerlink" title="Git 基本概念"></a>Git 基本概念</h2><p><img data-src="https://i1.wp.com/kopu.chat/wp-content/uploads/2017/01/git4.jpg?w=1841&ssl=1" alt="image"></p>
<p>簡單來說，<code>git add</code> 就是先暫存在某個地方，<code>git commit</code> 就像是遊戲存檔，並且會附註你這次存檔幹了甚麼。</p>
<p>Git 版本控制清楚記錄每個檔案甚麼時候更改或刪除，有 Git 幫我們做這些歷史紀錄，到時候就可以知道黑鍋誰該背了（？）當然我講的內容很隨便粗淺，詳細內容請參照 <a href="https://kopu.chat/2017/01/18/git%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80%E6%95%99%E5%AD%B8-part-1/">Git新手入門教學</a> 以及 <a href="https://gitbook.tw/">為你自己學 Git</a>。</p>
<h2 id="Git-基本流程－哼檔案都接受我的控制吧"><a href="#Git-基本流程－哼檔案都接受我的控制吧" class="headerlink" title="Git 基本流程－哼檔案都接受我的控制吧"></a>Git 基本流程－哼檔案都接受我的控制吧</h2><ol>
<li><code>git init</code>：讓資料夾進入版本控制的狀態</li>
<li>建立 <code>.gitignore</code>，把不要進行版本控制的檔案輸入進去</li>
<li><code>git add .</code>：把所有想加入版本控制的檔案先暫存，丟進 Staging Area</li>
<li><code>git commit -m &quot;想輸入的內容&quot;</code>：把所有暫存的檔案提交出去，-m 後輸入的內容會像是附註一樣，通常會寫更改了什麼東西。</li>
</ol>
<h3 id="怎麼知道每個檔案現在的狀態？比如有沒有被-add"><a href="#怎麼知道每個檔案現在的狀態？比如有沒有被-add" class="headerlink" title="怎麼知道每個檔案現在的狀態？比如有沒有被 add"></a>怎麼知道每個檔案現在的狀態？比如有沒有被 add</h3><p>隨時使用 <code>git status</code> 來查詢現在狀態。</p>
<h3 id="怎麼知道每次-commit-的內容？"><a href="#怎麼知道每次-commit-的內容？" class="headerlink" title="怎麼知道每次 commit 的內容？"></a>怎麼知道每次 commit 的內容？</h3><p>使用 <code>git log</code> 來看每次 commit 詳細資訊。</p>
<h3 id="如果想回去之前的-commit-怎辦？"><a href="#如果想回去之前的-commit-怎辦？" class="headerlink" title="如果想回去之前的 commit 怎辦？"></a>如果想回去之前的 commit 怎辦？</h3><p>使用 <code>git checkout [SHA-1](https://gitbook.tw/chapters/using-git/how-to-calculate-the-sha1-value.html)</code>，就可以前往到你想去的 commit。</p>
<h2 id="Branch基本概念與操作"><a href="#Branch基本概念與操作" class="headerlink" title="Branch基本概念與操作"></a>Branch基本概念與操作</h2><h3 id="為甚麼要有-Branch-？"><a href="#為甚麼要有-Branch-？" class="headerlink" title="為甚麼要有 Branch ？"></a>為甚麼要有 Branch ？</h3><p>Branch 的概念大概就是像施放影分身之術一樣，可能同時有還沒完成的新功能、急著要修改的 Bug，但刪除或是隔離出還沒完成的新功能然後修改 Bug 這方法有點笨，不如把還在開發新功能的專案影分身出來，等到完成後再合併就好了！</p>
<h3 id="如何創造Branch？"><a href="#如何創造Branch？" class="headerlink" title="如何創造Branch？"></a>如何創造Branch？</h3><p>利用 <code>git branch + 要創造的branch名</code> 來建立新 branch。</p>
<h3 id="如何切換branch？"><a href="#如何切換branch？" class="headerlink" title="如何切換branch？"></a>如何切換branch？</h3><p>跟先前切換 commit 一樣，利用 <code>git checkout + branch名</code>。</p>
<h3 id="如何合併Branch？"><a href="#如何合併Branch？" class="headerlink" title="如何合併Branch？"></a>如何合併Branch？</h3><p>必須先身處在主要 branch 上，然後用 <code>git merge + 你要合併的 branch 名</code>。</p>
<p>出現衝突怎辦？比如兩個branch都修改同樣的檔案</p>
<p>Git 會發現這點，然後不讓你合併，必須手動修改發生衝突的檔案內容，而內容如何修改就看個人決定。</p>
<h2 id="Git-相關狀況劇"><a href="#Git-相關狀況劇" class="headerlink" title="Git 相關狀況劇"></a>Git 相關狀況劇</h2><h3 id="手殘，commit-message-超常打錯怎辦？"><a href="#手殘，commit-message-超常打錯怎辦？" class="headerlink" title="手殘，commit message 超常打錯怎辦？"></a>手殘，commit message 超常打錯怎辦？</h3><p>用 <code>git commit —amend</code> 就可以更改了。</p>
<h3 id="後悔之前整個Commit-了，可以回到上一動嗎？"><a href="#後悔之前整個Commit-了，可以回到上一動嗎？" class="headerlink" title="後悔之前整個Commit 了，可以回到上一動嗎？"></a>後悔之前整個Commit 了，可以回到上一動嗎？</h3><p>使用 <code>git reset HEAD^</code> 就可以了。不過在這裡要補充，git reset 分為三種模式，差異在於把原本 commit 放置在哪一區，詳細介紹在這 <a href="https://gitbook.tw/chapters/using-git/reset-commit.html">剛才的 Commit 後悔了，想要拆掉重做…</a></p>
<p><code>git reset:</code><br>這個指令容易因為字義有所誤會需要特別註釋，所謂 reset 不是把原本所有的 commit 都丟掉的意思，而是暫時隱藏起來，也因此意思應該是「移動」到某某 commit，並且將先前 commit 隱藏。</p>
<h3 id="取錯Branch的名字了，可以改名嗎？"><a href="#取錯Branch的名字了，可以改名嗎？" class="headerlink" title="取錯Branch的名字了，可以改名嗎？"></a>取錯Branch的名字了，可以改名嗎？</h3><p>用 checkout 進到那個 Branch，然後 <code>git branch -m 新名字</code></p>
<h3 id="怎麼取得遠端的branch？"><a href="#怎麼取得遠端的branch？" class="headerlink" title="怎麼取得遠端的branch？"></a>怎麼取得遠端的branch？</h3><p>這個功能讓我超驚豔的，怎麼能這麼方便呢？直接用 <code>git checkout branch名</code> 就可以了。</p>
]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>Commnad line</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>淺談 AST 及 ESlint Rule：撰寫屬於自己的 ESLint Rule（下）</title>
    <url>/2021/06/29/AST-and-ESLint-Introduction-part-2/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這篇延續了上一篇對於 AST 的介紹，基於上篇對 AST 的理解，這篇文會開始實際使用 AST Explorer 以及 ESLint 提供的 API，實際的撰寫屬於自己專案的 ESLint Rule。</p>
<span id="more"></span>

<h2 id="ESLint-Rule-的基礎設置、介紹"><a href="#ESLint-Rule-的基礎設置、介紹" class="headerlink" title="ESLint Rule 的基礎設置、介紹"></a>ESLint Rule 的基礎設置、介紹</h2><h3 id="ESLint-Rule-執行流程"><a href="#ESLint-Rule-執行流程" class="headerlink" title="ESLint Rule 執行流程"></a>ESLint Rule 執行流程</h3><p>ESLint 的 rule 在執行上的流程經過簡化後，大致如下：</p>
<blockquote>
<ol>
<li>ESLint parser 將 code 解析成 AST</li>
<li>透過 ESLint 的 selector 選擇 node，設置 rule 的 listener</li>
<li>ESLint traverse AST 時，觸發 listener 的 callback</li>
</ol>
</blockquote>
<p>⚠️ 上面的流程不完全是 ESLint 運作的方式，只是我個人經過閱讀文章後簡化的理解，ESLint Rule 背後執行還牽涉到 Visitor Pattern，如果對背後實際運行方式有興趣，也有許多 ESLint source code 解讀的文章。</p>
<p>ESLint 的規則寫起來其實蠻像一般在寫 JavaScript 設置 eventLisnter 的感覺，透過選擇器（selector) 來選擇到想要的 node，接著 rule 的 listener 就會被放到 node 上，等到 ESLint traverse 到那個 node 的時候，就會觸發 rule 的檢查。</p>
<h3 id="Selector-是什麼？"><a href="#Selector-是什麼？" class="headerlink" title="Selector 是什麼？"></a>Selector 是什麼？</h3><p>可以去 <a href="https://eslint.org/docs/developer-guide/selectors">ESLint - Selectors</a> 看到以下的說明：</p>
<blockquote>
<p>A selector is a string that can be used to match nodes in an Abstract Syntax Tree (AST). This is useful for describing a particular syntax pattern in your code.</p>
<p>The syntax for AST selectors is similar to the syntax for <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors">CSS selectors</a>. If you’ve used CSS selectors before, the syntax for AST selectors should be easy to understand.</p>
</blockquote>
<p>簡單來說它就是類似於 CSS selectors 的東東，讓你可以很輕鬆的從選擇到想要的 AST node。</p>
<p>舉例來說，假設我們要選擇 FunctionDeclaration 底下的 Identifier，那就可以寫成這樣子：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 透過這裡來選擇到想要的 node</span>
      <span class="token string">"FunctionDeclaration > Identifier"</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// listener 的 callback 邏輯寫在這裡</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>透過很像 CSS Selectors 的運作模式，就可以選擇到自己想要的節點了。</p>
<h3 id="ESLint-Rule-的基本架構"><a href="#ESLint-Rule-的基本架構" class="headerlink" title="ESLint Rule 的基本架構"></a>ESLint Rule 的基本架構</h3><p>下面的程式碼是 ESLint 規則的基本長相</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * @fileoverview Rule to disallow unnecessary semicolons
 * @author Nicholas C. Zakas
 */</span>

<span class="token string">"use strict"</span><span class="token punctuation">;</span>

<span class="token comment">//------------------------------------------------------------------------------</span>
<span class="token comment">// Rule Definition</span>
<span class="token comment">//------------------------------------------------------------------------------</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    type<span class="token operator">:</span> <span class="token string">"suggestion"</span><span class="token punctuation">,</span>
    docs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      description<span class="token operator">:</span> <span class="token string">"disallow unnecessary semicolons"</span><span class="token punctuation">,</span>
      category<span class="token operator">:</span> <span class="token string">"Possible Errors"</span><span class="token punctuation">,</span>
      recommended<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      url<span class="token operator">:</span> <span class="token string">"https://eslint.org/docs/rules/no-extra-semi"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    fixable<span class="token operator">:</span> <span class="token string">"code"</span><span class="token punctuation">,</span>
    schema<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// no options</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// callback functions</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>主要分為 <code>meta</code> 及 <code>create</code> 兩個部分，<code>meta</code> 負責的是一些 ESLint Rule 的說明、設定等等，比如 docs 就是關於文件相關的說明，fixable 則是要不要啟用 quick fix 功能等等的；<code>create</code> 就是我們 callback 內容，ESLint Rule 實際的運作邏輯就會寫在這裡。</p>
<h3 id="ESLint-Rule-的資料夾結構"><a href="#ESLint-Rule-的資料夾結構" class="headerlink" title="ESLint Rule 的資料夾結構"></a>ESLint Rule 的資料夾結構</h3><p>ESLint 官方文件在 <a href="https://eslint.org/docs/developer-guide/working-with-rules">Working with Rules</a> 有說到 ESLint Rule 的資料夾結構該長怎樣：</p>
<blockquote>
<ul>
<li>in the <code>lib/rules</code> directory: ESLint Rule 的實際邏輯會放在這，檔名就會是這個規則的名稱 (for example, <code>no-extra-semi.js</code>)</li>
<li>in the <code>tests/lib/rules</code> directory: ESLint Rule 測試的檔案，檔名也是規則名稱 (for example, <code>no-extra-semi.js</code>)</li>
<li>in the <code>docs/rules</code> directory: 關於規則說明的 markdown 放在這 (for example, <code>no-extra-semi.md</code>)</li>
</ul>
</blockquote>
<h3 id="快速產出-ESLint-Plugin、Rule-的模板"><a href="#快速產出-ESLint-Plugin、Rule-的模板" class="headerlink" title="快速產出 ESLint Plugin、Rule 的模板"></a>快速產出 ESLint Plugin、Rule 的模板</h3><p>ESLint Plugin 的模板要自己慢慢新增也可以，不過目前已經有非常方便的 CLI 可以使用，只要咻咻打幾個字就可以產出 ESLint Plugin 的各種模版，非常滴爽。</p>
<h4 id="ESLint-Plugin"><a href="#ESLint-Plugin" class="headerlink" title="ESLint Plugin"></a>ESLint Plugin</h4><p>首先要安裝 yo 以及 generator-eslint</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g yo generator-eslint<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接著建立 ESLint Plugin 資料夾的名稱</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> yang-eslint-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接著輸入 CLI，建立 ESLint Plugin 的模板</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yo eslint:plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>它會問幾個設定上的問題</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">? What is your name? ChihYang
? What is the plugin ID? yanglint
? Type a short description of this plugin: yang 專屬的 ESLint Plugin 
? Does this plugin contain custom ESLint rules? Yes 
? Does this plugin contain one or <span class="token function">more</span> processors? No<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著就會生成基本的 Plugin 模板了，但這只是 Plugin</p>
<h4 id="ESLint-Rule"><a href="#ESLint-Rule" class="headerlink" title="ESLint Rule"></a>ESLint Rule</h4><p>接著就要創建 Rule 的模板啦，首先輸入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yo eslint:rule<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接著一樣是會問一些簡單的設定問題</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">? What is your name? ChihYang
? Where will this rule be published? <span class="token punctuation">(</span>Use arrow keys<span class="token punctuation">)</span> 
  ❯ ESLint Core  
    ESLint Plugin 
? What is the rule ID? async-function-name  
? Type a short description of this rule: blablabla<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這樣就會產出需要的 ESLint Rule 檔案了！</p>
<h2 id="ESLint-Rule-實戰一：抓出不合規範的命名"><a href="#ESLint-Rule-實戰一：抓出不合規範的命名" class="headerlink" title="ESLint Rule 實戰一：抓出不合規範的命名"></a>ESLint Rule 實戰一：抓出不合規範的命名</h2><p>前面囉哩八嗦講一堆設定的介紹，接下來就真的要到實戰的環節了，首先來到我們第一個 ESLint Rule 的範例，「Async Function Name」，相信在一般團隊開發中都會有部分的命名是希望統一的，比如發 GET Method 的 request 會用 <code>getXXX</code> 開頭之類的。這個規則也是如此，當我們使用 async function 的時候，會希望 function 的名稱是 <code>xxxxAsync</code> 結尾，屬於一個團隊上的命名規範。</p>
<p>所以需求如下：</p>
<blockquote>
<p>實作一個可以檢查 async function 命名的 rule，funcion name 結尾需要有 <strong>「Async」</strong></p>
</blockquote>
<p>所以實際上的範例如下，invalid 範例會無法通過 ESLint Rule 檢查：</p>
<blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// invalid，沒有 Async 結尾</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">/* .... */</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// valid，有 Async 結尾</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">/* .... */</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>了解需求以後，接著就來實戰吧！</p>
<h3 id="第一步：實作之前，先寫測試"><a href="#第一步：實作之前，先寫測試" class="headerlink" title="第一步：實作之前，先寫測試"></a>第一步：實作之前，先寫測試</h3><p>接下來想走一個 TDD 的方式，先寫下測試以後，再開始實作 ESLint Rule 的邏輯，雖然我是沒試過 TDD 的開發方式啦，但感覺很好玩，所以就這樣做吧！</p>
<p>如何做 ESLint Rule 的測試呢？ESLint 有提供一個 <code>RuleTester</code> 的東東：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> rule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../../lib/rules/async-function-name'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> RuleTester <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'eslint'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>RuleTester
<span class="token keyword">var</span> ruleTester <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuleTester</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> parserOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span> ecmaVersion<span class="token operator">:</span> <span class="token number">2018</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

ruleTester<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">'async-function-name'</span><span class="token punctuation">,</span> rule<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  valid<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  invalid<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這邊做的事情就是引入 rule 的 module、從 ESLint 引入 <code>RuleTester</code>，以及使用 <code>RuleTester</code> new 出一個 instance，instance 的 constructor 可以傳入一些 option 的設定，因為 async/await 是 ES7 的語法，所以在 parser 的 version 我就設定為 2018，不然 <code>RuleTester</code> 是沒有辦法測試的。</p>
<p>接著執行 <code>ruleTester.run</code>，第一個參數是 rule 名稱；第二個參數是 rule module；第三個則是實際的測試案例，<code>valid</code> 如字面意思就是合法的程式碼 test case，invalid 則反之。</p>
<p>了解到這些以後，我們就可以寫下 test cases 了：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> rule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../../lib/rules/async-function-name'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> RuleTester <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'eslint'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>RuleTester
<span class="token keyword">var</span> ruleTester <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuleTester</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> parserOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span> ecmaVersion<span class="token operator">:</span> <span class="token number">2018</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

ruleTester<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">'async-function-name'</span><span class="token punctuation">,</span> rule<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  valid<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">'function foo() &#123; console.log() &#125;'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      code<span class="token operator">:</span> <span class="token string">'async function fooAsync() &#123; return "" &#125;'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>

  invalid<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      code<span class="token operator">:</span> <span class="token string">'async function myFunction() &#123; return "";&#125;'</span><span class="token punctuation">,</span>
      errors<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          message<span class="token operator">:</span> <span class="token string">'async function name should have Async words'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      code<span class="token operator">:</span> <span class="token string">'async function myFunctionasync() &#123; return "";&#125;'</span><span class="token punctuation">,</span>
      errors<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          message<span class="token operator">:</span> <span class="token string">'async function name should have Async words'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      code<span class="token operator">:</span> <span class="token string">'async function myAsyncFunction() &#123; return "";&#125;'</span><span class="token punctuation">,</span>
      errors<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          message<span class="token operator">:</span> <span class="token string">'async function name should have Async words'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>不合法 test case 的包括了「async function 但沒有 Async 結尾」、「async function 但結尾不是 camel case」、「async function 但 Async 不是放在結尾」</p>
<p>接著我們就可以把這些測試案例貼在 AST Explorer：</p>
<p><a href="https://astexplorer.net/#/gist/1712e379b79c3d2ed053a1def505305c/bbc7052c81353ddccd283066e6de8d8a337cb055">AST Explorer 連結</a></p>
<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gtazja0bduj31is0u07b0.jpg" alt="截圖 2021-08-10 上午12.06.49"></p>
<h3 id="第二步：觀察-AST，找出想要操作的-node"><a href="#第二步：觀察-AST，找出想要操作的-node" class="headerlink" title="第二步：觀察 AST，找出想要操作的 node"></a>第二步：觀察 AST，找出想要操作的 node</h3><p>我們需要的資訊有兩個：</p>
<blockquote>
<ol>
<li>檢查 function name 結尾有沒有 Async</li>
<li>檢查 function 是不是 async function</li>
</ol>
</blockquote>
<p>知道需要哪些資訊以後，接著就來觀察 AST 裡面哪些地方放有這些資訊：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gtazq5v947j31iv0u0q9t.jpg" alt="截圖 2021-08-10 上午12.09.45"></p>
<p>從上圖可以發現到一個 function 的宣告就會是一個 <code>FunctionDeclaration</code> 的 node，接著仔細看 <code>FunctionDeclaration</code> 的內部，會看到：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gtazn0ctruj61id0u0tej02.jpg" alt="截圖 2021-08-10 上午12.10.51"></p>
<p><code>FunctionDeclaration</code> 中還有 id 裡的 <code>Identifier</code>，<code>Identifier</code> 的 name 就會是 function 的名稱，如果我們要檢查 function name 是否有「Async」的話，<code>Identifier</code> 的 name 就會是我需要的資訊；另外，<code>FunctionDeclaration</code> 當中會有一個叫 <code>async</code> 的 boolean，這就是 function 是否為 async function 的資訊，這就是我們所需的兩個資訊！</p>
<p>接著，以我們的需求來看，我們需要選擇到 <code>FunctionDeclaration</code> 來得到 function 的資訊並做名稱相關的檢查，不寫成 <code>&quot;FunctionDeclaration &gt; Identifier&quot;</code> 的原因是除了 function name 檢查以外，我們也要確定這個 function 是 async，而這個資訊只會在 <code>FunctionDeclaration</code> 的 <code>async</code> 才有。</p>
<p>了解該做什麼後，現在就移動到 AST Explore 並寫下 code：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token function-variable function">FunctionDeclaration</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>async <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Async$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>id<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          context<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            node<span class="token punctuation">,</span>
            message<span class="token operator">:</span> <span class="token string">'async function name should have Async words'</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>node</code> 會是我們選擇到的 <code>FunctionDeclaration</code> 這幾個 node，得到 <code>FunctionDeclaration</code> 的資訊後，我們就可以透過 <code>node.async</code> 檢查是否為 async function，以及用 regex 檢查 function name 結尾是否符合規範。</p>
<p>當符合條件後，代表這就是我們想要揪出的錯誤命名 function，透過 <code>contex.report</code> 可以回報找出的錯誤，傳入 <code>node</code> 可以讓 ESLnt 幫你指出錯誤的地方在哪，<code>message</code> 則是想要跳出的錯誤提示文字。</p>
<p>所以在 AST Exploer 可以在右下角看到這樣的 output：<br><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gtazwny6k2j31in0u0th4.jpg" alt="截圖 2021-08-10 上午12.20.00"></p>
<p> ESLint 成功幫我們找出錯誤了！</p>
<h2 id="ESLint-Rule-實戰二：don’t-call-this-function-please🥺"><a href="#ESLint-Rule-實戰二：don’t-call-this-function-please🥺" class="headerlink" title="ESLint Rule 實戰二：don’t call this function please🥺"></a>ESLint Rule 實戰二：don’t call this function please🥺</h2><p>完成第一個實戰範例了，接下來再看看第二個範例吧，這個範例源自於工作時專案上看到的狀況，不禁就想試看看能怎麼用 ESLint 自動化的處理。</p>
<p>前情提要是我在專案上看到這個 function：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 此 function 用於測試，不要在測試以外的檔案使用，避免造成非預期的結果！</span>
<span class="token keyword">function</span> <span class="token function">DANGEROUS_reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>一般來說沒有 eslint 輔助的話，就只能在 comments 上面記得這件事情，但如果意外的使用了這個 function，也沒辦法得知，就會產生非預期的 bug，因此我們可以試試看自己寫個 ESLint Rule 來警告自己不要在測試外的地方使用這個 function！</p>
<p>需求如下：</p>
<blockquote>
<ul>
<li>檢查在 <strong>test 以外</strong>的檔案有沒有<strong>非預期的 function call</strong></li>
<li>可以在 array <strong>列舉出一連串禁用的 fucntion</strong></li>
<li>如果能<strong>自動修正</strong>錯誤就更棒了</li>
</ul>
</blockquote>
<p>出現 warning 的範例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// App.js</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> DANGEROUS_reset <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./utils'</span>  

<span class="token function">DANGEROUS_reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 欸，call 屁喔！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="第一步：實作之前，一樣先寫測試"><a href="#第一步：實作之前，一樣先寫測試" class="headerlink" title="第一步：實作之前，一樣先寫測試"></a>第一步：實作之前，一樣先寫測試</h3><p>如同前一個範例，我們還是先寫測試</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> rule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../../lib/rules/do-not-call-this-function'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> RuleTester <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'eslint'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>RuleTester
<span class="token keyword">var</span> ruleTester <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuleTester</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

ruleTester<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">'do-not-call-this-function'</span><span class="token punctuation">,</span> rule<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  valid<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">'foo()'</span><span class="token punctuation">,</span>
    <span class="token string">'console.log()'</span><span class="token punctuation">,</span>
    <span class="token string">'getData()'</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>

  invalid<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      code<span class="token operator">:</span> <span class="token string">'resetAll()'</span><span class="token punctuation">,</span>
      errors<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          messageId<span class="token operator">:</span> <span class="token string">'dontCallMsg'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      code<span class="token operator">:</span> <span class="token string">'destroyApp()'</span><span class="token punctuation">,</span>
      errors<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          messageId<span class="token operator">:</span> <span class="token string">'dontCallMsg'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      code<span class="token operator">:</span> <span class="token string">'printError()'</span><span class="token punctuation">,</span>
      errors<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          messageId<span class="token operator">:</span> <span class="token string">'dontCallMsg'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在預期中，<code>resetAll</code>、<code>destroyApp</code>、<code>printError </code>這些是不希望在測試檔案以外地方呼叫的 function，所以列為不合法的 test cases。</p>
<p>另外會發現到這邊出現 error message 的方式改成寫 <code>messageId: &#39;dontCallMsg&#39;</code> 了，這也是 ESLint Rule 提供的功能，叫做 <code>messageId</code>，屬於一個更簡單去寫錯誤提示的方式，有興趣可以看 <a href="https://eslint.org/docs/developer-guide/working-with-rules#messageids">ESLint - messageId</a> 了解如何使用。</p>
<p>接下來一樣是把 test cases 貼到 AST Explorer 上面：</p>
<p><a href="https://astexplorer.net/#/gist/1712e379b79c3d2ed053a1def505305c/6bba20b713281709d350b4b3971207f4cff31718">AST Explorer 連結</a></p>
<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gtb06t3thyj31io0u0n2w.jpg" alt="截圖 2021-08-10 上午12.29.29"></p>
<h3 id="第二步：觀察-AST，selector-對準獵物"><a href="#第二步：觀察-AST，selector-對準獵物" class="headerlink" title="第二步：觀察 AST，selector 對準獵物"></a>第二步：觀察 AST，selector 對準獵物</h3><p>因為我們要檢查的是「function call 名稱是否在黑名單裡面」，所以需要的是 function call 的 name，那這個資訊會在哪裡出現呢？觀察了 AST 以後可以看到：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gtb09s20m4j31j00u00xl.jpg" alt="截圖 2021-08-10 上午12.32.48"></p>
<p><code>CallExpression</code> 當中的 <code>Identifier</code> 的 <code>name</code> 就是 function call 的名稱，因此這就是我們要的資訊！</p>
<p>知道要選取誰以後就很簡單了，用 selector 選擇到想要的 node：</p>
<p><a href="https://astexplorer.net/#/gist/1712e379b79c3d2ed053a1def505305c/25cb7217fd756616ae754a22b42a1a377e74d693">AST Explorer 連結</a></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    docs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      description<span class="token operator">:</span> <span class="token string">'dont call this function out of test file'</span><span class="token punctuation">,</span>
      category<span class="token operator">:</span> <span class="token string">'Fill me in'</span><span class="token punctuation">,</span>
      recommended<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    fixable<span class="token operator">:</span> <span class="token string">'code'</span><span class="token punctuation">,</span> <span class="token comment">// or "code" or "whitespace"</span>
    schema<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    messages<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      dontCallMsg<span class="token operator">:</span> <span class="token string">'dont call this function out of test file'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token string">'CallExpression > Identifier'</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="第三步：撰寫-Rule-邏輯"><a href="#第三步：撰寫-Rule-邏輯" class="headerlink" title="第三步：撰寫 Rule 邏輯"></a>第三步：撰寫 Rule 邏輯</h3><p>接著就是實際撰寫 Rule 的檢查邏輯，我預計最基礎的作法就是可以用一個 array 存放黑名單的 function name，如果檢查到 node 的名稱在黑名單裡面的話，就需要揪出來，所以實作邏輯如下：</p>
<p><a href="https://astexplorer.net/#/gist/1712e379b79c3d2ed053a1def505305c/81c2080dc26d84784f2acdc0a0588d3377e10bf6">AST Explorer - disallowedMethods</a></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> disallowedMethods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'resetAll'</span><span class="token punctuation">,</span> <span class="token string">'destroyApp'</span><span class="token punctuation">,</span> <span class="token string">'printError'</span><span class="token punctuation">]</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    docs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      description<span class="token operator">:</span> <span class="token string">'dont call this function out of test file'</span><span class="token punctuation">,</span>
      category<span class="token operator">:</span> <span class="token string">'Fill me in'</span><span class="token punctuation">,</span>
      recommended<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    fixable<span class="token operator">:</span> <span class="token string">'code'</span><span class="token punctuation">,</span> <span class="token comment">// or "code" or "whitespace"</span>
    schema<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    messages<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      dontCallMsg<span class="token operator">:</span> <span class="token string">'dont call this function out of test file'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token string">'CallExpression > Identifier'</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      	<span class="token keyword">const</span> isDisallowed <span class="token operator">=</span> disallowedMethods<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>name<span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>isDisallowed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          context<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            node<span class="token punctuation">,</span>
            messageId<span class="token operator">:</span> <span class="token string">'dontCallMsg'</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>單純就只是用 <code>includes</code> 這個內建函式去檢查 function call 的名稱。</p>
<p>另外，需求上還有說要檢查的是「測試檔案」以外的地方，關於這個需求可以到 <code>eslintrc.js</code> 裡面的 overrides 做設定：</p>
<p><img data-src="https://i.imgur.com/jXvJqL6.png"></p>
<p><code>rules</code> 就是一般設定想要開啟的規則，但如果有些檔案想要部分套用規則而已，<code>overrides</code> 可以設定哪些檔案想開啟、關閉哪些規則，做出更客製化的 ESLint 設定套用。</p>
<h3 id="中場休息：盤點-TODO"><a href="#中場休息：盤點-TODO" class="headerlink" title="中場休息：盤點 TODO"></a>中場休息：盤點 TODO</h3><blockquote>
<ol>
<li>檢查 <strong>test 以外</strong>的檔案有沒有<strong>非預期的 function call</strong> ✅</li>
<li>可以在 array <strong>列舉出一連串禁用的 fucntion</strong> ❔</li>
<li>如果能<strong>自動修正</strong>錯誤就更棒了</li>
</ol>
</blockquote>
<p>第一個功能確定完成了，但第二個功能其實不太彈性，只完成了基本的需求，但仍然有美中不足的地方，不太理想的地方在哪呢？就是我們想要禁用的 function 名稱被寫死在 ESLint Rule 裡面了，比如今天臨時又想要新增幾個黑名單的 function name，以目前的方式來說就只能直接去修改 ESLint Rule 內部的邏輯，其實不是很方便，那有沒有更彈性的方式來實作呢？目前有想到一個，就是透過 ESLint Rule 裡面 options，我希望可以做到的事情會像是這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  rules<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'yanglint/async-function-name'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">'yanglint/do-not-call-this-function'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'warn'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> disallowedMethods<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'resetAll'</span><span class="token punctuation">,</span> <span class="token string">'printError'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>透過 options 的設定，我們就可以在設定檔傳入想要加入黑名單的 function，之後我們可以在 create 裡面透過 <code>context.options</code> 接收到被傳進的設定：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    docs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      description<span class="token operator">:</span> <span class="token string">'dont call this function out of test file'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    fixable<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// or "code" or "whitespace"</span>
    schema<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// fill in your schema</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>options<span class="token punctuation">)</span> <span class="token comment">// 收到剛剛傳進來的 disallowedMethods: ['resetAll', 'printError']</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也就是說我們能夠透過 <code>eslintrc.js</code> 的 options 設置來決定要禁用哪些 function，如此一來就不用改動 ESLint Rule 內部的邏輯了，聽起來讚讚，開始實作吧！</p>
<h3 id="ESLint-Rule-Option"><a href="#ESLint-Rule-Option" class="headerlink" title="ESLint Rule Option"></a>ESLint Rule Option</h3><p>要做到這點會用到 ESLint Rule 裡面的 <code>meta</code> 的 <code>schema</code>，還記得 <code>meta</code> 這東西嗎？忘記的話再來看看：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    docs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      description<span class="token operator">:</span> <span class="token string">'dont call this function out of test file'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    fixable<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// or "code" or "whitespace"</span>
    schema<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// fill in your schema</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">/* ... */</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>schema</code> 就是用來規定這個 ESLint Rule 的 options 預計接收的資料格式，那如何去規定資料格式要長怎樣呢？當中會使用一個叫 <a href="https://json-schema.org/">JSON Schema</a> 的東東來制定資料格式，JSON Schema 怎麼使用呢？</p>
<p>舉例來說，假設我們接收的 JSON 資料長這樣：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ChihYang"</span><span class="token punctuation">,</span>
  <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token property">"gender"</span><span class="token operator">:</span> <span class="token string">"male"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這段 JSON Data 的 JSON Schema 就會長這樣：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"object"</span><span class="token punctuation">,</span>
  <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span>
      <span class="token property">"minLength"</span><span class="token operator">:</span> <span class="token number">4</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span><span class="token punctuation">,</span>
      <span class="token property">"minimum"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token property">"maximum"</span><span class="token operator">:</span> <span class="token number">130</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"gender"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span>
      <span class="token property">"enum"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">"male"</span><span class="token punctuation">,</span>
        <span class="token string">"female"</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>簡單來說就是用 JSON 來定義 JSON data 的細節，比如 type、enum 內容、最小值最大值等等的。</p>
<p>知道如何使用以後，回到 ESLint Rule <code>meta</code> 的 <code>schema</code> 就知道該怎麼定義了：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    docs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      description<span class="token operator">:</span> <span class="token string">'dont call this function out of test file'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    fixable<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// or "code" or "whitespace"</span>
    schema<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">/* &#123;disallowedMethods: ['resetAll', 'printError']&#125; */</span>
      <span class="token punctuation">&#123;</span>
        type<span class="token operator">:</span> <span class="token string">'object'</span><span class="token punctuation">,</span>
        properties<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          disallowedMethods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            type<span class="token operator">:</span> <span class="token string">'array'</span><span class="token punctuation">,</span>
            items<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
              type<span class="token operator">:</span> <span class="token string">'string'</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            minItems<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            uniqueItems<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">/* ... 省略 ... */</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著，我們的測試也需要調整，<code>RuleTester</code> 很讚的地方是每個 test case 也可以決定要傳什麼樣的 option，讓我們可以測試傳入不同 option 的 case：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ruleTester<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">'do-not-call-this-function'</span><span class="token punctuation">,</span> rule<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  valid<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">'foo()'</span><span class="token punctuation">,</span>
    <span class="token string">'console.log()'</span><span class="token punctuation">,</span>
    <span class="token string">'getData()'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      code<span class="token operator">:</span> <span class="token string">'resetAll()'</span><span class="token punctuation">,</span>
      options<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> disallowedMethods<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'destroyApp'</span><span class="token punctuation">,</span> <span class="token string">'printError'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>

  invalid<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      code<span class="token operator">:</span> <span class="token string">'resetAll()'</span><span class="token punctuation">,</span>
      options<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> disallowedMethods<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'resetAll'</span><span class="token punctuation">,</span> <span class="token string">'printError'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      errors<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          messageId<span class="token operator">:</span> <span class="token string">'dontCallMsg'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      code<span class="token operator">:</span> <span class="token string">'destroyApp()'</span><span class="token punctuation">,</span>
      options<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> disallowedMethods<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'destroyApp'</span><span class="token punctuation">,</span> <span class="token string">'resetAll'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      errors<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          messageId<span class="token operator">:</span> <span class="token string">'dontCallMsg'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      code<span class="token operator">:</span> <span class="token string">'printError()'</span><span class="token punctuation">,</span>
      options<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> disallowedMethods<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'printError'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      errors<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          messageId<span class="token operator">:</span> <span class="token string">'dontCallMsg'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我們測試涵蓋了幾種情況：</p>
<blockquote>
<ol>
<li>沒有傳入任何 options 的時候，因為這時候沒有禁用的 function，所以會<strong>通過</strong></li>
<li>有在 options 傳入 disallowedMethods，但 call 的 function 和 disallowedMethods 不同，所以會<strong>通過</strong></li>
<li>call 了 options 規定的 disallowedMethods，這種情況<strong>不通過</strong></li>
</ol>
</blockquote>
<p>接著就是實際調整 ESLint Rule 的邏輯了，改的地方也不多，只是把原本宣告的 <code>disallowedMethods</code> 改成從 <code>context.options</code> 取得：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    docs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      description<span class="token operator">:</span> <span class="token string">'dont call this function out of test file'</span><span class="token punctuation">,</span>
      category<span class="token operator">:</span> <span class="token string">'Fill me in'</span><span class="token punctuation">,</span>
      recommended<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    fixable<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// or "code" or "whitespace"</span>
    schema<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        type<span class="token operator">:</span> <span class="token string">'object'</span><span class="token punctuation">,</span>
        properties<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          disallowedMethods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            type<span class="token operator">:</span> <span class="token string">'array'</span><span class="token punctuation">,</span>
            items<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
              type<span class="token operator">:</span> <span class="token string">'string'</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            minItems<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            uniqueItems<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token string">'CallExpression > Identifier'</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> disallowedMethods <span class="token operator">=</span> context<span class="token punctuation">.</span>options<span class="token punctuation">.</span>length
          <span class="token operator">?</span> context<span class="token punctuation">.</span>options<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>disallowedMethods
          <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

        <span class="token keyword">const</span> isDisallowed <span class="token operator">=</span> disallowedMethods<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>name<span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>isDisallowed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          context<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            node<span class="token punctuation">,</span>
            message<span class="token operator">:</span> <span class="token string">'dont call this function'</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="中場休息：再次盤點-TODO"><a href="#中場休息：再次盤點-TODO" class="headerlink" title="中場休息：再次盤點 TODO"></a>中場休息：再次盤點 TODO</h3><blockquote>
<ol>
<li>檢查 <strong>test 以外</strong>的檔案有沒有<strong>非預期的 function call</strong> ✅</li>
<li>可以在 array <strong>列舉出一連串禁用的 fucntion</strong> ✅</li>
<li>如果能<strong>自動修正</strong>錯誤就更棒了 </li>
</ol>
</blockquote>
<p>這次我們終於完成更彈性的寫法了，剩下最後一個「自動修正錯誤」的功能，相信使用過 ESLint 的人都一定看過一個功能是在我們將滑鼠移到 warning 上得時候，會出現一個叫「quick fix」的功能，點下去之後就會神奇地幫我們修正那個錯誤，如下圖：</p>
<p><img data-src="https://i.imgur.com/8yxNdfL.png"></p>
<p>這個功能是怎麼做到的呢？這就要講到 ESLint Rule 的 <code>fixer</code> 了。</p>
<h3 id="ESLint-Rule：Fixer"><a href="#ESLint-Rule：Fixer" class="headerlink" title="ESLint Rule：Fixer"></a>ESLint Rule：<code>Fixer</code></h3><p>回到我們的需求來說：</p>
<blockquote>
<p>檢查在 test 以外的檔案是否有執行這個 function，有的話跳出 warning，如果能自動修正掉就更棒了。</p>
</blockquote>
<p>這邊我把「自動修正錯誤」定義為「自動幫忙移除掉這個不合法的 function call」，直接移除掉某段程式碼的做法似乎有點極端，但方便起見就先這樣吧。</p>
<p>至於怎麼刪除掉呢？ESLint 有提供一個叫 <a href="https://eslint.org/docs/developer-guide/working-with-rules#applying-fixes">fixer</a> 的物件。當我們在使用 <code>context.report</code> 的時候，可以傳入 <code>fix</code> ，<code>fix</code> 會是一個 callback function，它會接收到 <code>fixer</code> 這個 object：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">context<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  node<span class="token operator">:</span> node<span class="token punctuation">,</span>
  message<span class="token operator">:</span> <span class="token string">"Missing semicolon"</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fix</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fixer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> fixer<span class="token punctuation">.</span><span class="token function">insertTextAfter</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>fixer 當中提供了不少的 method 可以使用：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gtd65cshwlj61aw0eyn1e02.jpg" alt="截圖 2021-08-11 下午9.27.01"></p>
<p>以目前的需求為例，我們要做的是「移除掉某段不合法 function call」，所以照理來說會用到的是 <code>remove</code> ，知道可以用什麼 API 以後，就可以繼續往下了。</p>
<p>不過在真正刪除 node 之前，要先要到 ESLint Rule 的 <code>meta</code> 調整 <code>fixable</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    docs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      description<span class="token operator">:</span> <span class="token string">'dont call this function out of test file'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    fixable<span class="token operator">:</span> <span class="token string">'code'</span><span class="token punctuation">,</span> <span class="token comment">// 把這裡改成 code</span>
    schema<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">/*... 省略 ... */</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">/* ... 省略 *.../
    &#125;
  &#125;,
&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著我們還是要調整測試：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ruleTester<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">'do-not-call-this-function'</span><span class="token punctuation">,</span> rule<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  valid<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">'foo()'</span><span class="token punctuation">,</span>
    <span class="token string">'console.log()'</span><span class="token punctuation">,</span>
    <span class="token string">'getData()'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      code<span class="token operator">:</span> <span class="token string">'resetAll()'</span><span class="token punctuation">,</span>
      options<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> disallowedMethods<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'destroyApp'</span><span class="token punctuation">,</span> <span class="token string">'printError'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>

  invalid<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      code<span class="token operator">:</span> <span class="token string">'resetAll()'</span><span class="token punctuation">,</span>
      options<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> disallowedMethods<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'resetAll'</span><span class="token punctuation">,</span> <span class="token string">'printError'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      errors<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          message<span class="token operator">:</span> <span class="token string">'dont call this function'</span><span class="token punctuation">,</span>
          type<span class="token operator">:</span> <span class="token string">'Identifier'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      output<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment">// 新增了這行</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      code<span class="token operator">:</span> <span class="token string">'destroyApp()'</span><span class="token punctuation">,</span>
      options<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> disallowedMethods<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'destroyApp'</span><span class="token punctuation">,</span> <span class="token string">'resetAll'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      errors<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          message<span class="token operator">:</span> <span class="token string">'dont call this function'</span><span class="token punctuation">,</span>
          type<span class="token operator">:</span> <span class="token string">'Identifier'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      output<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment">// 新增了這行</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      code<span class="token operator">:</span> <span class="token string">'printError()'</span><span class="token punctuation">,</span>
      options<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> disallowedMethods<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'printError'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      errors<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          message<span class="token operator">:</span> <span class="token string">'dont call this function'</span><span class="token punctuation">,</span>
          type<span class="token operator">:</span> <span class="token string">'Identifier'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      output<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment">// 新增了這行</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這邊的 <code>output</code> 指的是「經過 quick fix 修正過後，預期的程式碼長怎麼樣」，因為我們會把整段程式碼移除掉的緣故，所以 <code>output</code> 會什麼都沒有。</p>
<p>接著就到了快樂的觀察 AST 時間了，來觀察一下我們想要刪除的是哪個 node？</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gtd6ns1doyj61nl0u0jwb02.jpg" alt="截圖 2021-08-11 下午9.23.08"></p>
<p>以一開始的直覺來說，應該會想刪除掉的是 <code>CallExperssion</code> ，因為是要移除掉 function call，這想法也很合理，不過這邊會發現只要在程式碼中加個分號：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gtd728pmp3j61ld0u043v02.jpg" alt="截圖 2021-08-11 下午9.23.23"></p>
<p>就發現 <code>CallExperssion</code> 沒有包含那個分號，如果我們使用 <code>fixer.remove</code> 的話，就只會移除掉 function call 而留下分號了，所以這邊預期要移除掉的會是 <code>ExpressionStatement</code>。</p>
<p>但要怎麼選擇到 ExpressionStatement？畢竟我們在剛剛使用 selector 選擇 node 的時候是 <code>CallExpression &gt; Identifier</code>，選擇到的 node 都會是最深處的 <code>Identifier</code>，那要如何選擇到更上層的 node 呢？假如我們 console 出目前的 node 的話，可以看到這樣的內容：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008i3skNgy1gtd77ntskzj60pe0miq5c02.jpg" alt="截圖 2021-08-11 下午10.04.03"></p>
<p><code>Identifier</code> 這個 node 當中會包含 <code>parent</code> 這個 property，而 <code>parent</code> 就是它上一層的 <code>CallExperssion</code>，<code>CallExpression</code> 當然也會有屬於它自己的 parent， <code>CallExpression</code> 的 parent 就會指向 <code>ExpressionStatement</code>，而這就是我們想要刪除的 node。</p>
<p>所以關於 fixer 的程式碼會寫成這樣：</p>
<p><a href="https://astexplorer.net/#/gist/1712e379b79c3d2ed053a1def505305c/be022a675e6451e190472618b47458fc55054ea3">AST Explorer - Fixer</a></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    docs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      description<span class="token operator">:</span> <span class="token string">"don't call this function out of test file"</span><span class="token punctuation">,</span>
      category<span class="token operator">:</span> <span class="token string">'Fill me in'</span><span class="token punctuation">,</span>
      recommended<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    fixable<span class="token operator">:</span> <span class="token string">'code'</span>
    schema<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        type<span class="token operator">:</span> <span class="token string">'object'</span><span class="token punctuation">,</span>
        properties<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          disallowedMethods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            type<span class="token operator">:</span> <span class="token string">'array'</span><span class="token punctuation">,</span>
            items<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
              type<span class="token operator">:</span> <span class="token string">'string'</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            minItems<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            uniqueItems<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token string">'CallExpression > Identifier'</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> disallowedMethods <span class="token operator">=</span> context<span class="token punctuation">.</span>options<span class="token punctuation">.</span>length
          <span class="token operator">?</span> context<span class="token punctuation">.</span>options<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>disallowedMethods
          <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

        <span class="token keyword">const</span> isDisallowed <span class="token operator">=</span> disallowedMethods<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>name<span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>isDisallowed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          context<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            node<span class="token punctuation">,</span>
            message<span class="token operator">:</span> <span class="token string">'dont call this function'</span><span class="token punctuation">,</span>
            <span class="token function-variable function">fix</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fixer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              <span class="token keyword">return</span> fixer<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span>  <span class="token comment">// 這行！刪除掉 ExpressionStatement</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這樣就大功告成了！我們自己寫的 ESLint Rule 也具備 quick fix 的功能了。</p>
<h2 id="結尾"><a href="#結尾" class="headerlink" title="結尾"></a>結尾</h2><p>有一陣子還會搞混 Prettier 和 ESLint 的功用，畢竟他們在 coding style 的功能上是有部份重疊的，但經過這次研究發現 ESLint 更重要的價值在於提前發現可能的錯誤，它是一個邊寫邊幫你測試程式、檢查錯誤的工具，無法想像如果少了 ESLint 平常的開發會有多不便，專案當中一定也有些邏輯是屬於那個專案獨有的邏輯，這就是個很好去客製 ESLint Rule 時候，減少心智的負擔，交給工具自動去處理。</p>
<p>當初也沒料到自己會想研究這個主題，畢竟抽象語法樹耶聽起來就非常高端（不是在講疫苗），八成是我半輩子也理解不來的東西，但經過簡單的理解以後，雖然對於真正 parser 解析的細節依然不是很清楚，但至少理解了基本運作，AST 也不再恐怖。</p>
<p>似乎至今為止學習一門新知都是這樣，剛開始覺得喔幹我好像是個智障喔，為何什麼都聽不懂？？但耐著性子慢慢理解總會越聽越明白，這種從一無所知到漸漸理解，從自我懷疑到越學越有趣，並且實際產出成文章的過程大概就是學習新技術最好玩的地方吧。</p>
<p>可以的話，希望後續還能補個番外篇，講述關於 Visitor Pattern 的概念及實際應用範例。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><p><a href="https://eslint.org/docs/developer-guide/working-with-rules">Working with Rules</a></p>
</li>
<li><p><a href="https://frontendmasters.com/courses/linting-asts/">Code Transformation and Linting with ASTs</a></p>
</li>
<li><p><a href="https://blog.techbridge.cc/2021/03/20/write-your-own-eslint-plugin/">寫一個簡單堪用的 ESLint plugin</a></p>
</li>
<li><p><a href="https://blog.techbridge.cc/2018/09/22/visit-ast-with-babel-plugin/">透過製作 Babel-plugin 初訪 AST</a></p>
</li>
<li><p><a href="http://obkoro1.com/web_accumulate/accumulate/tool/ESLint%E6%8F%92%E4%BB%B6.html#%E6%89%8B%E6%91%B8%E6%89%8B%E6%95%99%E4%BD%A0%E5%86%99%E4%B8%AAeslint%E6%8F%92%E4%BB%B6%E4%BB%A5%E5%8F%8A%E4%BA%86%E8%A7%A3eslint%E7%9A%84%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86">手摸手教你写个ESLint插件以及了解ESLint的运行原理</a></p>
</li>
<li><p><a href="https://itnext.io/ast-for-javascript-developers-3e79aeb08343">AST for JavaScript developers</a></p>
</li>
<li><p><a href="https://www.twilio.com/blog/abstract-syntax-trees">ASTs - What are they and how to use them</a></p>
</li>
<li><p><a href="https://blog.bitsrc.io/what-is-an-abstract-syntax-tree-7502b71bde27">What is an Abstract Syntax Tree</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>技術</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>Functional-Light JavaScript - Closure</title>
    <url>/2021/02/07/Functional-Light-JavaScript-Closure/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此為 frontend master 的 <a href="https://frontendmasters.com/courses/functional-javascript-v3/">Functional-Light JavaScript, v3</a> 的課程筆記，這篇講的是 functional programming 中 closure 的應用，像是 memoization、partial application、curry，以及在 functional programming 中使用 closure 要特別注意的地方。</p>
<p>內容不完全和課程編排相同，單純是個人消化過後的編排。</p>
<p>因為剛開始學 functional programming 的緣故，內容、觀念可能會有諸多錯誤，如有發現錯誤麻煩不吝指教，感謝！</p>
<span id="more"></span>

<h2 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h2><p>Closure 在 Functional Programming 是很重要的，因為在 FP 當中會很常使用到 Closure，必須對 Closure 有足夠的了解才能進行下去，Kyle 對 Closure 的定義只有這句話：</p>
<blockquote>
<p>Closure is when a function “remembers” the variables around it even when that function is executed elsewhere</p>
</blockquote>
<p>來看一段 Closure 的程式碼：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">makeCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">++</span>counter
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">makeCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
<span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>
<span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>相信有寫過 JavaScript 並且有聽過 Closure 的人應該都對這種例子頗為熟悉的，在 <code>makeCounter</code> 執行完後，理論上 <code>counter</code> 應該要被 GC 回收才對，但因為 Closure 的緣故 ，<code>counter</code> 的值仍然被記著，每當執行 <code>c</code> 的時候，就會增加 <code>counter</code> 的值。</p>
<p>這個時候有個問題：「<code>c</code> <strong>是一個 pure function 嗎？</strong>」</p>
<p>答案不是，因為<code>c</code> 每次執行的 output 都不一樣；但 closure 在 Functional Programming 是可以被接受的，只是要注意必須使用到 non-mutating value。</p>
<p>接著來看另一個例子：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmff9kgil7j316o0g4aen.jpg" alt="截圖 2021-01-07 下午8.51.24"></p>
<p>為什麼<code> one</code> 裡面的 <code>fn</code>在<code> unary</code> 執行完之後仍然還存在呢？原因也是因為 Closure。</p>
<p>再來看另一個例子：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmffbh4fzzj316i0ecjum.jpg" alt="截圖 2021-01-07 下午8.53.13"></p>
<p>這也是因為 Closure，而導致 <code>addAnother</code> 在執行結束後仍然可以使用到 <code>z</code> 。</p>
<p>所以嚴格來說，我們這兩個例子的 function，也是用到外部的 variable 了對吧？的確是，看似是一個 NoNoNo 的舉動，但因為使用到了不會被改變的 variable，形成了安全、可以被信賴的 pure function。</p>
<h2 id="Closure-Exercise"><a href="#Closure-Exercise" class="headerlink" title="Closure Exercise"></a>Closure Exercise</h2><p>接下來看看練習題，要求是寫出一個 <code>strBuilder</code> 的 function，通關條件是可以讓下面的 console.log 都回傳 true。</p>
<p>注意 <code>strBuilder</code> 這個 function 在 input 為 string 的時候，會累加字串；等到沒有 input 直接執行的時候，會回傳剛剛累加的結果。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">strBuilder</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> hello <span class="token operator">=</span> <span class="token function">strBuilder</span><span class="token punctuation">(</span><span class="token string">'Hello, '</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> kyle <span class="token operator">=</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">'Kyle'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> susan <span class="token operator">=</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">'Susan'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> question <span class="token operator">=</span> <span class="token function">kyle</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> greeting <span class="token operator">=</span> <span class="token function">susan</span><span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">strBuilder</span><span class="token punctuation">(</span><span class="token string">'Hello, '</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'Kyle'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Hello, Kyle.'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Hello, '</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">kyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Hello, Kyle'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">susan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Hello, Susan'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>question <span class="token operator">===</span> <span class="token string">'Hello, Kyle?'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting <span class="token operator">===</span> <span class="token string">'Hello, Susan!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="錯誤範例"><a href="#錯誤範例" class="headerlink" title="錯誤範例"></a>錯誤範例</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">strBuilder</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> v <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      str <span class="token operator">+=</span> v
      <span class="token keyword">return</span> next
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> str
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> hello <span class="token operator">=</span> <span class="token function">strBuilder</span><span class="token punctuation">(</span><span class="token string">'Hello, '</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> kyle <span class="token operator">=</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">'Kyle'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> susan <span class="token operator">=</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">'Susan'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> question <span class="token operator">=</span> <span class="token function">kyle</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> greeting <span class="token operator">=</span> <span class="token function">susan</span><span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Hello, KyleSusan?!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這個版本的錯誤是什麼？錯誤源自於我們 mutate 了 <code>str</code>，所以當 <code>hello</code> 被執行，又或者後續的 <code>susan</code> 、<code>kyle</code>被執行的時候，都會把 str 的值繼續累加進去，等於是我們一直在 mutate <code>strBuilder</code> 這個 scope 的 <code>str</code> ，無論是在 <code>hello</code>、 <code>kyle</code> 、<code>question</code> 或其他都是。</p>
<h3 id="正確範例"><a href="#正確範例" class="headerlink" title="正確範例"></a>正確範例</h3><p>那修改後的版本應該要長怎樣？</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">strBuilder</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> v <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token function">strBuilder</span><span class="token punctuation">(</span>str <span class="token operator">+</span> v<span class="token punctuation">)</span> 
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> str
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這個範例和上一個不同在哪？在於每次 return 的是 <code>setBuilder</code> 執行後的結果！而 <code>setBuilder</code> 被傳入的是什麼值呢？是上一次執行 <code>setBuilder</code> 的 <code>str</code> 和上一次 <code>next</code> 被傳入的 <code>v</code>！</p>
<p>舉例來說：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">strBuilder</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> v <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token function">strBuilder</span><span class="token punctuation">(</span>str <span class="token operator">+</span> v<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> str
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">strBuilder</span><span class="token punctuation">(</span><span class="token string">'Hello, '</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 'Hello, test'</span>

<span class="token comment">/*
  1. 第一次 setBuilder 被傳入 'Hello, ', 並回傳了 next function
  2. 第二次 next 被傳入 'test'，next 記得 str 是 'Hello, '，
     'Hello, ' 和 'test' 相加後變成 'Hello, test' 
  3. 'Hello, test' 傳入 setBuilder，執行後回傳 next function
  4. 最後一次沒有傳入 string，next 直接回傳 str，也就是 'Hello, test'
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也就是說，因為每次 <code>strBuilder</code> 都形成了一個新的閉包，這次的 str 和上一次的 str 是不同的，我們根本沒有 mutate <code>str</code>，我們只是取得 <code>str</code> 的值，和 <code>v</code> 相加之後，當作 argument 傳進去而已，也因為這樣達到了 pure function 的結果。</p>
<p>和 recursion 其實有點像，但又不算是 recursion。</p>
<h3 id="重點在哪？"><a href="#重點在哪？" class="headerlink" title="重點在哪？"></a>重點在哪？</h3><p>講這麼多，這段 Closure 的重點就在於 Kyle Simpson 說的這段話：</p>
<blockquote>
<p>The key takeaway here is that if you’re going to use closure in functional programming, you have to make sure you’re closing over non-changing, non mutating value.</p>
</blockquote>
<p>當你使用到 Closure 的時候，就要特別去注意使用到的 value 是不是 non mutating value，如果在 Closure 的過程中有 mutate variable，那就不是很 ok，因為會失去 pure function 的優勢，進而更容易產生非預期的 bug。</p>
<h2 id="Lazy、Eager、Memoization"><a href="#Lazy、Eager、Memoization" class="headerlink" title="Lazy、Eager、Memoization"></a>Lazy、Eager、Memoization</h2><h3 id="Lazy"><a href="#Lazy" class="headerlink" title="Lazy"></a>Lazy</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">repeater</span><span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">allTheAs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token function">repeater</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

<span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// AAAAAAAAAA</span>
<span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// AAAAAAAAAA</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這段 code 裡面，真正計算出 10 個 A 的地方，是在 line7 還是 line 9 呢？答案是 line9，而這個時機點影響到了一些事情。</p>
<p>lazy(defer) 很有趣的地方在於它延後了真正執行的時間，以就是真正製造出 10 個 A 的時機，比起在 line7 就得到結果，他把結果延後到了 line9。</p>
<p>可以注意的是，我們這時候 closure 的對象是 <code>count</code>。</p>
<table>
<thead>
<tr>
<th>Pros</th>
<th>Cons</th>
</tr>
</thead>
<tbody><tr>
<td>如果我們不確定執行的時機點，假設只有真正 10% 會需要這個 function，那如果沒有 defer 的話，90% 的執行都是浪費的，所以 defer 可以讓我們更精準的在這 10% 才執行。</td>
<td>壞處就是每次 function call 的時候，我們都會重複計算一次，如果他是要被 call 很多次的 function，那顯然用 lazy 是很不划算的。</td>
</tr>
</tbody></table>
<h3 id="Eager"><a href="#Eager" class="headerlink" title="Eager"></a>Eager</h3><p>那有沒有辦法計算一次，之後都用計算過後的值就好呢？有，就是 Eager。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">repeater</span><span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">allTheAs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> str
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token function">repeater</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

<span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// AAAAAAAAAA</span>
<span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// AAAAAAAAAA</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>和先前不同，我們在 line8 ，<code>const A = repeater(10)</code> 的時候就把 10 個 A 給製造出來了，這個做法叫做 eager，當 function call 的時候就製造 A，沒有推遲這個任務。</p>
<p>我們這時候 closure 的是哪個東西呢？是 <code>str</code> 。</p>
<table>
<thead>
<tr>
<th>Pros</th>
<th>Cons</th>
</tr>
</thead>
<tbody><tr>
<td>好處是我們做了 cache，整個 function 只需要計算一次而已，當之後 function 不斷被 call 的時候，拿的都只是計算完後的結果！</td>
<td>壞處是如果這個 function 從來沒被 call 呢？那我們就白做工了。</td>
</tr>
</tbody></table>
<h3 id="Memoization"><a href="#Memoization" class="headerlink" title="Memoization"></a>Memoization</h3><p>可以發現上述的 <code>Lazy</code> 、<code>Eager</code> 發現到一件事，那就是兩者都有 trade off。</p>
<p>那有沒有辦法可以同時兼顧兩者的優點呢？在真正 call function 之前我不會進行計算，而如果之後想要取得相同的 output，這個 function 也只會計算一次，其他次都是拿到計算過的舊值，像是 cache 拿取值那樣，有辦法嗎？</p>
<p>有的，那就是 <code>Memoization</code>，看看下面這段 code：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">repeater</span><span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> str<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">allTheAs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> 
    <span class="token keyword">return</span> str
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token function">repeater</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

<span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// AAAAAAAAAA - 第一次 function call 進行計算</span>
<span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// AAAAAAAAAA - 之後都使用 cache</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這技巧就叫 <code>memoization</code> ，我們只有在 <code>str</code> 是 undefined 的時候，也就是第一次 call 的時候計算，之後 call 這個 function 就是從舊的值裡面取得，是個雙贏！讚拉！</p>
<p>那這段 code 有沒有什麼疑慮呢？有的，那就是 ——  <strong>這段 code 算不算 pure 呢？</strong></p>
<p>我們改了 <code>str</code>，<code>str</code> 從 undefined 被 mutate 成了 10 個 A，所以算 impure 對嗎？</p>
<p>但回想過去 pure function 的一段話：</p>
<blockquote>
<p>A pure function call is characterized by given the same input, it always produce the same output.</p>
</blockquote>
<p>pure function 無論 call 幾次，給它相同的 input，就會得到相同的 output，<code>A</code> 這個 function 有達到這個要求，所以它是 pure function 囉？</p>
<p>Kyle 這邊給的說法類似於「技術上來說它算 pure，但 reader 會認為有 impure 的意味」（這是我的解讀）Kyle 在這邊給的解法如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">repeater</span><span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">memoization</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">allTheAs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// memoization 來自 utility library</span>
    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token function">repeater</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

<span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// AAAAAAAAAA</span>
<span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// AAAAAAAAAA</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>透過大部分 functional utility library 都有的 <code>memoization</code> 來幫助自己的 function 達到 pure 的效果，修改過後的 function 相比剛剛的確是更 pure 了對吧～雖然我自己看完是有點「嗯？嗯…」的黑人問號。</p>
<p>說到這裡，既然 <code>memoization</code> 這麼好用，那我乾脆把全部的 function 都包上就好啦！計算的值就都可以被記下來了，好像很讚喔？</p>
<p>NoNoNo，<code>memoization</code> 背後的代價在於會佔用 memory，假設你每次 call 這個 function，都會給予不同的 input，然後還會 call 好幾次，這背後的代價是會佔用更多的 memory；所以 <code>memoization</code> 最適合的應用場景在於「<strong>會 call 好幾次同樣 function，而每次都會給予相同的 input</strong>」</p>
<h3 id="Memoization-實作"><a href="#Memoization-實作" class="headerlink" title="Memoization 實作"></a>Memoization 實作</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">memoize</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">memo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token comment">// serialize</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>概念上很單純，先傳入一個 function，接著會回傳一個 <code>memo</code> function 接受參數。line4 做的事情是 serialize，當 cache 裡面沒有值，也就是沒有計算過的話，那就進行計算，並且賦予 <code>cache[key]</code> 計算過後的值；啊如果有計算過的話，那就直接 return cache 的 value。</p>
<p>關於 Ramda 的實作可以看 <a href="https://github.com/ramda/ramda/blob/master/source/memoizeWith.js">Ramda - memoizeWith</a>，會發現實作概念上幾乎是一樣的。</p>
<p>另外要特別注意的是，memoize 的優點建立在於 function 是 pure 的，因為你能夠確保同樣的 input 會得到同樣的 output，才能夠透過傳入的 input 決定要不要進行計算。</p>
<h2 id="Partial-Application-amp-Curry"><a href="#Partial-Application-amp-Curry" class="headerlink" title="Partial Application &amp; Curry"></a>Partial Application &amp; Curry</h2><p>假設今天有一個 <code>ajax</code> 的 function，可以 call API 取得資料，程式碼長得像這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*....*/</span> <span class="token punctuation">&#125;</span>

<span class="token function">ajax</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_API</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> renderCustomer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>看起來 ok，但還有改進的空間，比如 <code>CUSTOMER_API</code> 是 hard code，好像可以隱藏起來，另外直接 call <code>ajax</code> 也不是那麼語意化，所以可以改成這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*....*/</span> <span class="token punctuation">&#125;</span>

<span class="token function">ajax</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_API</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> renderCustomer<span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_API</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> cb<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> renderCustomer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>實際上就是宣告一個 <code>getCustomer</code> function，讓它更語意化，再省略掉 <code>CUSTOMER_API</code> 這個比較多餘的細節，增加可讀性。</p>
<p>要再更細節、更語意化還能改成這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*....*/</span> <span class="token punctuation">&#125;</span>

<span class="token function">ajax</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_API</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> renderCustomer<span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_API</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> cb<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> renderCustomer<span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">getCurrentUser</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ajax(CUSTOMER_API, &#123; id: 1 &#125;, renderCustomer)</span>
  <span class="token keyword">return</span> <span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> cb<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token function">getCurrentUser</span><span class="token punctuation">(</span>renderCustomer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>看起來更語意化了，但可以注意到 line12 有一行註解，這行執行的結果其實和 line13 一模一樣，但為什麼選擇用 line13 呢？原因是這樣 <code>getCurrentUser</code> 和 <code>getCustomer</code> 的連結上就更明顯了，如果單純是 line12 和 line13 相比，line13 看起來的確是更語意化的對吧。</p>
<p>但如果每次都要這麼麻煩好像也是很搞剛，因此之後的章節會更簡化這段流程，用上 partial application、curry 的技巧。</p>
<h3 id="Partial-Application"><a href="#Partial-Application" class="headerlink" title="Partial Application"></a>Partial Application</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*....*/</span> <span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> getCustomer <span class="token operator">=</span> <span class="token function">partial</span><span class="token punctuation">(</span>ajax<span class="token punctuation">,</span> <span class="token constant">CUSTOMER_API</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> getCurrentUser <span class="token operator">=</span> <span class="token function">partial</span><span class="token punctuation">(</span>getCustomer<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> renderCustomer<span class="token punctuation">)</span>
<span class="token function">getCurrentUser</span><span class="token punctuation">(</span>renderCustomer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這是 <code>partial</code> 的基礎用法，透過 <code>partial</code> 傳入要執行的 function，以及想要先使用到的哪幾個 inputs，剩下的 parameter 傳入的時機被延後了，等到需要呼叫的時候再傳入。</p>
<p>在「Functional-Light JS」的書裡面有關於 <code>partial</code> 的實作</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span><span class="token operator">...</span>presetArgs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">partiallyApplied</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>laterArgs</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span> <span class="token operator">...</span>presetArgs<span class="token punctuation">,</span> <span class="token operator">...</span>laterArgs <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Curry"><a href="#Curry" class="headerlink" title="Curry"></a>Curry</h3><p>再來就是 Curry 了，這應該就是大多數人都聽過的技巧，名字超有記憶點，來由也挺有趣的，原因是 Curry 的發明者叫做 Haskell Curry。</p>
<p>Curry 相較 Partial Application 更普遍，但其實他們挺像的，做的事情都是 specialized function，所以差不多就是表親關係啦。</p>
<p>如果要把 <code>ajax</code> 這個 function 寫成 curry 的模式，會變成這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">getCb</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*...*/</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">ajax</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_API</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>renderCustomer<span class="token punctuation">)</span>

<span class="token keyword">var</span> getCustomer <span class="token operator">=</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_API</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> getCurrentUser <span class="token operator">=</span> <span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但這樣其實有點麻煩，有沒有更方便的辦法呢？有，通常 functional utility library 也會提供叫做  <code>curry</code> 的 function，比如要是使用 Ramda ˇ的話，使用起來就會變成這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> curriedAjax <span class="token operator">=</span> <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">curry</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*...*/</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> getCustomer <span class="token operator">=</span> <span class="token function">curriedAjax</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_API</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> getCurrentUser <span class="token operator">=</span> <span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>關於 curry 的實作，Functional-Light JS 的書裡也有，實作程式碼大概會長這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>arity <span class="token operator">=</span> fn<span class="token punctuation">.</span>length</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">nextCurried</span><span class="token punctuation">(</span><span class="token parameter">prevArgs</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">curried</span><span class="token punctuation">(</span><span class="token parameter">nextArg</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token operator">...</span>prevArgs<span class="token punctuation">,</span> nextArg <span class="token punctuation">]</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">>=</span> arity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span> <span class="token operator">...</span>args <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">nextCurried</span><span class="token punctuation">(</span> args <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="strict-currying-amp-loose-currying"><a href="#strict-currying-amp-loose-currying" class="headerlink" title="strict currying &amp; loose currying"></a>strict currying &amp; loose currying</h3><p>另外要提到的另一件事情是，curry 其實有分 <code>strict currying</code> 和 <code>loose currying</code>，使用起來的差別可以看這段程式碼：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> curriedAjax <span class="token operator">=</span> <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">curry</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*...*/</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span>

<span class="token comment">// strict currying</span>
<span class="token function">curriedAjax</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_API</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>renderCustomer<span class="token punctuation">)</span>
<span class="token comment">// loose currying</span>
<span class="token function">curriedAjax</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_API</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>renderCustomer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>看到當中的差別了嗎？<code>strict currying</code> 一次 function call 只能傳一個 input，如果你要傳更多 input，那就要多一次 function call；<code>loose currying</code> 則是能夠在 function call 中自由的傳多個 input，也就是說一次傳一個或多個 arguments 都可以。</p>
<p>在 Haskell 中每個 function 都是 curry 的，而且都遵照 <code>strict curring</code> 的規則走，不能一次傳多個 arguments；但以目前多數 JavaScript functional utility library 來說，都是 <code>loose currying</code> ，原因應該單純就是方便，畢竟如果每多一個 argument 就要多一次 function call 也是有點惱人的。</p>
<h2 id="Changing-Function-Shape-with-Curry"><a href="#Changing-Function-Shape-with-Curry" class="headerlink" title="Changing Function Shape with Curry"></a>Changing Function Shape with Curry</h2><p>接下來要提到 Curry 的一大妙用了，首先看看這段程式碼：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">&#125;</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">addOne</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到我們給 map 的 function 需要再宣告一個 <code>addOne</code> 的 function，那為什麼我們需要這樣做，而而不是直接把 <code>add</code> 給 map 就好了呢？比如像是這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">&#125;</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 目前沒辦法這樣做</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>原因是 <strong>function 的 shape 不一樣</strong>（這也是為什麼 function shape matters），map 期待的 function 是 unary 的，而我們的的 <code>add</code> 是 binary 的，所以才造成我們必須要宣告 <code>addOne</code> 的原因。</p>
<p>那有沒有什麼辦法可以簡化這段 code，解決這個問題呢？有！就是 <code>curry</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">&#125;</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">addOne</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>看到妙用了嗎？我們利用 <code>curry</code> 改變了 function 的 shape，原本是 binary 的 <code>add</code> ，現在被改造成了 unary 了，也因此被改成 point free 的 style。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://frontendmasters.com/courses/functional-javascript-v3/">Functional-Light JavaScript, v3</a></li>
<li><a href="https://ramdajs.com/docs/#curry">Ramda - curry</a></li>
<li><a href="https://github.com/ramda/ramda/blob/master/source/memoizeWith.js">Ramda - memoizeWith</a></li>
</ul>
]]></content>
      <categories>
        <category>筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Functional Programming</tag>
        <tag>frontend master</tag>
      </tags>
  </entry>
  <entry>
    <title>Functional-Light JavaScript - Point Free</title>
    <url>/2021/02/07/Functional-Light-JavaScript-Point-Free/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此為 frontend master 的 <a href="https://frontendmasters.com/courses/functional-javascript-v3/">Functional-Light JavaScript, v3</a> 的課程筆記，這篇講的是 point free，point free 是我在剛接觸 FP 時完全不懂的概念，經過一點時間的接觸後，我想應該有比較了解 point free 的概念了，所以這篇就來稍稍講解什麼是 point free、point free 的好處是什麼。</p>
<p>內容不完全和課程編排相同，單純是個人消化過後的編排。</p>
<p>因為剛開始學 functional programming 的緣故，內容、觀念可能會有諸多錯誤，如有發現錯誤麻煩不吝指教，感謝！</p>
<span id="more"></span>

<h2 id="什麼是-Point-Free？"><a href="#什麼是-Point-Free？" class="headerlink" title="什麼是 Point Free？"></a>什麼是 Point Free？</h2><p>根據維基百科所說：</p>
<blockquote>
<p>Tacit programming (point-free programming) is a programming paradigm in which a function definition does not include information regarding its arguments, using combinators and function composition […] instead of variables.</p>
</blockquote>
<p>Kyle Simpson 則是講的更簡略一點：</p>
<blockquote>
<p>point free definition is defining a function without needing to defining its point, aka, its inputs.</p>
</blockquote>
<p>point 指的是 function 的 input，point free 的字面意思就是你可以不用去定義 function 的 input，那為什麼不用定義呢？因為你在別的地方已經定義了其他 function，透過組合其他 function 就能夠得到新的 function。</p>
<p>所以，point free 就是你不用寫出 function 的參數，簡單的說就是：「point free 沒有在跟你說資料長怎樣的。」</p>
<p>聽起來還是很抽象，所以來舉幾個例子：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 其實可以簡化成</span>
<span class="token keyword">const</span> print <span class="token operator">=</span> console<span class="token punctuation">.</span>log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>為什麼我們能夠這樣簡化呢？因為我們在其他地方定義了 <code>log</code> 這個 function 該做些什麼事情了。</p>
<p>再看看另一個例子：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getServerStuff</span> <span class="token operator">=</span> <span class="token parameter">callback</span> <span class="token operator">=></span> <span class="token function">ajaxCall</span><span class="token punctuation">(</span><span class="token parameter">json</span> <span class="token operator">=></span> <span class="token function">callback</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 以 point free 的方式可以簡化成</span>
<span class="token keyword">const</span> getServerStuff <span class="token operator">=</span> ajaxCall<span class="token punctuation">;</span>

<span class="token comment">// 詳細拆解</span>
<span class="token comment">// this line</span>
<span class="token function">ajaxCall</span><span class="token punctuation">(</span><span class="token parameter">json</span> <span class="token operator">=></span> <span class="token function">callback</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// is the same as this line</span>
<span class="token function">ajaxCall</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// so refactor getServerStuff</span>
<span class="token keyword">const</span> <span class="token function-variable function">getServerStuff</span> <span class="token operator">=</span> <span class="token parameter">callback</span> <span class="token operator">=></span> <span class="token function">ajaxCall</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...which is equivalent to this</span>
<span class="token keyword">const</span> getServerStuff <span class="token operator">=</span> ajaxCall<span class="token punctuation">;</span> <span class="token comment">// &lt;-- look mum, no ()'s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>概念上和前一個例子是一樣的，我們在其他地方定義好了 function、預計要接受幾個 arguments，因此透過原先定義好的 function 組合出新 function 時，就能夠省略 input。</p>
<p>point free 的好處就是可以減少不必要的資訊，因為我們根本不在乎傳入的參數叫什麼名字，怎麼被傳遞，其實我們只在乎會得到什麼結果而已，因此用上 point free 就可以閱讀程式碼時的腦袋負荷。</p>
<p>但 point free 同時也是一把雙刃劍，過度的使用它也可能會讓閱讀者不知道這段程式碼到底在幹嘛，反而造成更多理解上的負擔。（比如上面的程式碼，我剛看的時候就不懂為什麼可以這樣）</p>
<h2 id="Point-Free-Refactor"><a href="#Point-Free-Refactor" class="headerlink" title="Point Free Refactor"></a>Point Free Refactor</h2><p>接著再重構一小段程式碼，試著更熟悉 point free 的模式吧。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> v <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">isEven</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isOdd</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token function">isEven</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這段是很簡單判斷數字是否為奇數或偶數的程式碼，我們怎麼把這邊改成 point-free style 呢？在思考如何改成 point free 以前，有兩個問題要回答：</p>
<ol>
<li>為什麼要另外宣告 isEven？這樣有什麼好處嗎？明明 isOdd 就可以足夠判斷一個數字是奇數或偶數了吧？</li>
<li>為什麼要改成 point free 呢？這樣有什麼好處？現在不就很 ok 了嗎？</li>
</ol>
<h3 id="為什麼要另外宣告-isEven？"><a href="#為什麼要另外宣告-isEven？" class="headerlink" title="為什麼要另外宣告 isEven？"></a>為什麼要另外宣告 isEven？</h3><p>先回答第一個問題，的確是不用另外宣告就可以達成原本目的，畢竟結果不是偶數就是基數嘛。</p>
<p>但可以想想宣告了得到什麼好處，那就是讓 <code>isEven</code> 和 <code>isOdd</code> 產生了聯繫、關係，試想如果單純用 <code>isOdd</code> 來判斷奇偶，那就沒有這層關聯了；但宣告 <code>isEven</code> 時，你可以從程式碼看出它是 <code>isOdd</code> 的相反，並且當需要用到判斷偶數的時候，「某數字是偶數」相比「某數字是奇數的相反」還更好理解對吧！</p>
<h3 id="為什麼要用-point-free？"><a href="#為什麼要用-point-free？" class="headerlink" title="為什麼要用 point free？"></a>為什麼要用 point free？</h3><p>再來是第二個問題，我們直接來看改完後的 code：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">complement</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">negated</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> v <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> isEven <span class="token operator">=</span> <span class="token function">complement</span><span class="token punctuation">(</span>isOdd<span class="token punctuation">)</span>

<span class="token function">isEven</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我們另外宣告了一個叫做 <code>complement</code> 的 function，他可以把原本 function 的執行結果變得相反，比如 <code>isOdd</code> 執行完會是 true，<code>complement </code> 回傳的 function 執行結果會是 false。</p>
<p>改完後的 code 很明顯就可以感受到 point free 的好處了，第一是我們省略了不必要的資訊，在上一段 code 中 <code>isEven</code> 有個參數 <code>v</code> ，但這根本是不必要的資訊，我們根本不在乎 <code>v</code> 是三小對吧，因為我們在乎的只有「傳進來的數字是不是偶數」，改成 point free 後 v 就不見了；第二就是 <code>isEven</code> 和 <code>isOdd</code> 的關聯性變得很 obvious，從上面那段程式碼來說，如果你知道 <code>complement</code>  的含義和用途，你很快就可以知道 <code>isEven</code> 是 <code>isOdd</code> 的相反。</p>
<blockquote>
<p>小補充，Ramda 有提供兩個類似功能的 utils：</p>
<ol>
<li>一個叫做 <a href="https://ramdajs.com/docs/#complement">complement</a>，它預計接收一個 function(我們先稱為 <code>f</code>），並回傳一個 function(我們先稱為 <code>g</code>)，當 <code>f</code> return falsy 的值，<code>g</code> 會 return true；當 <code>f</code> return truthy. 的值，<code>g</code> 會 return false。</li>
<li>另一個叫做 <a href="https://ramdajs.com/docs/#not">not</a>，預計接收的會是一個 Boolean，單純就是把 true 變 false，false 變 true。</li>
</ol>
<p>Kyle Simpson 在這堂課程把上面程式碼的 utils 命名為 <code>not</code> ，我認為會讓用過 Ramda 的人有點混淆，因此將命名改為 <code>complement</code>。</p>
</blockquote>
<h2 id="Point-Free-Exercise"><a href="#Point-Free-Exercise" class="headerlink" title="Point Free Exercise"></a>Point Free Exercise</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">when</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">predicate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">predicate</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token parameter">txt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">printIf</span><span class="token punctuation">(</span><span class="token parameter">shouldPrintIt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldPrintIt</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">output</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">isShortEnough</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">function</span> <span class="token function">isLongEnough</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isShortEnough</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> msg1 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> msg2 <span class="token operator">=</span> msg1 <span class="token operator">+</span> <span class="token string">" World"</span><span class="token punctuation">;</span>

<span class="token function">printIf</span><span class="token punctuation">(</span>isShortEnough<span class="token punctuation">)</span><span class="token punctuation">(</span>msg1<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// Hello</span>
<span class="token function">printIf</span><span class="token punctuation">(</span>isShortEnough<span class="token punctuation">)</span><span class="token punctuation">(</span>msg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printIf</span><span class="token punctuation">(</span>isLongEnough<span class="token punctuation">)</span><span class="token punctuation">(</span>msg1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printIf</span><span class="token punctuation">(</span>isLongEnough<span class="token punctuation">)</span><span class="token punctuation">(</span>msg2<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// Hello World</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這段練習目的是要把 <code>output</code> 、<code>printIf</code>、<code>isLongEnough</code> 三段程式碼重構為 point-free style，並且讓原本 line35 - line38 印出字串的行為不變，也就是 line35 依然會印出 Hello，line38 依然會印出 Hello World。</p>
<p>也就是說經過重構成 point free 後， <code>output</code> 、<code>printIf</code>、<code>isLongEnough</code> 三個 function 的宣告都不會看到參數。</p>
<h3 id="開始前先解釋"><a href="#開始前先解釋" class="headerlink" title="開始前先解釋"></a>開始前先解釋</h3><p>開始前先來搞清楚狀況，知道每個 function 在做什麼，然後原本行為是什麼吧！</p>
<ol>
<li><p><code>output</code>的行為很單純，就是把傳進來的 argument 用 <code>console.log</code> 印出。</p>
</li>
<li><p><code>printIf</code>比較複雜，<code>printIf</code> 會接受一個 <code>shouldPrintIt</code> 的 function 後回傳另一個 function；下一個 function 會接受一個叫 <code>msg</code>的 argument，指的是要印出的訊息，當這個 function 執行之後，會執行 <code>shouldPrintIt</code> ，如果 <code>shouldPrintIt</code> 是 true，那就會使用 <code>output </code>印出 ·msg。</p>
</li>
<li><p><code>isLongEnough</code> 很單純，就是 <code>isShortEnough</code> 執行結果的相反。</p>
</li>
<li><p><code>when</code> 則是作者提供給我們的 utils，待會重構會用到。</p>
</li>
</ol>
<p>以 line35 來說，<code>printIf</code> 傳入了 <code>isShortEnough</code> ，再傳入了 <code>msg1</code>，因此執行的時候，會透過 <code>isShortEnough</code> 檢查傳入的字串 length 是否 &lt;= 5，為 true 的話就印出字串。</p>
<h3 id="一步一步重構"><a href="#一步一步重構" class="headerlink" title="一步一步重構"></a>一步一步重構</h3><p>我們先來看 <code>output</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token parameter">txt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>和我們前面的範例很像，直接重構成這樣就好：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// function output(txt) &#123;</span>
<span class="token comment">//   console.log(txt);</span>
<span class="token comment">// &#125;</span>

<span class="token keyword">const</span> output <span class="token operator">=</span> console<span class="token punctuation">.</span>log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著我們先跳過 <code>printIf</code> ，來看 <code>isLongEnough</code> ：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isShortEnough</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">function</span> <span class="token function">isLongEnough</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isShortEnough</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>有沒有發現和原本的 <code>isOdd</code> 、<code>isEven</code> 很像，所以其實可以如法炮製，透過 <code>complement</code> 重構：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">complement</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">negated</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">isShortEnough</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// function isLongEnough(str) &#123;</span>
<span class="token comment">//   return !isShortEnough(str);</span>
<span class="token comment">// &#125;</span>

<span class="token keyword">const</span> isLongEnough <span class="token operator">=</span> <span class="token function">complement</span><span class="token punctuation">(</span>isShortEnough<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著往下看到 <code>printIf</code> ：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">when</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">predicate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">predicate</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> output <span class="token operator">=</span> console<span class="token punctuation">.</span>log

<span class="token keyword">function</span> <span class="token function">printIf</span><span class="token punctuation">(</span><span class="token parameter">shouldPrintIt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldPrintIt</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">output</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">printIf</span><span class="token punctuation">(</span>isShortEnough<span class="token punctuation">)</span><span class="token punctuation">(</span>msg1<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// Hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果細看 <code>when</code> 這個 function，可以發現到 line2 - line8 的邏輯和 <code>printIf</code> 基本上是一模一樣的，所以舉例來說，如果我們要用 when 達到和 line19 一樣的結果，可以寫成這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">when</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">(</span>isShortEnough<span class="token punctuation">)</span><span class="token punctuation">(</span>msg1<span class="token punctuation">)</span> 
<span class="token comment">// 等同於</span>
<span class="token function">printIf</span><span class="token punctuation">(</span>isShortEnough<span class="token punctuation">)</span><span class="token punctuation">(</span>msg1<span class="token punctuation">)</span> <span class="token comment">// Hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>也就是說 <code>when(output)</code> 和<code>printIf</code> 是一樣的，因此我們可以重構成這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">when</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">predicate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">predicate</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> output <span class="token operator">=</span> console<span class="token punctuation">.</span>log

<span class="token comment">// function printIf(shouldPrintIt) &#123;</span>
<span class="token comment">//   return function(msg) &#123;</span>
<span class="token comment">//     if (shouldPrintIt(msg)) &#123;</span>
<span class="token comment">//       output(msg);</span>
<span class="token comment">//     &#125;</span>
<span class="token comment">//   &#125;;</span>
<span class="token comment">// &#125;</span>

<span class="token keyword">const</span> printIf <span class="token operator">=</span> <span class="token function">when</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>

<span class="token function">printIf</span><span class="token punctuation">(</span>isShortEnough<span class="token punctuation">)</span><span class="token punctuation">(</span>msg1<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// Hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>所以重構後的結果會長成這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">when</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">predicate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">predicate</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">not</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">negated</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> output <span class="token operator">=</span> console<span class="token punctuation">.</span>log

<span class="token keyword">const</span> printIf <span class="token operator">=</span> <span class="token function">when</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">isShortEnough</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> isLongEnough <span class="token operator">=</span> <span class="token function">not</span><span class="token punctuation">(</span>isShortEnough<span class="token punctuation">)</span>

<span class="token keyword">var</span> msg1 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> msg2 <span class="token operator">=</span> msg1 <span class="token operator">+</span> <span class="token string">" World"</span><span class="token punctuation">;</span>

<span class="token function">printIf</span><span class="token punctuation">(</span>isShortEnough<span class="token punctuation">)</span><span class="token punctuation">(</span>msg1<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// Hello</span>
<span class="token function">printIf</span><span class="token punctuation">(</span>isShortEnough<span class="token punctuation">)</span><span class="token punctuation">(</span>msg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printIf</span><span class="token punctuation">(</span>isLongEnough<span class="token punctuation">)</span><span class="token punctuation">(</span>msg1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printIf</span><span class="token punctuation">(</span>isLongEnough<span class="token punctuation">)</span><span class="token punctuation">(</span>msg2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>重構完成！可以發現到原本的 <code>output</code> 、<code>printIf</code>、<code>isLongEnough</code> 三個 function 重構成 point-free style 以後，都看不到它的參數惹，那為什麼能夠辦到這件事呢？因為我們把現有的 function 拼拼裝裝組合成新的 function。</p>
<h2 id="Advanced-Point-Free"><a href="#Advanced-Point-Free" class="headerlink" title="Advanced Point Free"></a>Advanced Point Free</h2><p>這段落會講進階的 point free 技巧，以及會應用到的另一個 FP 技巧，composition。</p>
<p>我們要把先前的 <code>isOdd</code> 改成 point free style，但在此之前，先看幾段程式碼。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">forX</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> x <span class="token operator">%</span> y
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">eq</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">forX</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> x <span class="token operator">===</span> y
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>從這段程式碼我們可以看到， <code>mod</code> 是負責回傳 <code>x % y </code>的餘數； <code>eq</code> 負責判斷 <code>x === y</code> 。於此同時，你可能會注意到，為什麼這邊是從 y 先傳進來，再傳 x 呢？好像很反直覺欸？</p>
<p>Functional Programming 很注重 function 的 shape，除此之外，也很注重參數的順序，順序決定這個 function 有沒有那麼好使用，而這邊先傳 y 進來的好處是什麼呢？讓我們繼續看下去</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">forX</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> x <span class="token operator">%</span> y
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">eq</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">forX</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> x <span class="token operator">===</span> y
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> mod2 <span class="token operator">=</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> eq1 <span class="token operator">=</span> <span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>應該能夠感受到先從 y 傳的好處了對吧？先傳 y 的話，我們就可以先決定 <code>mod</code> 和 <code>eq</code> 部分的邏輯，以 <code>mod</code> 來說，我們能夠先傳 2 進去，並且宣告一個 <code>mod2</code> 的 function，代表傳入 <code>mod2</code> 的數字都回傳除以 2 的餘數；<code>eq</code> 也是如此，<code>eq1</code>代表了會回傳是否與 1 相等的結果，也就是說，如果先寫 <code>y</code> 的話，我們能夠先決定條件，再藉此宣告出更特定、客製化的 function。</p>
<p>接著就可以進入正題了，來動手用 <code>mod2</code> 和 <code>eq1</code> 來改造之前的 <code>isOdd</code> 吧！</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//... mod 和 eq 的宣告就先省略</span>
<span class="token keyword">var</span> mod2 <span class="token operator">=</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> eq1 <span class="token operator">=</span> <span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">eq1</span><span class="token punctuation">(</span><span class="token function">mod2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>發現到一件很酷的事情了嗎？在 <code>isOdd</code>裡面， <code>mod2(x)</code> 執行後的 output，又會馬上傳入 <code>eq1</code> 裡面當作它的 input！</p>
<p>這種執行後的結果，馬上又被傳入另一個 function 當作 input 的作法，就被稱為 <strong>Composition</strong>。</p>
<blockquote>
<p>Take one function’s output, and make the input to another function </p>
</blockquote>
<p>可以發現目前還是沒有到達 point free 的最終目標，那我們要怎麼使用 composition 達到 point free 呢？</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> mod2 <span class="token operator">=</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> eq1 <span class="token operator">=</span> <span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">eq1</span><span class="token punctuation">(</span><span class="token function">mod2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token parameter">fn2<span class="token punctuation">,</span> fn1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">composed</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>
    <span class="token keyword">return</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token function">fn1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> isOdd <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>eq1<span class="token punctuation">,</span> mod2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>酷吧！<code>compose</code> 做了幾件事：</p>
<ol>
<li>接收 fn2、fn1 兩個參數，執行後回傳一個 <code>composed</code> function ，接受一個 <code>x</code> 參數。</li>
<li><code>composed</code> function 傳入 x 後，會先執行 <code>fn1</code> ，<code>fn1</code> 的 output 會傳入 <code>fn2</code> 當作 input</li>
<li>執行完後 return 結果</li>
</ol>
<p>所以 <code>compose</code> 傳入 function 的執行順序是由 「右 -&gt; 左」，以 <code>isOdd</code> 為例子的話，<code>mod2</code> 就是 <code>fn1</code>；<code>eq1</code> 就是 <code>fn2</code>。</p>
<h3 id="思路怎麼運作的？"><a href="#思路怎麼運作的？" class="headerlink" title="思路怎麼運作的？"></a>思路怎麼運作的？</h3><p>看看原本的程式碼：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">eq1</span><span class="token punctuation">(</span><span class="token function">mod2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token parameter">fn2<span class="token punctuation">,</span> fn1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">composed</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>
    <span class="token keyword">return</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token function">fn1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>composed</code> 和 <code>isOdd</code> 的 shape 是一樣的，<code>eq1(mod2(x))</code> 和 <code>fn2(fn1(x))</code> 也是一樣的！</p>
<p>而在最後的最後，我們又能夠發現，<code>eq1</code> 和 <code>eq(1)</code> 、<code>mod2</code> 和 <code>mod(2)</code> 又是一樣的，所以其實也不用另外宣告，最終的結果會長這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token parameter">fn2<span class="token punctuation">,</span> fn1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">composed</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>
    <span class="token keyword">return</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token function">fn1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// var isOdd = compose(eq1, mod2)</span>
<span class="token keyword">var</span> isOdd <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Kyle Simpson 重構完後如此說：</p>
<blockquote>
<p>Those piece are interchangable because they have the same shape. That’s equational reasoning, and equational reasoning is the heart of being able to do point freestyle.</p>
</blockquote>
<p>對於 equational reasoning 有疑惑的人可以參考 <a href="https://jigsawye.gitbooks.io/mostly-adequate-guide/content/ch3.html">第 3 章：Pure Function－單純的幸福</a> ，因為我沒把握把它說明的很清楚哈哈。</p>
<h2 id="Function-Parameter-Order"><a href="#Function-Parameter-Order" class="headerlink" title="Function Parameter Order"></a>Function Parameter Order</h2><p><strong>Function Parameter Order Matters Greatly.</strong></p>
<p>Function 的 parameter 順序很重要，paramter 的順序決定了你這個 function 好用與否。</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmgsnllvduj316m0ei0u6.jpg" alt="截圖 2021-01-09 上午1.08.33"></p>
<p>一般來說，設計 function parameter 的順序會按照「<strong>General -&gt; Specific</strong>」的規則來設計，也就是越通用的會放在越前面的順序，越特定的會放在越後面的順序。</p>
<p>從 <a href="https://ramdajs.com/docs/#map">Ramda map</a> 就可以這個設計 function 的方式，<code>R.map</code>把 function 放前面，array 放後面。</p>
<p>以 Ramda 的 map 設計來說，function 其實是更為 general 的 parameter，比如你可以宣告一個叫 <code>add1</code> 的 function 後放到各處使用到 <code>R.map</code> 的地方；array 則是更 specific、更有變化的內容，因此放在右邊更合理、方便使用。</p>
<p>所以 function parameter order 設計的重點在於，function paramter 由左而右的順序應該要是從最通用的，再到最特定的 paramter。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://frontendmasters.com/courses/functional-javascript-v3/">Functional-Light JavaScript, v3</a> </li>
<li><a href="https://medium.com/%E4%B8%80%E5%80%8B%E5%B0%8F%E5%B0%8F%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E9%9A%A8%E6%89%8B%E7%AD%86%E8%A8%98/javascript-point-free-style-%E5%A6%82%E4%BD%95%E5%B9%AB%E5%8A%A9%E6%8F%90%E9%AB%98%E7%A8%8B%E5%BC%8F%E5%8F%AF%E8%AE%80%E6%80%A7-fe865053a06d">[Javascript] Point Free Style 如何幫助提高程式可讀性</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2017/03/pointfree.html">Pointfree 编程风格指南</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10239709">Functional Programming in JS - Pointfree</a></li>
<li><a href="https://stackoverflow.com/questions/944446/what-is-point-free-style-in-functional-programming">What is “point free” style (in Functional Programming)?</a></li>
<li><a href="https://www.coderbridge.com/series/290918dfd2f34e678c4916d836caf404/posts/e6fa3baf7c984347bf0c664233f748ad">[Day04] Currying, Pointfree, Higher Order Function</a></li>
</ul>
]]></content>
      <categories>
        <category>筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Functional Programming</tag>
        <tag>frontend master</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native v2 - Basic Components</title>
    <url>/2021/03/18/React-Native-v2-Basic-Components/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要轉換跑道學習開發 React Native，目前學習的課程是 Kadi Kraman 的 <a href="https://frontendmasters.com/courses/react-native-v2/">React Native v2</a> ，現在仍然是我學習 React Native 的第一天，這篇主要是關於 React Native 的基本 Components、Styling 等內容的筆記，因為是從 web 轉來寫 app 的原因，所以我都會從 web 的角度來與 app 做比較。</p>
<p>目前比較不習慣的地方大概是 React Native 在 flexbox 的 direction 和 web 不同，希望會越寫越習慣啦。</p>
<p>如果閱讀到這篇文章的話，有些章節會有 Exercise 的章節，建議跟著動手做，因為後續的章節都會藉由 exercise 來做延伸講解。</p>
<p>初學 React Native，概念上應該會有不少錯誤，如果有誤的話也麻煩不吝指正，非常感謝！另外我發現自己 Blog 的 code syntax highlight 很有問題，遇到 jsx 和 tsx 都會醜得不行，還請見諒，有空我會修正 der QQ</p>
<span id="more"></span>

<h2 id="Basic-React-Native-Components"><a href="#Basic-React-Native-Components" class="headerlink" title="Basic React Native Components"></a>Basic React Native Components</h2><p>過去寫 React 的程式碼大概會長得像這樣：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// App.js</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Hello, world!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>首先要 <code>import React from &#39;react&#39;</code>（這點在 React v17 已經不用做了），然後在 Component 當中寫好 JSX 的元素，而這些 JSX 元素其實就是 HTML tag，這也是為什麼上手 JSX 相對容易的關係，因為只是從原本的 HTML 知識再加上一些 JSX 可以使用到的特性。</p>
<p>React Native 也非常相似，不過不太一樣的地方是不能寫 HTML 元素了，而是要使用它提供的 Component，我們來直接看看 code：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// App.js</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> View<span class="token punctuation">,</span> Text <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello, world!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>看起來和 React 有 87% 像，不過有注意到我們使用到了 <code>View</code> 和 <code>Text</code> 兩個 React Native 提供的 Component 了對吧。</p>
<ul>
<li><code>&lt;View&gt;</code> ：就類似於 HTML 當中的 div，當作容器來做使用</li>
<li><code>&lt;Text&gt;</code>： 就類似於 HTML 當中的 p，用於放置文字。</li>
<li><code>&lt;ScrollView&gt;</code> ：因為頁面不會預設你可以進行滾動，所以如果有需要滾動的內容，就可以使用到  <code>ScrollView</code>。</li>
</ul>
<p>React Native v2 的簡報提及的：</p>
<ul>
<li><code>&lt;View&gt;</code> - if you’re already familiar with web development, you can think of <code>&lt;View&gt;</code> as a native equivalent to <code>&lt;div&gt;</code>. It’s a container to use for styling and positioning the elements within.</li>
<li><code>&lt;ScrollView&gt;</code> - pages do not scroll by default. If you have lots of content to display, you can use a <code>ScrollView</code></li>
<li><code>&lt;Text&gt;</code> - the <code>&lt;Text&gt;</code> component is used for displaying, you guessed it, text! In React Native, all text you want to display <em>must</em> be contained in <code>&lt;Text&gt;</code> tags or you’ll have errors.</li>
</ul>
<h3 id="Basic-Components-and-SafeAreaView"><a href="#Basic-Components-and-SafeAreaView" class="headerlink" title="Basic Components and SafeAreaView"></a>Basic Components and SafeAreaView</h3><p>當我們打開 App.js 並輸入以下的內容：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// App.js</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> View<span class="token punctuation">,</span> Text <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello, world!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>會發現到文字整個怪怪的，比如 iPhone 11 的文字會跑到一個詭異的左上角區塊，我們作法可能是增加 padding 來做推擠，但增加 padding 對於每個環境都會適用嗎？沒有，如果你去看看 Android 的 simulator，會發現它自動幫你推了 padding，那怎麼辦呢？</p>
<p><code>&lt;SafeAreaView&gt;</code> for the rescue！我們要做的只是把內容包裹在 <code>&lt;SafeAreaView&gt;</code> 裡面：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// App.js</span>

<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> View<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> SafeAreaView <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello, world!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="Styling"><a href="#Styling" class="headerlink" title="Styling"></a>Styling</h2><h3 id="基礎用法"><a href="#基礎用法" class="headerlink" title="基礎用法"></a>基礎用法</h3><p><a href="https://kadikraman.github.io/react-native-v2/styling">Styling</a></p>
<p><a href="https://eddychang.me/flex-react-native">React Native 中使用 Flexbox 筆記</a></p>
<p>當我們在 React Native 要進行 style 的撰寫時，會使用到 React Native 提供的 <code>StyleSheet</code> ：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  container<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    padding<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>StyleSheet.create</code> 會創建一個經過優化的 style object，其實用起來就像是在 React 裡面使用 style object 那樣，因此我們可以這樣使用：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello, world!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>我們可以注意到這寫法跟寫 Web 差不多，只是在 React Native 裡面並不會寫到 <code>px</code> ，課程裡面說到這是代表 <code>density-independent pixels</code> ，但我也不懂什麼意思，講者說可以把數字的單位看成 px，只是不用寫出來。</p>
<p>另外，如果要用上顏色的話，可以像是這樣寫：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  container<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    backgroundColor<span class="token operator">:</span> <span class="token string">'lavender'</span><span class="token punctuation">,</span>
    padding<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>會發現到顏色的寫法也跟寫 Web 差不多，其他的顏色顯示方法如 hex <code>#ffffff</code> or rgb <code>rgb(255,255,255)</code> or rgba <code>rgba(255,0,0,0.3)</code> 也都能夠使用。</p>
<p>另外，styles 名稱會遵照 camelCase，而不是一般 css 熟悉的 kebab-case。</p>
<p>更多的 style 可以參照 React Native 官方文件：</p>
<ul>
<li><a href="https://reactnative.dev/docs/view-style-props">View style props</a></li>
<li><a href="https://reactnative.dev/docs/text-style-props">Text style props</a></li>
<li><a href="https://reactnative.dev/docs/image-style-props">Image style props</a></li>
</ul>
<h3 id="padding、border"><a href="#padding、border" class="headerlink" title="padding、border"></a>padding、border</h3><p>在開發 web 的時候，如果 padding 像是這樣：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>
  <span class="token property">padding-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token property">padding-left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
  <span class="token property">padding-right</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* 我們會縮寫成這樣：*/</span>

<span class="token selector">.container</span> <span class="token punctuation">&#123;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 10px 20px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>不過在 React Native 不能這樣縮寫，取而代之的是使用 <code>paddingVertical</code>  和 <code>paddingHorizontal</code> 等屬性來處理：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  container<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    paddingVertical<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    paddingHorizontal<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>margin</code> 也是同理，會使用 <code>marginVertical</code> 和 <code>marginVertical</code> 。</p>
<p>還有，border style 在 web 開發的時候會寫成這樣：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #fff<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>但 React Native 不行，一定要寫成這樣：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  container<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    borderWidth<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    borderStyle<span class="token operator">:</span> <span class="token string">'solid'</span><span class="token punctuation">,</span>
    borderColor<span class="token operator">:</span> <span class="token string">'#fff'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="positioning"><a href="#positioning" class="headerlink" title="positioning"></a>positioning</h3><p>React Native 裡都會使用 <strong>flexbox</strong> 來進行排版，不過要特別注意和 web 不同的地方是，web 預設的 <code>flex-direction</code> 會是 <code>row</code> ，但 React Native 預設的 <code>flexDirection</code> 則是 <code>column</code>。</p>
<p>所以如果我們要水平（horizontal）的置中元素：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  container<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    alignItems<span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果要垂直置中當然是使用 <code>justifyContent: &#39;center&#39;</code> 了，另外為了確保元素佔滿了整個畫面的高度，我們也必須加上 <code>flex: 1</code>。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  container<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    flex<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    justifyContent<span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Styled-without-StyleSheet"><a href="#Styled-without-StyleSheet" class="headerlink" title="Styled without StyleSheet"></a>Styled without StyleSheet</h3><p>我們也可以不使用到 <code>StyleSheet</code> 來撰寫 style，直接寫 style object 進去也是沒問題的：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> backgroundColor<span class="token operator">:</span> <span class="token string">'teal'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>

<span class="token comment">/* 上面的 code 和下面是相同的意思 */</span>
<span class="token keyword">const</span> componentStyle <span class="token operator">=</span> <span class="token punctuation">&#123;</span> backgroundColor<span class="token operator">:</span> <span class="token string">'teal'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>componentStyle<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但一般來說不推薦這樣寫，因為 <code>StyleSheet</code> 在背後其實幫忙做了一些優化，比如 cache。除非是有某些 dynamic 的 style 需要處理，才建議使用這種方式來寫 style。</p>
<h3 id="Multiple-styles-in-one-component"><a href="#Multiple-styles-in-one-component" class="headerlink" title="Multiple styles in one component"></a>Multiple styles in one component</h3><p>假如我們有多個 style 想要套用，以下面這段 code 為例子：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> View<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> SafeAreaView<span class="token punctuation">,</span> StyleSheet <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello World</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  container<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    backgroundColor<span class="token operator">:</span> <span class="token string">'pink'</span><span class="token punctuation">,</span>
    alignItems<span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
    justifyContent<span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
    flex<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>假如我們想要把 <code> backgroundColor: &#39;pink&#39;</code> 抽取出去，變成另一個獨立的 class，這時候就可以用到 array 的方式來套用 style：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> View<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> SafeAreaView<span class="token punctuation">,</span> StyleSheet <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">,</span> styles<span class="token punctuation">.</span>pink<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello World</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  pink<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    backgroundColor<span class="token operator">:</span> <span class="token string">'pink'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  container<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    alignItems<span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
    justifyContent<span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
    flex<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>和 web 一樣的地方在於，<strong>比較後面的 style 會覆蓋掉前面的 style</strong>。</p>
<h3 id="Side-note-Styled-Components"><a href="#Side-note-Styled-Components" class="headerlink" title="Side note: Styled Components"></a>Side note: Styled Components</h3><p>另外，寫 styled components 也是沒問題的，我們在 web 的時候會這樣寫：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> StyledDiv <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  background-color: lavender;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>輪到 React Native 的時候，寫起來會有 87% 像：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components/native'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> StyledView <span class="token operator">=</span> styled<span class="token punctuation">.</span>View<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  background-color: lavender;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我們還會發現到，寫起來和 web 幾乎一樣了！除了 css 的命名是使用到 snack-case 以外，連單位都會使用到 px 了，我想這樣的設計就是為了讓寫 web 的人可以更快適應 React Native 的寫法。</p>
<p>詳細的內容也可以參考 <a href="https://styled-components.com/docs/basics#react-native">Styled-Components: React Native</a></p>
<p>不過這門課程主要還是使用 <code>StyleSheet</code> ，因為才剛踏入 React Native 的領域，我也會入境隨俗先不使用 styled-components。</p>
<h2 id="Styling-Exercise"><a href="#Styling-Exercise" class="headerlink" title="Styling Exercise"></a>Styling Exercise</h2><p>這章節要練習的是在 React Native 寫 style，需要完成的畫面如下：</p>
<p><img data-src="https://kadikraman.github.io/react-native-v2/static/8bf2cf7d4947181ef6e527b80fc9fcd6/50675/style-ios.png" alt="React Native Style Exercise"></p>
<p>這章節我寫出來的 code 如下：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> View<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> SafeAreaView<span class="token punctuation">,</span> StyleSheet <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SafeAreaView</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>safeArea<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
          Here are some boxes of different colors
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>text<span class="token punctuation">,</span> styles<span class="token punctuation">.</span>cyan<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Cyan: #2aa198</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>text<span class="token punctuation">,</span> styles<span class="token punctuation">.</span>blue<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Blue: #268bd2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>text<span class="token punctuation">,</span> styles<span class="token punctuation">.</span>magenta<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Magenta: #d33682</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>text<span class="token punctuation">,</span> styles<span class="token punctuation">.</span>orange<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Orange: #cb4b16</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  cyan<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    backgroundColor<span class="token operator">:</span> <span class="token string">'#2aa198'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  blue<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    backgroundColor<span class="token operator">:</span> <span class="token string">'#268bd2'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  magenta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    backgroundColor<span class="token operator">:</span> <span class="token string">'#d33682'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  orange<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    backgroundColor<span class="token operator">:</span> <span class="token string">'#cb4b16'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  text<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    color<span class="token operator">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span>
    textAlign<span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
    paddingHorizontal<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    paddingVertical<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    borderRadius<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    marginBottom<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  title<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    marginBottom<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    fontWeight<span class="token operator">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  container<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    paddingTop<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    paddingHorizontal<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    borderRadius<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    flex<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  safeArea<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    flex<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    flexDirection<span class="token operator">:</span> <span class="token string">'row'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>比較困擾的是 Text 沒辦法用到 <code>borderRadius</code>，可能是哪邊有出錯，就等到下一章節來看看 Kadi Kraman 是如何寫的吧！</p>
<h2 id="Styling-Solution"><a href="#Styling-Solution" class="headerlink" title="Styling Solution"></a>Styling Solution</h2><p><a href="https://kadikraman.github.io/react-native-v2/styling-exercise-solution">Styling Exercise Solution 👀</a></p>
<p>和我的寫法不同的地方是，每個有顏色的文字 Kadi Kraman 都是用 <code>View</code> 去包裹起來，所以最後的寫法會像是：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> View<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> SafeAreaView<span class="token punctuation">,</span> StyleSheet <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>heading<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
          Here are some boxes of different colours
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>box<span class="token punctuation">,</span> styles<span class="token punctuation">.</span>cyan<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Cyan #2aa198</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>box<span class="token punctuation">,</span> styles<span class="token punctuation">.</span>blue<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Blue #268bd2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>box<span class="token punctuation">,</span> styles<span class="token punctuation">.</span>magenta<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Magenta #d33682</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>box<span class="token punctuation">,</span> styles<span class="token punctuation">.</span>orange<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Orange #cb4b16</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  container<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    paddingTop<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
    paddingHorizontal<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  heading<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    fontSize<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    fontWeight<span class="token operator">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span>
    marginBottom<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  text<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    fontWeight<span class="token operator">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span>
    color<span class="token operator">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  box<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    padding<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    borderRadius<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    justifyContent<span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
    alignItems<span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
    marginBottom<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  cyan<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    backgroundColor<span class="token operator">:</span> <span class="token string">'#2aa198'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  blue<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    backgroundColor<span class="token operator">:</span> <span class="token string">'#268bd2'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  magenta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    backgroundColor<span class="token operator">:</span> <span class="token string">'#d33682'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  orange<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    backgroundColor<span class="token operator">:</span> <span class="token string">'#cb4b16'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這樣就可以解決我剛剛沒辦法套用到 border-radius 的問題惹。</p>
<h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h2><p>從上一章節的 code 可以發現到我們可以把每個 box 切出去變成一個 <code>ColorBox</code> component，事不宜遲，馬上就來動手！首先寫出我們的 ColorBox，因為要顯示「文字的顏色」以及接收他的「hex 代碼」，所以我們預計要接受兩個 props，分別是 <code>colorName</code> 及 <code>hexColor</code>：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// ColorBox.tsx</span>

<span class="token keyword">const</span> <span class="token function-variable function">ColorBox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> colorName<span class="token punctuation">,</span> hexColor <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token punctuation">&#123;</span>colorName<span class="token punctuation">&#125;</span><span class="token plain-text">: </span><span class="token punctuation">&#123;</span>hexColor<span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因為寫 TypeScript 的關係，我們接著定義一下 props 的 type：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// ColorBox.tsx</span>

<span class="token comment">/* 新增 type */</span>
<span class="token keyword">type</span> <span class="token class-name">TProps</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  colorName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  hexColor<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">ColorBox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> colorName<span class="token punctuation">,</span> hexColor <span class="token punctuation">&#125;</span><span class="token operator">:</span> TProps</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token punctuation">&#123;</span>colorName<span class="token punctuation">&#125;</span><span class="token plain-text">: </span><span class="token punctuation">&#123;</span>hexColor<span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著我們把剛剛在 App.tsx 寫的 style 搬過來：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">type</span> <span class="token class-name">TProps</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  colorName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  hexColor<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/* 套用 style */</span>
<span class="token keyword">const</span> <span class="token function-variable function">ColorBox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> colorName<span class="token punctuation">,</span> hexColor <span class="token punctuation">&#125;</span><span class="token operator">:</span> TProps</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>box<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token punctuation">&#123;</span>colorName<span class="token punctuation">&#125;</span><span class="token plain-text">: </span><span class="token punctuation">&#123;</span>hexColor<span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/* 把 style 搬過來 */</span>
<span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  box<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    borderRadius<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    padding<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    marginBottom<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    alignItems<span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  text<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    color<span class="token operator">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span>
    fontWeight<span class="token operator">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這時候我們還缺一個東西，就是隨著外面傳進來的 props 來決定 backgroundColor 的功能，因此我們另外在 <code>ColorBox</code> 裡面宣告一個 style object：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">type</span> <span class="token class-name">TProps</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  colorName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  hexColor<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/* 宣告 style object */</span>
<span class="token keyword">const</span> <span class="token function-variable function">ColorBox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> colorName<span class="token punctuation">,</span> hexColor <span class="token punctuation">&#125;</span><span class="token operator">:</span> TProps</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> colorStyle <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    backgroundColor<span class="token operator">:</span> hexColor<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>box<span class="token punctuation">,</span> colorStyle<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token punctuation">&#123;</span>colorName<span class="token punctuation">&#125;</span><span class="token plain-text">: </span><span class="token punctuation">&#123;</span>hexColor<span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  box<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    borderRadius<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    padding<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    marginBottom<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    alignItems<span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  text<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    color<span class="token operator">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span>
    fontWeight<span class="token operator">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這樣就大功告成了！在 App.tsx 重構之後就會變成這樣：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> View<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> SafeAreaView<span class="token punctuation">,</span> StyleSheet <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> ColorBox <span class="token keyword">from</span> <span class="token string">'./components/ColorBox'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SafeAreaView</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>safeArea<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
          Here are some boxes of different colors
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ColorBox</span></span> <span class="token attr-name">colorName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Cyan<span class="token punctuation">"</span></span> <span class="token attr-name">hexColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#2aa198<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ColorBox</span></span> <span class="token attr-name">colorName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Blue<span class="token punctuation">"</span></span> <span class="token attr-name">hexColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#268bd2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ColorBox</span></span> <span class="token attr-name">colorName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Magenta<span class="token punctuation">"</span></span> <span class="token attr-name">hexColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#d33682<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ColorBox</span></span> <span class="token attr-name">colorName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Orange<span class="token punctuation">"</span></span> <span class="token attr-name">hexColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#cb4b16<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  title<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    marginBottom<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    fontWeight<span class="token operator">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  container<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    paddingTop<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    paddingHorizontal<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    borderRadius<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    flex<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  safeArea<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    flex<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    flexDirection<span class="token operator">:</span> <span class="token string">'row'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>看起來變得乾淨整齊許多了對吧！</p>
<h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><p>熟悉 React 的人從上一章節的 code 應該會聯想到：「我好像重複在寫 <code>ColorBox</code> 欸，看起來該用個 <code>map</code> 了吧？」，這是我們在寫 web 時常做的事情。</p>
<p>不過在 React Native 不要這樣做，這是出於效能的考量，因為它並不會做相關的效能優化，假設你有 1000 個 item，它就會試著 render 出這 1000 個，就算有 990 個 item 不在 user 畫面上也是如此，如果 re-render 的話也會把 1000 個 item 重新 render，可想而知這是一件可怕的事情。</p>
<p>因此，我們要使用 React Native 提供的 Component： <code>FlatList</code> 和 <code>SectionList</code></p>
<h3 id="FlatList"><a href="#FlatList" class="headerlink" title="FlatList"></a>FlatList</h3><p><a href="https://reactnative.dev/docs/flatlist">React Native Document - FlatList</a></p>
<p><a href="https://snack.expo.io/@kadikraman/flatlist-example">FlatList Example</a></p>
<p>FlatList 有一堆 option 的 configuration，不過最基本的 props 有三個：</p>
<ul>
<li>data - this is the array of data you want to map over</li>
<li>renderItem - this is a function that is passed the item and its index and will return the individual item component</li>
<li>keyExtractor - this is a function that gets passed an item and its index</li>
</ul>
<p>中文的意思大概是：</p>
<ul>
<li><strong>data</strong>：你想要 map 的 array</li>
<li><strong>renderItem</strong>：會是一個 function，傳進來的 data 會是這個 array，也因此可以透過資料決定要 render 什麼 component。</li>
<li><strong>keyExtractor</strong>：item 的 unique key，相當於 React 裡面的 key。</li>
</ul>
<p>所以以上面的 Example 舉例來說，<code>FlatList</code> 寫起來會像是這樣：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token constant">FOODS</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">'Apples'</span><span class="token punctuation">,</span>
  <span class="token string">'Broccoli'</span><span class="token punctuation">,</span>
  <span class="token string">'Cookies'</span><span class="token punctuation">,</span>
  <span class="token string">'Doritos'</span><span class="token punctuation">,</span>
  <span class="token string">'Eclairs'</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FlatList</span></span>
      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> padding<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token constant">FOODS</span><span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">keyExtractor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">renderItem</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Food</span></span> <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span></span>
    <span class="token punctuation">/></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>比較令我困擾的地方在於 ，<code>renderItem</code> 的 function 接收的是 <code>FOODS</code> 這個 data，因此可以透過解構的方式得到裡面的值；但 <code>keyExtractor</code> function 傳進來的又會是一個一個的 item，有點不太統一。</p>
<h3 id="SectionList"><a href="#SectionList" class="headerlink" title="SectionList"></a>SectionList</h3><p><a href="https://reactnative.dev/docs/sectionlist">React Native Document - SectionList</a></p>
<p><a href="https://snack.expo.io/@kadikraman/sectionlist-example">Sectionlist Example</a></p>
<blockquote>
<p>SectionList is a similar to FlatList, but it allows you to render items in sections with a header item between. The data for the SectionList is still an array, but each array item will need to be an object with a title (a string) and a data (an array) prop.</p>
</blockquote>
<p><code>SectionList</code> 和 <code>FlatList</code> 頗為相似，不太一樣的地方是它可以 render header，另外就是 <code>SectionList</code> 接受的 data 也不一樣，一定要接受放著 object 的 array （object[]），並且 object 的內容必須是 <code>&#123;title: string, data: array&#125;</code> 這樣的格式。</p>
<p>所以用起來會像是這樣：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token constant">FOODS</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'Healthy'</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'Apples'</span><span class="token punctuation">,</span> <span class="token string">'Broccoli'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'Not so Healthy'</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'Cookies'</span><span class="token punctuation">,</span> <span class="token string">'Doritos'</span><span class="token punctuation">,</span> <span class="token string">'Eclairs'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SectionList</span></span>
        <span class="token attr-name">sections</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token constant">FOODS</span><span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">keyExtractor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">renderItem</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Food</span></span> <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>data<span class="token punctuation">.</span>item<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">renderSectionHeader</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> section <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>header<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>section<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span>
        <span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
      <span class="token punctuation">/></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="List-Props"><a href="#List-Props" class="headerlink" title="List Props"></a>List Props</h3><p>除此之外還有很多額外可以使用的 props：</p>
<ul>
<li><a href="https://reactnative.dev/docs/flatlist#itemseparatorcomponent">ItemSeparatorComponent</a>- renders a custom separator between your items. Handy if you have to e.g. render a line or even something dynamic instead of building it into the list items</li>
<li><a href="https://reactnative.dev/docs/flatlist#listemptycomponent">ListEmptyComponent</a> - this is rendered when the <code>data</code> is an empty array or undefined. Saves you from doing conditional rendering manually!</li>
<li><a href="https://reactnative.dev/docs/flatlist#listfootercomponent">ListFooterComponent</a> - renders something at the bottom of the list</li>
<li><a href="https://reactnative.dev/docs/flatlist#listheadercomponent">ListHeaderComponent</a> - renders something at the top of the list</li>
<li><a href="https://reactnative.dev/docs/flatlist#extradata">extraData</a> - the list only gets re-rendered if the <code>DATA</code> changes. It might happen though that what you display depends on some external factors. In this case use the <code>extraData</code> to pass in any variables that should also trigger a re-render when changed</li>
<li><a href="https://reactnative.dev/docs/flatlist#extradata">horizontal</a> - render the list horizontally instead of vertically</li>
<li><a href="https://reactnative.dev/docs/flatlist#extradata">numColumns</a> - render multiple columns</li>
<li><a href="https://reactnative.dev/docs/flatlist#extradata">onEndReached</a> - fires when the user has scrolled to the end of the list. Handy for pagination</li>
</ul>
<h2 id="Lists-Exercise-📝"><a href="#Lists-Exercise-📝" class="headerlink" title="Lists Exercise 📝"></a>Lists Exercise 📝</h2><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">type</span> <span class="token class-name">Colors</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  colorName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  hexCode<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">COLORS</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Base03'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#002b36'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Base02'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#073642'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Base01'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#586e75'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Base00'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#657b83'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Base0'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#839496'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Base1'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#93a1a1'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Base2'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#eee8d5'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Base3'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#fdf6e3'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Yellow'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#b58900'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Orange'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#cb4b16'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Red'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#dc322f'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Magenta'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#d33682'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Violet'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#6c71c4'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Blue'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#268bd2'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Cyan'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#2aa198'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Green'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#859900'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">renderColorBox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> item<span class="token operator">:</span> Colors <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ColorBox</span></span> <span class="token attr-name">colorName</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>colorName<span class="token punctuation">&#125;</span></span> <span class="token attr-name">hexColor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>hexCode<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SafeAreaView</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>safeArea<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
          Here are some boxes of different colors
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FlatList</span></span>
          <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token constant">COLORS</span><span class="token punctuation">&#125;</span></span>
          <span class="token attr-name">renderItem</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>renderColorBox<span class="token punctuation">&#125;</span></span>
          <span class="token attr-name">keyExtractor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>hexCode<span class="token punctuation">&#125;</span></span>
        <span class="token punctuation">/></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ColorBox</span></span> <span class="token attr-name">colorName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Cyan<span class="token punctuation">"</span></span> <span class="token attr-name">hexColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#2aa198<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ColorBox</span></span> <span class="token attr-name">colorName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Blue<span class="token punctuation">"</span></span> <span class="token attr-name">hexColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#268bd2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ColorBox</span></span> <span class="token attr-name">colorName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Magenta<span class="token punctuation">"</span></span> <span class="token attr-name">hexColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#d33682<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ColorBox</span></span> <span class="token attr-name">colorName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Orange<span class="token punctuation">"</span></span> <span class="token attr-name">hexColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#cb4b16<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>值得注意的是我的 <code>renderItems</code> 本來寫成這樣：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">type</span> <span class="token class-name">Colors</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  colorName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  hexCode<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">renderColorBox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> colorName<span class="token punctuation">,</span> hexCode <span class="token punctuation">&#125;</span><span class="token operator">:</span> Colors</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ColorBox</span></span> <span class="token attr-name">colorName</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>colorName<span class="token punctuation">&#125;</span></span> <span class="token attr-name">hexColor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>hexCode<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果 <code>renderItems</code> 會有紅字報錯：</p>
<blockquote>
<p>No overload matches this call.<br>  Overload 1 of 2, ‘(props: FlatListProps&lt;{ colorName: string; hexCode: string; }&gt; | Readonly&lt;FlatListProps&lt;{ colorName: string; hexCode: string; }&gt;&gt;): FlatList&lt;{ colorName: string; hexCode: string; }&gt;’, gave the following error.<br>    Type ‘({ colorName, hexCode }: Colors) =&gt; JSX.Element’ is not assignable to type ‘ListRenderItem&lt;{ colorName: string; hexCode: string; }&gt;’.<br>      Types of parameters ‘__0’ and ‘info’ are incompatible.<br>        Type ‘ListRenderItemInfo&lt;{ colorName: string; hexCode: string; }&gt;’ is missing the following properties from type ‘Colors’: colorName, hexCode<br>  Overload 2 of 2, ‘(props: FlatListProps&lt;{ colorName: string; hexCode: string; }&gt;, context: any): FlatList&lt;{ colorName: string; hexCode: string; }&gt;’, gave the following error.<br>    Type ‘({ colorName, hexCode }: Colors) =&gt; JSX.Element’ is not assignable to type ‘ListRenderItem&lt;{ colorName: string; hexCode: string; }&gt;’.ts(2769)</p>
</blockquote>
<p>參考 <a href="https://stackoverflow.com/questions/52701665/typescript-react-native-flatlist-how-to-give-renderitem-the-correct-type-of-it">TypeScript React Native Flatlist: How to give renderItem the correct type of it’s item? </a>之後，修改成這樣：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token function-variable function">renderColorBox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> item<span class="token operator">:</span> Colors <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ColorBox</span></span> <span class="token attr-name">colorName</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>colorName<span class="token punctuation">&#125;</span></span> <span class="token attr-name">hexColor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>hexCode<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>就沒問題惹，不過因為我也沒有到很熟 TypeScript，所以還不知道為什麼不行 QQ</p>
<h3 id="extra-credit"><a href="#extra-credit" class="headerlink" title="extra credit"></a>extra credit</h3><blockquote>
<p>For extra credit - also display the name of the color in white on the darker colors and in black on the lighter ones!</p>
</blockquote>
<p>暫時無解，想說用三元運算子來決定 style object 要傳入 <code>color: &#39;white</code> 或是 <code>color: &#39;black&#39;</code> ，但好像沒辦法。</p>
<h2 id="Lists-Solution"><a href="#Lists-Solution" class="headerlink" title="Lists Solution"></a>Lists Solution</h2><h3 id="extra-credit-1"><a href="#extra-credit-1" class="headerlink" title="extra credit"></a>extra credit</h3><p>這邊 Kadi Kraman 的解法如下：</p>
<blockquote>
<p>we’ve used a little calculation to adjust text colour for the background colour. There are better algorithms to do this, but this is definitely the shortest: <code>parseInt(props.hexCode.replace(&#39;#&#39;, &#39;&#39;), 16) &gt; 0xffffff / 1.1</code>. Here we essentially get the lightest 10% of the background colors and display black text for these, and white for the rest.</p>
</blockquote>
<p>所以我們的 <code>ColorBox</code> 可以改寫成這樣：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token function-variable function">ColorBox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> colorName<span class="token punctuation">,</span> hexColor <span class="token punctuation">&#125;</span><span class="token operator">:</span> TProps</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> boxColor <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    backgroundColor<span class="token operator">:</span> hexColor<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> textColor <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    color<span class="token operator">:</span>
      <span class="token function">parseInt</span><span class="token punctuation">(</span>hexColor<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0xffffff</span> <span class="token operator">/</span> <span class="token number">1.1</span>
        <span class="token operator">?</span> <span class="token string">'black'</span>
        <span class="token operator">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>box<span class="token punctuation">,</span> boxColor<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>text<span class="token punctuation">,</span> textColor<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token punctuation">&#123;</span>colorName<span class="token punctuation">&#125;</span><span class="token plain-text">: </span><span class="token punctuation">&#123;</span>hexColor<span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://frontendmasters.com/courses/react-native-v2/">React Native, v2</a></p>
]]></content>
      <categories>
        <category>筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>frontend master</tag>
        <tag>React Native</tag>
        <tag>Expo</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native v2 - Forms</title>
    <url>/2021/03/18/React-Native-v2-Form/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要轉換跑道學習開發 React Native，學習的課程是 Kadi Kraman 的 <a href="https://frontendmasters.com/courses/react-native-v2/">React Native v2</a> ，寫這篇筆記的時候是學習 React Native 的第三天，不知不覺到了這個課程的結尾，算是窺探了 React Native 的冰山一角，基本的 Component、簡單的 Navigation、基本的 Form 都在這個課程學到了，未來應該還有超長的路要走，祝我自己一切順利 QQ</p>
<p>話說，React Native 開發上我覺得算是好理解，至少 API 可以看文件，真正讓我感受痛苦的應該是 TypeScript，常常錯誤訊息看半天還是摸不著頭緒，不禁感嘆一袋米要扛幾樓，痛苦歸痛苦，最後還是完成課程惹，感人。</p>
<p>初學 React Native，概念上應該會有不少錯誤，如果有誤的話也麻煩不吝指正，非常感謝！</p>
<span id="more"></span>

<h2 id="Overview-of-Forms-in-React-Native"><a href="#Overview-of-Forms-in-React-Native" class="headerlink" title="Overview of Forms in React Native"></a>Overview of Forms in React Native</h2><p><a href="https://kadikraman.github.io/react-native-v2/forms">Overview of Forms in React Native</a></p>
<p>React Native 使用表單和 web 不同的地方是不用包裹在 <code>&lt;form&gt;</code> 裡面，這章節會簡單介紹幾個 input 如何使用。</p>
<h3 id="TextInput"><a href="#TextInput" class="headerlink" title="TextInput"></a>TextInput</h3><p><code>TextInput</code> 大概是表單中最常用到的 Component，詳細的 API 可以參考：<a href="https://reactnative.dev/docs/textinput">TextInput</a></p>
<p><code>TextInput </code> 基本的四個 props：</p>
<ul>
<li><code>style</code> - adding some padding and a border color for the input to be better visible on the screen. The Text Input has no default styles</li>
<li><code>value</code> - the current value</li>
<li><code>onChangeText</code> - gets called with the new value whenever the user changes the content of the input</li>
<li><code>placeholder</code> - some placeholder text to be displayed when the input is empty</li>
</ul>
<p>稍微玩了一下之後，發現很多 props 都挺有趣的，是平常使用 App 不會發現，因為一切都很直覺，但開始學習開發 App 之後才會注意到的細節。</p>
<p>舉例來說，<code>clearButtonMode=&quot;while-editing&quot;</code> 這個 props 就是有時候輸入內容旁邊會出現的小叉叉按鈕，設置 <code>while-editing</code> 就是只有編輯的時候才會出現。</p>
<p>下面示範簡單的用法：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextInput</span></span>
  <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>input<span class="token punctuation">&#125;</span></span>
  <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>textValue<span class="token punctuation">&#125;</span></span>
  <span class="token attr-name">onChangeText</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>setTextValue<span class="token punctuation">&#125;</span></span>
  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Please input something<span class="token punctuation">"</span></span>
<span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>過程中有發現幾個和 web 不同需要注意的地方：</p>
<ol>
<li>需要先寫好 style，不然不會顯示（Web 會有預設的樣式）</li>
<li>Event handler 在 React 叫 <code>onChange</code>，RN 裡面叫作 <code>onChangeText</code></li>
<li>onChange 在 React 裡面通常都是 <code>(e) =&gt; setValue(e.target.value)</code> 的寫法，不過看來 RN 裡面的第一個參數就是輸入的 value，所以可以直接把 setTextValue 放進去，不需要再另外宣告 callback</li>
</ol>
<h3 id="Number-input"><a href="#Number-input" class="headerlink" title="Number input"></a>Number input</h3><p>透過 <code>keyboardType</code> ，設置為 <code>numeric</code> 就可以在 focus 輸入框的時候，讓跳出的鍵盤變成輸入數字的鍵盤，對於 UX 來說是一個好 props。</p>
<p>這邊是兩個平台都可以使用的 value：</p>
<ul>
<li>default</li>
<li>number-pad</li>
<li>decimal-pad</li>
<li>numeric</li>
<li>email-address</li>
<li>phone-pad</li>
</ul>
<h3 id="Password-input"><a href="#Password-input" class="headerlink" title="Password input"></a>Password input</h3><p>透過設置 <code>secureTextEntry</code> 這個 props 就可以讓輸入變成 mask 過後的內容，場景適用於輸入密碼時。</p>
<h3 id="Multiline-input"><a href="#Multiline-input" class="headerlink" title="Multiline input"></a>Multiline input</h3><p>如果需要有多行的輸入，設置 <code>multiline=&#123;true&#125;</code> 可以達到這個效果；如果要限制行數的話，可以使用 <code>numberOfLines</code></p>
<h3 id="🚧-Picker"><a href="#🚧-Picker" class="headerlink" title="🚧 Picker"></a>🚧 Picker</h3><p><a href="https://reactnative.dev/docs/picker">Picker</a></p>
<p>注意！文件裡面寫到：</p>
<blockquote>
<p><strong>Deprecated.</strong> Use one of the <a href="https://reactnative.directory/?search=picker">community packages</a> instead.</p>
</blockquote>
<p>已經棄用了，所以可以改成在 <a href="https://reactnative.directory/">React Native Directory</a> 去尋找適用的 picker。</p>
<p>iOS 和 Android 的預設樣式不同，iOS 是一個滾輪，滑動的時候會有反饋；Android 則是一個 Modal。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>其他還有很多 components 可以使用，Kadi 建議我們去 <a href="https://github.com/react-native-community">React Native Community</a> 和 <a href="https://reactnative.directory/">React Native Directory</a> 找適合的 library，他說通常除了看 star 以外，他也會注意 fork 的數量，因為這一定程度代表這個套件的熱門程度，還有 commit 時間也值得注意，因為這代表有沒有在維護。</p>
<p>這邊我會推薦使用 <a href="https://openbase.com/">openbase</a> 來做搜尋，library 的各種資訊在這裡都一目瞭然。</p>
<h2 id="Opening-a-full-screen-modal"><a href="#Opening-a-full-screen-modal" class="headerlink" title="Opening a full screen modal"></a>Opening a full screen modal</h2><p><a href="https://kadikraman.github.io/react-native-v2/modals">Opening a full screen modal</a></p>
<p>這章節的可以參考官方文件的 <a href="https://reactnavigation.org/docs/modal/">Opening a full-screen modal</a>，以及 React Navigation 的 <a href="https://reactnavigation.org/docs/typescript/#combining-navigation-props">Combining navigation props</a>。</p>
<p>首先這是我們預計要有的 Navigation Stack 樹狀圖：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008eGmZEly1gonzvwbi65j30nd0ewdfu.jpg" alt="stack"></p>
<p>也就是說，原本的 Stack 變為 <code>MainStack</code>，<code>MainStack</code> 負責導航到 <code>HomeScreen</code> 和 <code>ColorPalette</code> 兩個 Screen；更上層的 <code>RootStack</code> 則是負責 <code>MainStack</code> 的導航以及 <code>ModalScreen</code> 。</p>
<p>首先我們先來新增 ModalScreen，我們來去 <code>screen</code> 建立<code>ColorPaletteModal.tsx</code>：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> View<span class="token punctuation">,</span> Text <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ColorPaletteModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello Color Palette Modal</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接下來到達我們的重頭戲，<code>App.tsx</code>，首先除了原本的 Stack 改為 RootStack 以外，也要新增 MainStack：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">RootStackParamList</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  Main<span class="token operator">:</span> <span class="token keyword">undefined</span>
  ColorPaletteModal<span class="token operator">:</span> <span class="token keyword">undefined</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">MainStackParamList</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  Home<span class="token operator">:</span> <span class="token keyword">undefined</span>
  ColorPalette<span class="token operator">:</span> TPalette
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> RootStack <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createStackNavigator</span><span class="token generic class-name"><span class="token operator">&lt;</span>RootStackParamList<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> MainStack <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createStackNavigator</span><span class="token generic class-name"><span class="token operator">&lt;</span>MainStackParamList<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也別忘記兩個 Stack 型別的定義也不一樣，接著我們來新增 <code>MainStackScreen</code> ，這個 component 就是原本的 Stack：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token function-variable function">MainStackScreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MainStack.Navigator</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MainStack.Screen</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Home<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>Home<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MainStack.Screen</span></span>
        <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ColorPalette<span class="token punctuation">"</span></span>
        <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>ColorPalette<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">options</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> route <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> title<span class="token operator">:</span> route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>paletteName <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
      <span class="token punctuation">/></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MainStack.Navigator</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最後，把原本的 <code>App.tsx</code>的 stack 改為 <code>RootStack</code>，並且顯示 <code>MainStack</code> 以及 <code>ModalScreen</code>：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavigationContainer</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RootStack.Navigator</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RootStack.Screen</span></span>
          <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Main<span class="token punctuation">"</span></span>
          <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>MainStackScreen<span class="token punctuation">&#125;</span></span>
          <span class="token attr-name">options</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> headerShown<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>
        <span class="token punctuation">/></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RootStack.Screen</span></span>
          <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ColorPaletteModal<span class="token punctuation">"</span></span>
          <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>ColorPaletteModal<span class="token punctuation">&#125;</span></span>
        <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">RootStack.Navigator</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavigationContainer</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以特別注意的是 &lt;<code>RootStack.Navigator&gt;</code> 設置了 <code>mode=&quot;modal&quot;</code>，這樣我們導航到其他 Screen 的畫面的行為才會是跳出 Modal。</p>
<p>接著我們到 <code>Home.tsx</code> 試著新增一個 Button，然後可以點擊 Button 跳出 <code>ColorPaletteModal</code> 吧！</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// Home.tsx</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> FlatList<span class="token punctuation">,</span> StyleSheet<span class="token punctuation">,</span> SafeAreaView<span class="token punctuation">,</span> Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span>

<span class="token comment">/* 中間省略 */</span>

<span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FlatList</span></span>
      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>colorPalettes<span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">renderItem</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>renderPalettePreview<span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">keyExtractor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>paletteName<span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">ListHeaderComponent</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span>
          <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Press me<span class="token punctuation">"</span></span>
          <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#f194ff<span class="token punctuation">"</span></span>
          <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> navigation<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">'ColorPaletteModal'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
        <span class="token punctuation">/></span></span>
      <span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">refreshing</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>isRefreshing<span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">onRefresh</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleRefresh<span class="token punctuation">&#125;</span></span>
    <span class="token punctuation">/></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>完成這邊的事情以後，彈窗的功能就順利完成！不過寫 TS 的時候會發現一件事情，那就是 <code>Button</code> 的 <code>onPress=&#123;() =&gt; navigation.navigate(&#39;ColorPaletteModal&#39;)&#125;</code> 這行會出現 TS 的紅字錯誤，這是型別上出了什麼問題？讓我們移動到下一章節。</p>
<h3 id="型別的定義"><a href="#型別的定義" class="headerlink" title="型別的定義"></a>型別的定義</h3><p>在這邊我卡了蠻久，不知道型別哪裡出了問題，到處找資料後發現 stackover flow 的這篇：</p>
<p><a href="https://stackoverflow.com/questions/59816529/how-to-write-type-definitions-while-using-nested-navigation-in-react-navigation">How to write type definitions while using nested navigation in react-navigation v5</a></p>
<p>這邊提及 React Navigation 的官方文件： <a href="https://reactnavigation.org/docs/typescript/#combining-navigation-props">Combining navigation props</a>，直到這裡我才真正搞定型別，我們來看一下經過 Nested 的 Stack 後型別如何定義吧。</p>
<p>首先回到 <code>App.tsx</code>，我們要新增一個叫做 <code>MainNavigationProp</code> 的 type：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">MainNavigationProp</span> <span class="token operator">=</span> CompositeNavigationProp<span class="token operator">&lt;</span>
  StackNavigationProp<span class="token operator">&lt;</span>MainStackParamList<span class="token punctuation">,</span> <span class="token string">'Home'</span><span class="token operator">></span><span class="token punctuation">,</span>
  StackNavigationProp<span class="token operator">&lt;</span>RootStackParamList<span class="token operator">></span>
<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>When you nest navigators, the navigation prop of the screen is a combination of multiple navigation props. For example, if we have a tab inside a stack, the <code>navigation</code> prop will have both <code>jumpTo</code> (from the tab navigator) and <code>push</code> (from the stack navigator). To make it easier to combine types from multiple navigator, you can use the <code>CompositeNavigationProp</code> type</p>
</blockquote>
<p>按照官方文件的解釋，應該是因為 nest navigators 會讓你的 prop 是多個 navigation props 的結合，因此需要再透過 CompositeNavigationProp 來把 props 的 type 結合。</p>
<p>接著回到 <code>Home.tsx</code> ，需要把 <code>HomeScreenNavigationProp</code> 的 type 改成這樣：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">type</span> <span class="token class-name">HomeScreenNavigationProp</span> <span class="token operator">=</span> CompositeNavigationProp<span class="token operator">&lt;</span>
  StackNavigationProp<span class="token operator">&lt;</span>MainStackParamList<span class="token punctuation">,</span> <span class="token string">'Home'</span><span class="token operator">></span><span class="token punctuation">,</span>
  MainNavigationProp
<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>除了原本的 <code>StackNavigationProp</code> 以外，也要 combine <code>MainNavigationProp</code>。</p>
<p>這樣子就可以順利解決了！依然是感謝 React Navigation 的官方文件寫的很詳細。</p>
<p>這時候我們點擊 <code>Button</code> 並跳出彈窗的行為大概會像是這樣：</p>
<p><img data-src="https://kadikraman.github.io/react-native-v2/a13f62bcf5af5f4b8cbc7363faef86ce/open-modal-demo.gif"></p>
<h2 id="Form-exercise-📝"><a href="#Form-exercise-📝" class="headerlink" title="Form exercise 📝"></a>Form exercise 📝</h2><p>這章節的筆記會比較簡略，因為累惹，想要簡單記錄就好，簡單來說大概會做幾件事情：</p>
<ol>
<li>調整 Home 的「Add a Color scheme」</li>
<li>新增 Modal 內容（Text，TextInput、Submit Button）</li>
<li>新增 Modal 的 <code>handleSubmit</code> 功能</li>
<li>新增 Modal 的 <code>renderToggleItem</code> 、<code>handleUpdate </code>功能</li>
<li>處理 Modal 的 type</li>
<li>處理 Home route 的 type 以及 route.params</li>
</ol>
<p>這是預計要實踐的畫面和功能：</p>
<p><img data-src="https://kadikraman.github.io/react-native-v2/6794ed6012089fa8f378be2542cde666/forms-exercise.gif"></p>
<h3 id="Home-tsx-新增-Button"><a href="#Home-tsx-新增-Button" class="headerlink" title="Home.tsx 新增 Button"></a>Home.tsx 新增 Button</h3><p>首先我們要做的是到 Home.tsx 新增 「Add a Color scheme」的 button：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token punctuation">;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FlatList</span></span>
  <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">&#125;</span></span>
  <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>colorPalettes<span class="token punctuation">&#125;</span></span>
  <span class="token attr-name">renderItem</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>renderPalettePreview<span class="token punctuation">&#125;</span></span>
  <span class="token attr-name">keyExtractor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>paletteName<span class="token punctuation">&#125;</span></span>
  <span class="token attr-name">ListHeaderComponent</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TouchableOpacity</span></span> <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleOpenModal<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>buttonText<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Add a color scheme</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">TouchableOpacity</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
  <span class="token attr-name">refreshing</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>isRefreshing<span class="token punctuation">&#125;</span></span>
  <span class="token attr-name">onRefresh</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleRefresh<span class="token punctuation">&#125;</span></span>
<span class="token punctuation">/></span></span>

<span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  container<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    padding<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  buttonText<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    fontSize<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    fontWeight<span class="token operator">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span>
    color<span class="token operator">:</span> <span class="token string">'#00A0B0'</span><span class="token punctuation">,</span>
    marginVertical<span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="新增-Modal-內容（Text，TextInput、Submit-Button）"><a href="#新增-Modal-內容（Text，TextInput、Submit-Button）" class="headerlink" title="新增 Modal 內容（Text，TextInput、Submit Button）"></a>新增 Modal 內容（Text，TextInput、Submit Button）</h3><p>接下來就是重頭戲啦，來著手進行 Modal 裡面的功能實踐，首先來切個版，我們會發現畫面大概分成幾個區塊：</p>
<ol>
<li>第一是「Name of your color palette」的 <code>Text</code></li>
<li>第二是輸入 palette name 的 <code>TextInput</code></li>
<li>第三是數個 <code>Text</code> + <code>Switch</code> 的顏色選項，會使用 <code>FlatList</code>，一個一個的選項則是用 renderItem 來細調。</li>
<li>第四是 Submit 的 Button</li>
</ol>
<p>事不宜遲馬上就來切版，首先是 <code>Text</code>、<code>TextInput</code> 和 <code>FlatList</code>和 Submit Button：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ColorPaletteModal</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> navigation <span class="token punctuation">&#125;</span><span class="token operator">:</span> TProps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* 中間省略 */</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SafeAreaView</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">Name of your color palette</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextInput</span></span>
        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>textInput<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">onChangeText</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>setName<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Please input palette name<span class="token punctuation">"</span></span>
      <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FlatList</span></span>
        <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token constant">COLORS</span><span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">renderItem</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>renderColorToggle<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">keyExtractor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>colorName<span class="token punctuation">&#125;</span></span>
      <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TouchableOpacity</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>button<span class="token punctuation">&#125;</span></span> <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleSubmit<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>buttonText<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Submit</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">TouchableOpacity</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  container<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    margin<span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>
    flex<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  toggleContainer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    flex<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    flexDirection<span class="token operator">:</span> <span class="token string">'row'</span><span class="token punctuation">,</span>
    alignItems<span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
    justifyContent<span class="token operator">:</span> <span class="token string">'space-between'</span><span class="token punctuation">,</span>
    padding<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    borderBottomWidth<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  textInput<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    height<span class="token operator">:</span> <span class="token number">45</span><span class="token punctuation">,</span>
    padding<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    borderRadius<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    borderWidth<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    marginVertical<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  button<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    height<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
    paddingVertical<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    paddingHorizontal<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    backgroundColor<span class="token operator">:</span> <span class="token string">'#53777A'</span><span class="token punctuation">,</span>
    borderRadius<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    alignItems<span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
    justifyContent<span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  buttonText<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    fontSize<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    fontWeight<span class="token operator">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span>
    color<span class="token operator">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接下來輪到 <code>renderItem</code> 裡面的 <code>renderColorToggle</code> ：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token function-variable function">renderColorToggle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> item<span class="token operator">:</span> TColor<span class="token punctuation">;</span> index<span class="token operator">:</span> number <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>toggleContainer<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>colorName<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Switch</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>到這邊我們的切版大致上就完成惹。</p>
<h3 id="Modal-的-handleSubmit"><a href="#Modal-的-handleSubmit" class="headerlink" title="Modal 的 handleSubmit"></a>Modal 的 <code>handleSubmit</code></h3><p>接下來輪到 handleSubmit 的回合：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ColorPaletteModal</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> navigation <span class="token punctuation">&#125;</span><span class="token operator">:</span> TProps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>selectedColors<span class="token punctuation">,</span> setSelectedColors<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>TColor<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      Alert<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Please input palette name'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedColors<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      Alert<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Please pick at lease 3 colors'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> newPalette <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        paletteName<span class="token operator">:</span> name<span class="token punctuation">,</span>
        colors<span class="token operator">:</span> selectedColors<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span>

      navigation<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">'Home'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> newPalette <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* 省略 */</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SafeAreaView</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">Name of your color palette</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextInput</span></span>
        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>textInput<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">onChangeText</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>setName<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Please input palette name<span class="token punctuation">"</span></span>
      <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FlatList</span></span>
        <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token constant">COLORS</span><span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">renderItem</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>renderColorToggle<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">keyExtractor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>colorName<span class="token punctuation">&#125;</span></span>
      <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TouchableOpacity</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>button<span class="token punctuation">&#125;</span></span> <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleSubmit<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token punctuation">&#123;</span><span class="token string">' '</span><span class="token punctuation">&#125;</span><span class="token plain-text">
        // 新增 Submit
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>buttonText<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Submit</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">TouchableOpacity</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這邊的邏輯就是如果「沒有輸入 name」或是「選擇的顏色數量少於 3」就會跳出 alert，不然就會把新增的 <code>newPalette</code> 當作 params 傳到 <code>Home</code> Screen，並且導航到 <code>Home</code>。</p>
<h3 id="Modal-的-renderToggleItem、handleUpdate"><a href="#Modal-的-renderToggleItem、handleUpdate" class="headerlink" title="Modal 的 renderToggleItem、handleUpdate"></a>Modal 的 <code>renderToggleItem</code>、<code>handleUpdate</code></h3><p>接下來輪到 <code>renderToggleItem</code> 和 <code>handleUpdate</code> 了：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ColorPaletteModal</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> navigation <span class="token punctuation">&#125;</span><span class="token operator">:</span> TProps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>selectedColors<span class="token punctuation">,</span> setSelectedColors<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>TColor<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>
  <span class="token comment">/* 
    這邊的邏輯是如果 value 為 true，代表從 false 變 true，代表要 push 新的 color 到 
    array 裡面；
    但如果是 false，那代表原本是 true，也就是從選擇到取消，那就要從現有的 colors 裡面
    filter 掉。
	*/</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleUpdate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token operator">:</span> boolean<span class="token punctuation">,</span> color<span class="token operator">:</span> TColor</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">setSelectedColors</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">currentColors</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span>currentColors<span class="token punctuation">,</span> color<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">setSelectedColors</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">currentColors</span><span class="token punctuation">)</span> <span class="token operator">=></span>
        currentColors<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=></span> c<span class="token punctuation">.</span>colorName <span class="token operator">!==</span> color<span class="token punctuation">.</span>colorName<span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      Alert<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Please input palette name'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedColors<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      Alert<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Please pick at lease 3 colors'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> newPalette <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        paletteName<span class="token operator">:</span> name<span class="token punctuation">,</span>
        colors<span class="token operator">:</span> selectedColors<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span>

      navigation<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">'Home'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> newPalette <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">/* 
		這邊就是尋找目前 item 的 colorName 有沒有在 state 的 colors 裡。有的話就是已選擇的，		  		value 必須是 true，沒有的話就是 false。
	*/</span>
  <span class="token keyword">const</span> <span class="token function-variable function">renderColorToggle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> item<span class="token operator">:</span> TColor<span class="token punctuation">;</span> index<span class="token operator">:</span> number <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> isActive<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>selectedColors<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token parameter">color<span class="token operator">:</span> TColor</span><span class="token punctuation">)</span> <span class="token operator">=></span> color<span class="token punctuation">.</span>colorName <span class="token operator">===</span> item<span class="token punctuation">.</span>colorName
    <span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>toggleContainer<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>colorName<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Switch</span></span>
          <span class="token attr-name">trackColor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token boolean">false</span><span class="token operator">:</span> <span class="token string">'#767577'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token operator">:</span> <span class="token string">'#81b0ff'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>
          <span class="token attr-name">thumbColor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>isActive <span class="token operator">?</span> <span class="token string">'#f5dd4b'</span> <span class="token operator">:</span> <span class="token string">'#f4f3f4'</span><span class="token punctuation">&#125;</span></span>
          <span class="token attr-name">ios_backgroundColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#3e3e3e<span class="token punctuation">"</span></span>
          <span class="token attr-name">onValueChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">handleUpdate</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>isActive<span class="token punctuation">&#125;</span></span>
        <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SafeAreaView</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">Name of your color palette</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextInput</span></span>
        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>textInput<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">onChangeText</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>setName<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Please input palette name<span class="token punctuation">"</span></span>
      <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FlatList</span></span>
        <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token constant">COLORS</span><span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">renderItem</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>renderColorToggle<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">keyExtractor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>colorName<span class="token punctuation">&#125;</span></span>
      <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TouchableOpacity</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>button<span class="token punctuation">&#125;</span></span> <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleSubmit<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>buttonText<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Submit</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">TouchableOpacity</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Modal-的-type"><a href="#Modal-的-type" class="headerlink" title="Modal 的 type"></a>Modal 的 type</h3><p>因為我們的 Modal 要使用 <code>navigate</code> 這個 props 的緣故，所以必須定義它的型別：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CompositeNavigationProp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@react-navigation/native'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> StackNavigationProp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@react-navigation/stack'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> RootStackParamList<span class="token punctuation">,</span> MainNavigationProp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../App'</span>

<span class="token keyword">type</span> <span class="token class-name">ModalScreenNavigationProp</span> <span class="token operator">=</span> CompositeNavigationProp<span class="token operator">&lt;</span>
  StackNavigationProp<span class="token operator">&lt;</span>RootStackParamList<span class="token punctuation">,</span> <span class="token string">'ColorPaletteModal'</span><span class="token operator">></span><span class="token punctuation">,</span>
  MainNavigationProp
<span class="token operator">></span>

<span class="token keyword">type</span> <span class="token class-name">TProps</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  navigation<span class="token operator">:</span> ModalScreenNavigationProp
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Home-的-route-type-以及-route-params"><a href="#Home-的-route-type-以及-route-params" class="headerlink" title="Home 的 route type 以及 route.params"></a>Home 的 route type 以及 route.params</h3><p>從 Modal 傳遞 <code>newPalette</code> 到 Home 以後，Home 就要來接住這個 <code>newPalette</code> 了，並且新增到目前的 <code>COLOR_PALETTES</code> 裡面了對吧！</p>
<p>首先我們到 <code>App.tsx</code>，原因是要先定義 Home 的 <code>route.params</code> 的 type：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// App.tsx</span>

<span class="token comment">// 定義 Home 的 params</span>
<span class="token keyword">type</span> <span class="token class-name">HomeParams</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  newPalette<span class="token operator">:</span> TPalette
<span class="token punctuation">&#125;</span>

<span class="token comment">// 修改原本的 MainStackParamList</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">MainStackParamList</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  Home<span class="token operator">:</span> HomeParams
  ColorPalette<span class="token operator">:</span> TPalette
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其他依舊。</p>
<p>接下來回到 <code>Home</code>，因為我們現在又多了一個 <code>route</code> 的 props，所以依舊是要處理 <code>route</code> 的型別：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// Home.tsx</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CompositeNavigationProp<span class="token punctuation">,</span> RouteProp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@react-navigation/native'</span>

<span class="token keyword">type</span> <span class="token class-name">HomeScreenNavigationProp</span> <span class="token operator">=</span> CompositeNavigationProp<span class="token operator">&lt;</span>
  StackNavigationProp<span class="token operator">&lt;</span>MainStackParamList<span class="token punctuation">,</span> <span class="token string">'Home'</span><span class="token operator">></span><span class="token punctuation">,</span>
  MainNavigationProp
<span class="token operator">></span>

<span class="token keyword">type</span> <span class="token class-name">HomeScreenRouteProps</span> <span class="token operator">=</span> RouteProp<span class="token operator">&lt;</span>MainStackParamList<span class="token punctuation">,</span> <span class="token string">'Home'</span><span class="token operator">></span>

<span class="token keyword">type</span> <span class="token class-name">TProps</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  route<span class="token operator">:</span> HomeScreenRouteProps
  navigation<span class="token operator">:</span> HomeScreenNavigationProp
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著就可以快樂使用 <code>route.params</code> 了！我們在 Home Component 裡面新增這行：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> newPalette<span class="token operator">:</span> TPalette <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> route<span class="token operator">?.</span>params<span class="token operator">?.</span>newPalette<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接著新增一個 <code>useEffect</code>：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>newPalette<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setColorPalettes</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">current</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>newPalette<span class="token punctuation">,</span> <span class="token operator">...</span>current<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>newPalette<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>意思是當 newPalette 有變化且有值的時候，就更新 colorPalettes 的值。</p>
<p>完整的 <code>Home.tsx</code> 的 code：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useCallback <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> FlatList<span class="token punctuation">,</span> StyleSheet<span class="token punctuation">,</span> TouchableOpacity<span class="token punctuation">,</span> Text <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> StackNavigationProp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@react-navigation/stack'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CompositeNavigationProp<span class="token punctuation">,</span> RouteProp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@react-navigation/native'</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> MainStackParamList<span class="token punctuation">,</span> MainNavigationProp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../App'</span>
<span class="token keyword">import</span> PalettePreview <span class="token keyword">from</span> <span class="token string">'../components/PalettePreview'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> TPalette <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../utils/colors'</span>

<span class="token keyword">type</span> <span class="token class-name">HomeScreenNavigationProp</span> <span class="token operator">=</span> CompositeNavigationProp<span class="token operator">&lt;</span>
  StackNavigationProp<span class="token operator">&lt;</span>MainStackParamList<span class="token punctuation">,</span> <span class="token string">'Home'</span><span class="token operator">></span><span class="token punctuation">,</span>
  MainNavigationProp
<span class="token operator">></span>

<span class="token keyword">type</span> <span class="token class-name">HomeScreenRouteProps</span> <span class="token operator">=</span> RouteProp<span class="token operator">&lt;</span>MainStackParamList<span class="token punctuation">,</span> <span class="token string">'Home'</span><span class="token operator">></span>

<span class="token keyword">type</span> <span class="token class-name">TProps</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  route<span class="token operator">:</span> HomeScreenRouteProps
  navigation<span class="token operator">:</span> HomeScreenNavigationProp
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> navigation<span class="token punctuation">,</span> route <span class="token punctuation">&#125;</span><span class="token operator">:</span> TProps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>colorPalettes<span class="token punctuation">,</span> setColorPalettes<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>TPalette<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>isRefreshing<span class="token punctuation">,</span> setIsRefreshing<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> newPalette<span class="token operator">:</span> TPalette <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> route<span class="token operator">?.</span>params<span class="token operator">?.</span>newPalette

  <span class="token keyword">const</span> fetchColorPalettes <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>
      <span class="token string">'https://color-palette-api.kadikraman.now.sh/palettes'</span>
    <span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token keyword">await</span> result<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token function">setColorPalettes</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> result
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token function-variable function">renderPalettePreview</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> item<span class="token operator">:</span> TPalette <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">PalettePreview</span></span>
        <span class="token attr-name">handlePress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> navigation<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">'ColorPalette'</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">colorPalette</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span></span>
      <span class="token punctuation">/></span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleRefresh</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setIsRefreshing</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token function">fetchColorPalettes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">setIsRefreshing</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleOpenModal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    navigation<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">'ColorPaletteModal'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">fetchColorPalettes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>fetchColorPalettes<span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newPalette<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">setColorPalettes</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">current</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>newPalette<span class="token punctuation">,</span> <span class="token operator">...</span>current<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>newPalette<span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FlatList</span></span>
      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>colorPalettes<span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">renderItem</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>renderPalettePreview<span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">keyExtractor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>paletteName<span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">ListHeaderComponent</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TouchableOpacity</span></span> <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleOpenModal<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>buttonText<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Add a color scheme</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">TouchableOpacity</span></span><span class="token punctuation">></span></span>
      <span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">refreshing</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>isRefreshing<span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">onRefresh</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleRefresh<span class="token punctuation">&#125;</span></span>
    <span class="token punctuation">/></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  container<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    padding<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  buttonText<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    fontSize<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    fontWeight<span class="token operator">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span>
    color<span class="token operator">:</span> <span class="token string">'#00A0B0'</span><span class="token punctuation">,</span>
    marginVertical<span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這樣就順利完成新增 colorPalettes 的功能了！（不過 refresh 新增的東西就不見了，看來沒有把新增的 color palette 發給 API 還是有點小怪啦）</p>
<h3 id="useState-Type-小筆記"><a href="#useState-Type-小筆記" class="headerlink" title="useState Type 小筆記"></a>useState Type 小筆記</h3><p>在練習過程中有遇到一些 TypeScript 的小問題，就先記在這裡。</p>
<p><a href="https://www.carlrippon.com/typed-usestate-with-typescript/">Typed useState with TypeScript</a></p>
<p><a href="https://stackoverflow.com/questions/52423842/what-is-not-assignable-to-parameter-of-type-never-error-in-typescript">What is “not assignable to parameter of type never” error in typescript?</a></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://frontendmasters.com/courses/react-native-v2/">React Native, v2</a></p>
]]></content>
      <categories>
        <category>筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>frontend master</tag>
        <tag>React Native</tag>
        <tag>Expo</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native v2 - Navigation</title>
    <url>/2021/03/18/React-Native-v2-Navigation/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要轉換跑道學習開發 React Native，學習的課程是 Kadi Kraman 的 <a href="https://frontendmasters.com/courses/react-native-v2/">React Native v2</a> ，寫這篇筆記的時候是學習 React Native 的第二天，App 的 navigate 和 web 差蠻多的，目前處於一個對未知領域感到有趣的心裡狀態。</p>
<p>目前除了 React Native 以外，還有 TypeScript 這個挑戰，因為我對於 TypeScript 沒有到很熟，常常搞 type 搞到有點心死。</p>
<p>初學 React Native，概念上應該會有不少錯誤，如果有誤的話也麻煩不吝指正，非常感謝！</p>
<span id="more"></span>

<h2 id="Navigation-Intro"><a href="#Navigation-Intro" class="headerlink" title="Navigation Intro"></a>Navigation Intro</h2><p><a href="https://kadikraman.github.io/react-native-v2/navigation-intro">Navigation Intro</a></p>
<p>React Native 沒有內建 Navigation，因為 Facebook 有他們自己內部使用的 Navigation 方案，因為高度客製化的關係也沒辦法釋出。</p>
<p>目前 React Navigation 社群有兩個比較夯的 library： <a href="https://reactnavigation.org/">React Navigation</a> and <a href="https://wix.github.io/react-native-navigation/#/">React Native Navigation</a>，這個課程會使用 React Navigation。</p>
<p>Expo 選用 React Navigation 是更為合適的，因為 React Native Navigation 背後是 Native 的 code，如果要使用這個 library 的話必須要 eject 才行，這點就不是那麼地契合，另外，效能上的話兩者沒有差異。</p>
<h2 id="Expo-Adding-navigation-with-Expo"><a href="#Expo-Adding-navigation-with-Expo" class="headerlink" title="[Expo] Adding navigation with Expo"></a>[Expo] Adding navigation with Expo</h2><p>首先安裝 React Navigation：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> @react-navigation/native<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接下來安裝 Native 的 dependencies：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">expo <span class="token function">install</span> react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接著在 <code>App.tsx</code> import ：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NavigationContainer <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@react-navigation/native'</span><span class="token punctuation">;</span>

<span class="token comment">// ... 中間省略</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">renderColorBox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> item<span class="token operator">:</span> Colors <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ColorBox</span></span> <span class="token attr-name">colorName</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>colorName<span class="token punctuation">&#125;</span></span> <span class="token attr-name">hexColor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>hexCode<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavigationContainer</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SafeAreaView</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>safeArea<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FlatList</span></span>
          <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">&#125;</span></span>
          <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token constant">COLORS</span><span class="token punctuation">&#125;</span></span>
          <span class="token attr-name">renderItem</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>renderColorBox<span class="token punctuation">&#125;</span></span>
          <span class="token attr-name">keyExtractor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>hexCode<span class="token punctuation">&#125;</span></span>
          <span class="token attr-name">ListHeaderComponent</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Solarized</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span></span>
        <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavigationContainer</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這樣子基本的建設就完成了。</p>
<h2 id="Adding-Navigation"><a href="#Adding-Navigation" class="headerlink" title="Adding Navigation"></a>Adding Navigation</h2><p>一般來說，App 的 Navigation 會分成兩種，Bottom Navigation 以及 stack 的 navigation，舉例來說就類似於我在網路上隨便找的 <a href="https://snack.expo.io/@nomi9995/1826cf">例子</a>，會發現到他既有 bottom 的導航又能夠在螢幕中導向其他頁面。</p>
<p>目前課程的例子只會用到 stack navigator，這次的練習是要建立兩個 Screen，<code>Home</code> 以及 <code>ColorPalette</code>。</p>
<p><code>Home</code> 就是首頁，先不用寫什麼東西，只要有 Solarized 的 Text，然後點擊可以導航到 <code>ColorPalette</code> 就好了；<code>ColorPalette</code> 就是我們原本在 <code>App.tsx</code> 裡面的調色盤，所以只要原封不動把 code 搬過去。</p>
<p>既然知道目標了，那就開始吧！首先我們要安裝 dependencies：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> @react-navigation/stack<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接著在 root 新增 screens 的資料夾，分別在裡面建立 <code>Home.tsx</code> 和 <code>ColorPalette.tsx</code> ，</p>
<p><code>Home.tsx</code>：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> View<span class="token punctuation">,</span> Text <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello World, This is Home Screen</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>ColorPalette.tsx</code>：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Text<span class="token punctuation">,</span> SafeAreaView<span class="token punctuation">,</span> StyleSheet<span class="token punctuation">,</span> FlatList <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> ColorBox <span class="token keyword">from</span> <span class="token string">'../components/ColorBox'</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Colors</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  colorName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  hexCode<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">COLORS</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Base03'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#002b36'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Base02'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#073642'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Base01'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#586e75'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Base00'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#657b83'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Base0'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#839496'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Base1'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#93a1a1'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Base2'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#eee8d5'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Base3'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#fdf6e3'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Yellow'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#b58900'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Orange'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#cb4b16'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Red'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#dc322f'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Magenta'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#d33682'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Violet'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#6c71c4'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Blue'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#268bd2'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Cyan'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#2aa198'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Green'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#859900'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ColorPalette</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">renderColorBox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> item<span class="token operator">:</span> Colors <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ColorBox</span></span> <span class="token attr-name">colorName</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>colorName<span class="token punctuation">&#125;</span></span> <span class="token attr-name">hexColor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>hexCode<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SafeAreaView</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>safeArea<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FlatList</span></span>
        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token constant">COLORS</span><span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">renderItem</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>renderColorBox<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">keyExtractor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>hexCode<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">ListHeaderComponent</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Solarized</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span></span>
      <span class="token punctuation">/></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  title<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    fontSize<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    marginBottom<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    fontWeight<span class="token operator">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  container<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    paddingTop<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    paddingHorizontal<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    borderRadius<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    flex<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  safeArea<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    flex<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    flexDirection<span class="token operator">:</span> <span class="token string">'row'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這時候我們的 <code>App.tsx</code> 經過 code 的搬遷後，會長得像這樣：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NavigationContainer <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@react-navigation/native'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavigationContainer</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavigationContainer</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>處理好之後，就來做正事了，開始建立 Navigation，詳細的內容可以參考 React Navigation 官方文件的 <a href="https://reactnavigation.org/docs/hello-react-navigation/">Hello React Navigation</a>，首先建立 Stack：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NavigationContainer <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@react-navigation/native'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createStackNavigator <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@react-navigation/stack'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> Stack <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createStackNavigator</span><span class="token generic class-name"><span class="token operator">&lt;</span>RootStackParamList<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavigationContainer</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Stack.Navigator</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Stack.Navigator</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavigationContainer</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>Stack.Navigator</code> 就是要包裹著各類 Screen 的 Container，就如同 React-Router 也有 <code>&lt;Router&gt;</code> Component 來當作包裹容器差不多。</p>
<p>接著，我們引入 <code>Home</code> 及 <code>ColorPalette</code> 兩個 Component，並且加上 <code>Stack.Screen</code>：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NavigationContainer <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@react-navigation/native'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createStackNavigator <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@react-navigation/stack'</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'./screens/Home'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ColorPalette <span class="token keyword">from</span> <span class="token string">'./screens/ColorPalette'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> Stack <span class="token operator">=</span> <span class="token function">createStackNavigator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavigationContainer</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Stack.Navigator</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Stack.Screen</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Home<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>Home<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Stack.Screen</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ColorPalette<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>ColorPalette<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Stack.Navigator</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavigationContainer</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>Stack.Screen</code> 的 <code>name</code> props 代表了它的路徑名稱，通常會用大寫；component 則是你想要顯示的頁面。</p>
<p>接著，我們回到 <code>Home.tsx</code>：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> View<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Pressable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> StackNavigationProp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@react-navigation/stack'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> navigation <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Pressable</span></span> <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> navigation<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">'ColorPalette'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello World, This is Home Screen</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Pressable</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>課程裡面是使用到 <a href="https://reactnative.dev/docs/touchableopacity">TouchableOpacity</a>，不過我看到官方文件提到這段話：</p>
<blockquote>
<p>If you’re looking for a more extensive and future-proof way to handle touch-based input, check out the <a href="https://reactnative.dev/docs/pressable">Pressable</a> API.</p>
</blockquote>
<p>所以就改成使用 <code>&lt;Pressable</code> 的 Component 了。</p>
<p>基本上這樣就完成了簡單的 navigation！酷欸！另外 Kadi 也有提到，<code>ColorPalette</code> 的 <code>&lt;SafeArea&gt;</code> 也可以不用了，因為 React Navigation 有幫你做好這層處理。（Kadi 也沒說做了什麼，所以背後詳細做了什麼要等我更熟 React Native 才能解釋 QQ）</p>
<h3 id="Type-呢？"><a href="#Type-呢？" class="headerlink" title="Type 呢？"></a>Type 呢？</h3><p>對，因為我寫 TypeScript 的關係，所以和課程不同的地方是我多了 Type 要處理，如果寫 TypeScript 的人會發現剛剛那段 code 在 <code>Home</code> 的 props <code>navigation</code> 會出現紅字，因為沒有定義型別，所以接下來要處理的就是定義 <code>navigation</code> 的 type。</p>
<p>因此這時候就要參考 React Navigation 的 <a href="https://reactnavigation.org/docs/typescript/">Type checking with TypeScript</a> 了！</p>
<p>根據官方文件，首先我們要先寫好 RootStack 的 type：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NavigationContainer <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@react-navigation/native'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createStackNavigator <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@react-navigation/stack'</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'./screens/Home'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ColorPalette <span class="token keyword">from</span> <span class="token string">'./screens/ColorPalette'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">RootStackParamList</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  Home<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  ColorPalette<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> Stack <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createStackNavigator</span><span class="token generic class-name"><span class="token operator">&lt;</span>RootStackParamList<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavigationContainer</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Stack.Navigator</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Stack.Screen</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Home<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>Home<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Stack.Screen</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ColorPalette<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>ColorPalette<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Stack.Navigator</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavigationContainer</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著，回到我們的 <code>Home.tsx</code> screen：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> View<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Pressable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> StackNavigationProp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@react-navigation/stack'</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> RootStackParamList <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../App'</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">HomeScreenNavigationProp</span> <span class="token operator">=</span> StackNavigationProp<span class="token operator">&lt;</span>RootStackParamList<span class="token punctuation">,</span> <span class="token string">'Home'</span><span class="token operator">></span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">TProps</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  navigation<span class="token operator">:</span> HomeScreenNavigationProp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> navigation <span class="token punctuation">&#125;</span><span class="token operator">:</span> TProps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Pressable</span></span> <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> navigation<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">'ColorPalette'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello World, This is Home Screen</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Pressable</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這樣就可以順利完成 type 的定義了，另外官方文件還有提到：</p>
<blockquote>
<p>Similarly, you can import <code>DrawerNavigationProp</code> from <code>@react-navigation/drawer</code>, <code>BottomTabNavigationProp</code> from <code>@react-navigation/bottom-tabs</code> etc.</p>
</blockquote>
<p>所以如果有其他的 Navigation 方式，定義 type 的方式也是差不多的，另外要用到 <code>route</code> props 的話，則是改成使用 <code>RouteProp</code> 。</p>
<p>但如果 <code>navigation</code> 和 <code>route</code> 都要使用到的話，官方是推薦改成使用 <code>StackScreenProps</code>，範例 code 如下：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> StackScreenProps <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@react-navigation/stack'</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">RootStackParamList</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  Home<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  Profile<span class="token operator">:</span> <span class="token punctuation">&#123;</span> userId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  Feed<span class="token operator">:</span> <span class="token punctuation">&#123;</span> sort<span class="token operator">:</span> <span class="token string">'latest'</span> <span class="token operator">|</span> <span class="token string">'top'</span> <span class="token punctuation">&#125;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Props</span> <span class="token operator">=</span> StackScreenProps<span class="token operator">&lt;</span>RootStackParamList<span class="token punctuation">,</span> <span class="token string">'Profile'</span><span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 function component 使用就會像這樣：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function">ProfileScreen</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> route<span class="token punctuation">,</span> navigation <span class="token punctuation">&#125;</span><span class="token operator">:</span> Props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>最後，官方是推薦把這些 type 另外放在一個 <code>type.ts</code> 裡，這樣就不用重複做一樣定義型別的事情惹。</p>
<p>感謝 React Navigation 的官方文件寫得如此詳細，讓我這個 TS 新手也能一步一腳印的處理好 type。</p>
<h2 id="Navigation-Exercise-📝"><a href="#Navigation-Exercise-📝" class="headerlink" title="Navigation Exercise 📝"></a>Navigation Exercise 📝</h2><p>詳細的需求看這裡： <a href="https://kadikraman.github.io/react-native-v2/navigation-exercise">Navigation Exercise</a></p>
<p>這章節的練習有四個需求：</p>
<ol>
<li>update the app so that the colors and name are being passed into the ColorPalette component, making it reusable. <a href="https://reactnavigation.org/docs/params">Docs</a></li>
<li>make sure the page title will be the name of the color palette instead of the name of the page. <a href="https://reactnavigation.org/docs/headers#using-params-in-the-title">Docs</a></li>
<li>add two more color schemes: Rainbow and Frontend Masters (hint: you create a <code>COLOR_PALETTES</code> array and use a <code>FlatList</code> to render them)</li>
<li>update the Home page to display the first 5 colors of the color scheme as preview (stretch goal)</li>
</ol>
<p>除了原本的 <code>SOLARIZED</code> 的顏色，我們還多了兩種顏色：</p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token keyword">const</span> <span class="token constant">RAINBOW</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Red'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#FF0000'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Orange'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#FF7F00'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Yellow'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#FFFF00'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Green'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#00FF00'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Violet'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#8B00FF'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">FRONTEND_MASTERS</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Red'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#c02d28'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Black'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#3e3e3e'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Grey'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#8a8a8a'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'White'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#ffffff'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> colorName<span class="token operator">:</span> <span class="token string">'Orange'</span><span class="token punctuation">,</span> hexCode<span class="token operator">:</span> <span class="token string">'#e66225'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>示意圖：</p>
<p><img data-src="https://kadikraman.github.io/react-native-v2/df0d61b5d9bca45275634e852df92fa5/palette-preview.gif"></p>
<h2 id="Navigation-Exercise-Solution-👀"><a href="#Navigation-Exercise-Solution-👀" class="headerlink" title="Navigation Exercise Solution 👀"></a>Navigation Exercise Solution 👀</h2><p>我們就來逐步完成它吧！</p>
<h3 id="Part1-顏色的整理、新增-ColorPalette-tsx"><a href="#Part1-顏色的整理、新增-ColorPalette-tsx" class="headerlink" title="Part1 - 顏色的整理、新增 ColorPalette.tsx"></a>Part1 - 顏色的整理、新增 ColorPalette.tsx</h3><p>第一個需求：</p>
<blockquote>
<p>update the app so that the colors and name are being passed into the ColorPalette component, making it reusable. <a href="https://reactnavigation.org/docs/params">Docs</a></p>
</blockquote>
<p>點擊 Docs 可以看到關於 <code>navigation.navigate</code> 的第二個參數可以傳遞 <code>params</code>，用法大概是這樣：<code>navigation.navigate(&#39;RouteName&#39;, &#123; /* params go here */ &#125;)</code></p>
<p>傳遞 <code>params</code> 之後，就可以在我們前往的 screen 得到相對應的 params，透過 props 當中的 <code>route.params</code> 可以拿到 navigate 傳遞的參數。</p>
<p>因為要處理的顏色變很多了，所以這邊先新增 <code>utils</code> 資料夾，並且在裡面創建 <code>colors.ts</code>，方便把顏色集中管理 ：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">TColor</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  colorName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  hexCode<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">SOLARIZED</span><span class="token operator">:</span> TColor<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">/* 各種顏色 */</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">RAINBOW</span><span class="token operator">:</span> TColor<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">/* 各種顏色 */</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">FRONTEND_MASTERS</span><span class="token operator">:</span> TColor<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">/* 各種顏色 */</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著，再新增一個叫 <code>COLOR_PALETTES</code> 的常數，順便定義它的 type：</p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">TColor</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  colorName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  hexCode<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">TPalette</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  paletteName<span class="token operator">:</span> <span class="token string">'Solarized'</span> <span class="token operator">|</span> <span class="token string">'Rainbow'</span> <span class="token operator">|</span> <span class="token string">'Frontend Masters'</span><span class="token punctuation">;</span>
  colors<span class="token operator">:</span> TColor<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">SOLARIZED</span><span class="token operator">:</span> TColor<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">/* 各種顏色 */</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">RAINBOW</span><span class="token operator">:</span> TColor<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">/* 各種顏色 */</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">FRONTEND_MASTERS</span><span class="token operator">:</span> TColor<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">/* 各種顏色 */</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">COLOR_PALETTES</span><span class="token operator">:</span> TPalette<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> paletteName<span class="token operator">:</span> <span class="token string">'Solarized'</span><span class="token punctuation">,</span> colors<span class="token operator">:</span> <span class="token constant">SOLARIZED</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> paletteName<span class="token operator">:</span> <span class="token string">'Rainbow'</span><span class="token punctuation">,</span> colors<span class="token operator">:</span> <span class="token constant">RAINBOW</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> paletteName<span class="token operator">:</span> <span class="token string">'Frontend Masters'</span><span class="token punctuation">,</span> colors<span class="token operator">:</span> <span class="token constant">FRONTEND_MASTERS</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>用途是待會我們要用 <code>FlatList</code> 來顯示這些 palette，所以先集中整理成一個 array。</p>
<p>接下來，我們就可以開始功能的實作了！首先，新增一個叫 <code>PalettePreview.tsx</code> 的檔案，檔如其名，這個檔案的功能是顯示「調色盤名稱（ColorPaletteName）」以及「五個基礎顏色」的顏色預覽，並且在點擊的時候可以到達相對應的調色盤。</p>
<p>我們要做的事情，就是把當初的 <code>&lt;Pressable&gt;</code>和 <code>&lt;Text/&gt;</code> 先移動過來，不過特別注意的是，我這邊還是把 <code>&lt;Pressable&gt;</code> 改回了 <code>&lt;TouchableOpacity&gt;</code>，因為我發現這樣才有點擊時，元素變透明的回饋 XD</p>
<p><code>PalettePreview.tsx</code>：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>
  View<span class="token punctuation">,</span>
  Text<span class="token punctuation">,</span>
  TouchableOpacity<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> TPalette <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../utils/colors'</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">TProps</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">handlePress</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  colorPalette<span class="token operator">:</span> TPalette<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">PalettePreview</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> handlePress<span class="token punctuation">,</span> colorPalette <span class="token punctuation">&#125;</span><span class="token operator">:</span> TProps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TouchableOpacity</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello World</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">TouchableOpacity</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這時候的 Home.tsx 的 JSX 是空空如也的。</p>
<h3 id="Part2-ColorPalette-title"><a href="#Part2-ColorPalette-title" class="headerlink" title="Part2 - ColorPalette title"></a>Part2 - ColorPalette title</h3><p>第二個需求：</p>
<blockquote>
<p>Make sure the page title will be the name of the color palette instead of the name of the page.</p>
</blockquote>
<p>根據 <a href="https://reactnavigation.org/docs/headers/#using-params-in-the-title">docs</a>，可以看到如果要顯示動態的 title，必須要在 <code>Stack.Screen</code> 使用  <code>options</code> props，所以我們回到 App.tsx 做修改：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavigationContainer</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Stack.Navigator</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Stack.Screen</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Home<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>Home<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
        &lt;Stack.Screen
          name="ColorPalette"
          component=</span><span class="token punctuation">&#123;</span>ColorPalette<span class="token punctuation">&#125;</span><span class="token plain-text">
          options=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> route <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> title<span class="token operator">:</span> route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>paletteName <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text"> // 新增這行
        />
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Stack.Navigator</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavigationContainer</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因為到時候 params 會傳入 paletteName 及 colors 的關係，所以就可以透過 paletteName 來決定 title 是什麼了。</p>
<h3 id="Part3-新增-Home-Sceen-Color-Schemes"><a href="#Part3-新增-Home-Sceen-Color-Schemes" class="headerlink" title="Part3 - 新增 Home Sceen Color Schemes"></a>Part3 - 新增 Home Sceen Color Schemes</h3><p>第三個需求：</p>
<blockquote>
<p>Add a the new color schemes.</p>
</blockquote>
<p>之後再回到 <code>Home.tsx</code> ，新增 <code>FlatList</code> ，並且定義好 <code>renderColorPalette</code> 的 function：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> FlatList<span class="token punctuation">,</span> StyleSheet <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> StackNavigationProp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@react-navigation/stack'</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> RootStackParamList <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../App'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> PalettePreview <span class="token keyword">from</span> <span class="token string">'../components/PalettePreview'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">COLOR_PALETTES</span><span class="token punctuation">,</span> TPalette <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../utils/colors'</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">HomeScreenNavigationProp</span> <span class="token operator">=</span> StackNavigationProp<span class="token operator">&lt;</span>RootStackParamList<span class="token punctuation">,</span> <span class="token string">'Home'</span><span class="token operator">></span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">TProps</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  navigation<span class="token operator">:</span> HomeScreenNavigationProp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> navigation <span class="token punctuation">&#125;</span><span class="token operator">:</span> TProps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">renderPalettePreview</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> item<span class="token operator">:</span> TPalette <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">PalettePreview</span></span>
        <span class="token attr-name">handlePress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> navigation<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">'ColorPalette'</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">colorPalette</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span></span>
      <span class="token punctuation">/></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FlatList</span></span>
      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token constant">COLOR_PALETTES</span><span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">renderItem</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>renderPalettePreview<span class="token punctuation">&#125;</span></span>
      <span class="token attr-name">keyExtractor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>paletteName<span class="token punctuation">&#125;</span></span>
    <span class="token punctuation">/></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  container<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    padding<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這邊做了幾件事：</p>
<ol>
<li>新增 <code>FlatList</code> ，傳入剛剛整理好的 <code>COLOR_PALETTES</code>，並寫了 <code>renderPalettePreview</code> ，內容就是把 item 的資料當作 props 傳進 <code>PalettePreview</code>。</li>
<li>特別注意 <code>handlePress</code>，這邊就是把 <code>navigation.navigate</code> 的 callback 傳進去，第二個參數傳遞 <code>item</code>，而 item 是什麼呢？是 <code> &#123; paletteName: &#39;Solarized&#39;, colors: SOLARIZED &#125;</code> （或其他 palette）</li>
<li>寫 style，增加個 padding：10。</li>
</ol>
<p>再來回到 <code>PalettePreview.tsx</code>，首先新增 Flatlist，並且 render View，這個 View 就是一個一個的顏色小方塊：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>
  View<span class="token punctuation">,</span>
  Text<span class="token punctuation">,</span>
  FlatList<span class="token punctuation">,</span>
  TouchableOpacity<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> TPalette <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../utils/colors'</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">TProps</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">handlePress</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  colorPalette<span class="token operator">:</span> TPalette<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">PalettePreview</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> handlePress<span class="token punctuation">,</span> colorPalette <span class="token punctuation">&#125;</span><span class="token operator">:</span> TProps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TouchableOpacity</span></span> <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handlePress<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>colorPalette<span class="token punctuation">.</span>paletteName<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FlatList</span></span>
          <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>colorPalette<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
          <span class="token attr-name">renderItem</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span><span class="token punctuation">/></span></span>
          <span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
          <span class="token attr-name">keyExtractor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>hexCode<span class="token punctuation">&#125;</span></span>
        <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">TouchableOpacity</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>data</code> 之所以會是 <code>colorPalette.colors.slice(0, 5)</code> 是因為需求說要顯示前五個顏色就好。</p>
<p>到這邊的時候，其實需求已經完成了大半，剩下的只是 style 而已。</p>
<h3 id="Part4-撰寫-PalettePreview-style"><a href="#Part4-撰寫-PalettePreview-style" class="headerlink" title="Part4 - 撰寫 PalettePreview style"></a>Part4 - 撰寫 PalettePreview style</h3><p>接下來只要把 style 套用上去就好：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>
  View<span class="token punctuation">,</span>
  Text<span class="token punctuation">,</span>
  FlatList<span class="token punctuation">,</span>
  StyleSheet<span class="token punctuation">,</span>
  TouchableOpacity<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> TPalette <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../utils/colors'</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">TProps</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">handlePress</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  colorPalette<span class="token operator">:</span> TPalette<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">PalettePreview</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> handlePress<span class="token punctuation">,</span> colorPalette <span class="token punctuation">&#125;</span><span class="token operator">:</span> TProps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TouchableOpacity</span></span> <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handlePress<span class="token punctuation">&#125;</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>colorPalette<span class="token punctuation">.</span>paletteName<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FlatList</span></span>
          <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>colors<span class="token punctuation">&#125;</span></span>
          <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>colorPalette<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
          <span class="token attr-name">renderItem</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>box<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> backgroundColor<span class="token operator">:</span> item<span class="token punctuation">.</span>hexCode <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
          <span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
          <span class="token attr-name">keyExtractor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>hexCode<span class="token punctuation">&#125;</span></span>
        <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">TouchableOpacity</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  container<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    marginBottom<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  colors<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    flexDirection<span class="token operator">:</span> <span class="token string">'row'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  text<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    fontWeight<span class="token operator">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span>
    fontSize<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>
    marginBottom<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  box<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    width<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
    height<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
    marginRight<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    borderRadius<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> PalettePreview<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>另外，因為可能會有方塊顏色和背景太相近，導致不是很好區別的情形，這邊就可以加上陰影：</p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">shadowColor<span class="token operator">:</span> <span class="token string">'#000'</span><span class="token punctuation">,</span>
shadowOffset<span class="token operator">:</span> <span class="token punctuation">&#123;</span> width<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> height<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
shadowOpacity<span class="token operator">:</span> <span class="token number">0.3</span><span class="token punctuation">,</span>
shadowRadius<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
elevation<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// Android 專屬</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><code>elevation: 2</code> is Android only and the rest is iOS only.</p>
</blockquote>
<p>ok Exercise 完成，到這邊 Navigation 的章節就結束了。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://frontendmasters.com/courses/react-native-v2/">React Native, v2</a></p>
]]></content>
      <categories>
        <category>筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>frontend master</tag>
        <tag>React Native</tag>
        <tag>Expo</tag>
      </tags>
  </entry>
  <entry>
    <title>React Query Tutorial</title>
    <url>/2020/09/07/React-Query-Tutorial/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>data fetching 在 React 裡一直是我感到不太自在的一塊，主要是來自於我學藝不精，我知道 React 已經有部分的 pattern 在處理這一塊了，目前最常用到的就是 Redux + Redux middlewares（Redux thunk、Redux saga 等等），前陣子則是開始試著用 custom hook 來處理這塊，感覺很不賴，但比如 cache 等等的事情依然麻煩，所以我在尋找有沒有更好的作法。</p>
<p>最近看到了 React Query，使用起來覺得很讚讚，文件說明清楚、API 少少的很簡單，很符合我心目中好用的 data fetching hook，不過目前也沒有用很深，更多的坑或是應用場景還沒有遇到，所以使用心得可能還要再一陣子才會有，這篇的目的就是做做筆記，提供日後的自己回顧。</p>
<span id="more"></span>

<h2 id="👉-為何要使用？如果不用它會怎麼樣？"><a href="#👉-為何要使用？如果不用它會怎麼樣？" class="headerlink" title="👉 為何要使用？如果不用它會怎麼樣？"></a>👉 為何要使用？如果不用它會怎麼樣？</h2><p>如果使用 Redux 一段時間後，應該會發現 Global State 大致上可以分成兩種類型，一種是關於整個 Web App 的內部狀態，比如 toggle、alert，這類狀態不需要 cache，又或是其他的處理；另一種則是需要經過非同步獲取的資料，像是 call API 才能拿到的 data、登入的 token 等等。</p>
<p>原本 Redux 的社群為了處理這類非同步的 state，誕生了像是 redux-thunk、redux-saga、redux-observable 等 middlewares 來處理相關邏輯，為的是讓邏輯分工更為明確，掌管 View 的 Component 就負責顯示畫面，call API 邏輯就在 middlewares 中處理，但時間一久你還是會發現 reducers 中分散了各類的 state，也就是同步的 state 和非同步的 state 混雜再一起。</p>
<p>React Query 就是因應而生的，作者將 global state 區分為 Client state 和 Server State，Client state 就是前面段落說的 Web App 內部狀態，你可以保證他會是最新的狀態，而 client state 處理起來也相對簡單；Server State 則是需要經過非同步獲取的 state，像是 call API 得到的 data，你無法保證他是最新的，並且常常需要經過比較複雜的處理，比如 cache、重新 fetch、抑或是 background updating 等等的，而 React Query <strong>就是為了更好的處理 Server State</strong> 而出現。</p>
<p>值得注意的是，React Query 和 Redux 不是二選一的選項，而是可以共存的，如同作者 Tanner Linsey 在 <a href="https://www.reddit.com/r/reactjs/comments/ds0hp4/react_query_hooks_for_fetching_caching_and/">reddit</a> 所言：</p>
<blockquote>
<p>React Query is significantly different from using Redux. Redux is a global state manager with it’s own context etc. React Query to some extent is also a global state manager for async data. If you were to integrate the two, you would move all of your async data out of redux into React Query and only use Redux for non-async-data global application state.</p>
</blockquote>
<p>作者 Tanner Linsey 說到他在開發 <a href="https://nozzle.io/">Nozzle.io</a> 的過渡時期就是採用這樣的方式，而在最後 Redux 也被拔掉了，而是改用 <code>useReducer</code> + React Context 來管理 global UI state。</p>
<p>如果覺得原本的 Redux + Redux middleware 生態系使用的很好，專案邏輯架構蠻清晰的，也有其他方式處理 cache、重新 fetch 這類的事情，那不使用當然也沒問題；不過 React Query 是一個新的選擇，讓你用簡單的幾個 API  就能夠簡單對付麻煩的 cache 以及更好的管理 Server State，如果有興趣的話，可以給它個機會試試（與 React Query 用途相似的還有 <a href="https://github.com/vercel/swr">React SWR</a> 以及 GraphQL 的 <a href="https://github.com/apollographql/apollo-client">Apollo Client</a>）</p>
<p>另外，有興趣的話也可以看看作者的 <a href="https://www.youtube.com/watch?v=seU46c6Jz7E&feature=emb_title">影片介紹</a> ，這部影片把 React Query 誕生的目的講解非常清楚，同時也用了 React Query 重構小專案，讓開發者們能夠看看重構前後的差異（雖然我覺得影片中的螢幕太小了，很難看清楚 code）</p>
<h2 id="👉-Getting-Started"><a href="#👉-Getting-Started" class="headerlink" title="👉 Getting Started"></a>👉 Getting Started</h2><p>接下來想用 <a href="https://swapi.dev/">Star Wars API</a> 建立的簡單 project 來介紹 React Query 的各個 API，這邊有建好的 <a href="https://codesandbox.io/s/blissful-poincare-vxqv8?file=/src/App.js">codesandbox template</a></p>
<h3 id="開始前的須知-React-Query-的預設行為"><a href="#開始前的須知-React-Query-的預設行為" class="headerlink" title="開始前的須知 - React Query 的預設行為"></a>開始前的須知 - React Query 的預設行為</h3><ol>
<li>Query results 渲染在畫面上的結果會在他們被 resolved 後馬上過期，並且當結果再次被 render 或是被使用時，會自動在背景 refetch，並且開發者也可以改變 <code>staleTime</code> 這個設定來調整過期的時間（預設為 <code>0</code> milliseconds）。</li>
<li>Query results 在 Component unmounted 後仍然會被 cached，garbage collected 預設的時間為五分鐘，假如這五分鐘再次被使用到的話，就會從 cached 取出這些 results 使用，如果要更改預設值的話，可以從 <code>cacheTime</code> 來做調整（預設為 <code>1000 * 60 * 5</code> milliseconds）。</li>
<li>Stale queries 會在使用者 refocus 瀏覽器的 window 或是瀏覽器重新連線時 refetch，如果不想有這些行為的話，也可以從 <code>refetchOnWindowFocus</code> 和 <code>refetchOnReconnect</code> 這兩個選項來做調整</li>
<li>Queries 如果失敗的話，會 retried 三次，當三次都失敗的時候 status 才會顯示 error，如果要更改這類設定的話，可以從 <code>retry</code> 和 <code>retryDelay</code> 來調整。</li>
<li>Query results 在預設情況下會是 structurally shared 的，以檢測 data 是否有更改，如果沒有的話，references 就會保持不變，以保證 <code>useCallback</code> 和 <code>useMemo</code> value 的穩定。structurally shared 只對 JSON-compatible values 有作用，其他的 value types 都會被視為有變化的，如果你發現效能上的問題來自於太龐大的 response，你可以把 <code>config.structuralSharing</code> 這個選項給 disabled，那如果你在處理 non-JSON compatible values 的話，仍然想監測 data 是否有變化的話，可以從 <code>config.isDataEqual</code> 做更客製化的設定。</li>
</ol>
<h3 id="useQuery"><a href="#useQuery" class="headerlink" title="useQuery"></a>useQuery</h3><p>首先介紹第一個 API，<code>useQuery</code>，目前我們有幾個 component，<code>App.jsx</code>、<code>Navbar.jsx</code>、<code>Planets.jsx</code> 和 <code>People.jsx</code> 這幾個 Component，我們的主角就是 <code>Planets.jsx</code>、<code>People.jsx</code>，其他不重要，<code>Navbar.jsx</code> 就是用來切換 Planets 和 People 用的導覽列。</p>
<p>接下來，我們先到 <code>Planets.jsx</code> 這支檔案，可以看到以下：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Planets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">Planets</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>毫無反應，就是一支無聊的 Component，所以我們來設定一下現在的首要任務目標，以及預計如何執行：</p>
<h4 id="⛳️-任務目標"><a href="#⛳️-任務目標" class="headerlink" title="⛳️ 任務目標"></a>⛳️ 任務目標</h4><p>發 request 從 <code>&#39;https://swapi.dev/api/planets/&#39;</code> 這個 endpoint 取得 response 後，把各個星球的資料 render 到畫面上。</p>
<h4 id="⛳️-如何執行"><a href="#⛳️-如何執行" class="headerlink" title="⛳️ 如何執行"></a>⛳️ 如何執行</h4><p>使用 <code>fetch</code> 和 <code>useQuery</code> 達成任務！</p>
<p>接著我們就開始吧，首先，useQuery 使用上的參數有兩個：</p>
<blockquote>
<ul>
<li>A <strong>unique key for the query</strong></li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>An <strong>asynchronous function (or similar then-able)</strong> to resolve the data</li>
</ul>
</blockquote>
<p>第一個參數必須是一個 unique 的 key，這個 key 可以是字串、陣列、或是物件，這邊為了簡單起見，就先隨便用個字串 <code>planets</code>；第二個參數則是 fetch data 時會用到的非同步 function，這個 function 就是平常你在 fetch data 時會寫的 function，所以我們就先寫成這樣：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useQuery <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-query'</span>

<span class="token keyword">const</span> <span class="token function-variable function">fetchPlanets</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://swapi.dev/api/planets/'</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Planets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> status<span class="token punctuation">,</span> isLoading<span class="token punctuation">,</span> isError<span class="token punctuation">,</span> isSuccess <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span>
    <span class="token string">'planets'</span><span class="token punctuation">,</span>
    fetchPlanets
  <span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> status<span class="token punctuation">,</span> isLoading<span class="token punctuation">,</span> isError <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">Planets</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>很簡單，就是先寫個 asynchronous function，然後把 asynchronous function 當作參數傳入這樣。</p>
<p>接下來，講解一下 useQuery 執行後會回傳的內容：</p>
<blockquote>
<p>data：就是 fetch 後會得到的 response</p>
<p>status：分成三個類型的字串，<code>loading</code>、<code>success</code>、<code>error</code>，就是一般我們在 fetch 時會有的三種狀態</p>
<p>isLoading、isSuccess、isError：如果不喜歡 status 的用法的話，可以改用這些 flag</p>
</blockquote>
<p>因為我比較習慣 <code>isXXX</code> 這類的 flag 用法，在得到 data 之後我們可以寫成這樣：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useQuery <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-query'</span>
<span class="token keyword">import</span> Planet <span class="token keyword">from</span> <span class="token string">'./Planet'</span>

<span class="token keyword">const</span> <span class="token function-variable function">fetchPlanets</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://swapi.dev/api/planets/'</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Planets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> isLoading<span class="token punctuation">,</span> isError<span class="token punctuation">,</span> isSuccess <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span>
    <span class="token string">'planets'</span><span class="token punctuation">,</span>
    fetchPlanets
  <span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">Planets</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>isLoading <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>isError <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Fetching error</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>isSuccess <span class="token operator">&amp;&amp;</span>
        data<span class="token punctuation">.</span>results<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">planet</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Planet</span></span> <span class="token attr-name">planet</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>planet<span class="token punctuation">&#125;</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>planet<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>噹啷！任務目標簡潔且優雅地完成了！這邊新增的 Planet Component 內容長這樣：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Planet</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> planet <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>planet<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">population: </span><span class="token punctuation">&#123;</span>planet<span class="token punctuation">.</span>population<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">terrain : </span><span class="token punctuation">&#123;</span>planet<span class="token punctuation">.</span>terrain<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再稍微調整 css 後畫面會這樣：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gift4o0wk1j31m00u078k.jpg" alt="截圖 2020-09-05 下午3.29.43"></p>
<p>畫面很醜我知道，但我盡力了，然後 <code>People.jsx</code> 要做的事情是差不多的，所以就不多贅述，這是完成後的 <a href="https://codesandbox.io/s/blissful-poincare-vxqv8?file=/src/App.js">codesandbox</a>。</p>
<h4 id="所以…和-useFetch-Hook-差在哪呢？"><a href="#所以…和-useFetch-Hook-差在哪呢？" class="headerlink" title="所以…和 useFetch Hook 差在哪呢？"></a>所以…和 useFetch Hook 差在哪呢？</h4><p>現在 React Hook 也有人作出了各種 fetch data 相關的 custom hook，<code>useQuery</code> 用起來其實大同小異，但最大的差別是在於它背後幫你處理了 cache、deduping、updating  out of date data in the background 等各種事情。</p>
<p>所以你會發現到第一次 fetch 的時候會顯示短暫的 loading 畫面，但之後在「Planet」和「People」切換就順暢無比，因為 data 都從 cached 中取得。</p>
<h3 id="React-Query-DevTool"><a href="#React-Query-DevTool" class="headerlink" title="React Query DevTool"></a>React Query DevTool</h3><p>React Query 還有貼心的提供 Devtool 提供開發者詳細的檢視每個 query 執行的狀態，使用上也很簡單，首先安裝 react query devtools</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> react-query-devtools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  接下來在 App.jsx import 進來：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ReactQueryDevtools <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-query-devtools'</span> <span class="token comment">// 這行</span>
<span class="token keyword">import</span> Navbar <span class="token keyword">from</span> <span class="token string">'./components/Navbar'</span>
<span class="token keyword">import</span> Planets <span class="token keyword">from</span> <span class="token string">'./components/Planets'</span>
<span class="token keyword">import</span> People <span class="token keyword">from</span> <span class="token string">'./components/People'</span>
<span class="token keyword">import</span> <span class="token string">'./App.css'</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>page<span class="token punctuation">,</span> setPage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'planets'</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">Star Wars Info</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Navbar</span></span> <span class="token attr-name">setPage</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>setPage<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token punctuation">&#123;</span>page <span class="token operator">===</span> <span class="token string">'planets'</span> <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Planets</span></span> <span class="token punctuation">/></span></span> <span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">People</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ReactQueryDevtools</span></span> <span class="token attr-name">initialIsOpen</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"> // 以及這行，initialIsOpen 就是設定是否預設為打開的狀態
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>打開目前 localhost 的頁面就可以看到下面的畫面：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giha9kf5brj31gi0u0tgv.jpg" alt="截圖 2020-09-06 下午10.07.38"></p>
<p>可以看到它提供了 Data、Query 的詳細設定、目前 Data 是 fresh、fetching、inactive 等等，如果發送了不同的 query，也會顯示每個 query 的狀態：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gihabcdeeej31gi0u0gtl.jpg" alt="截圖 2020-09-06 下午10.09.06"></p>
<p>用起來蠻像 Redux Devtools 的！設定也超級簡單，安裝後 import 進來就好，介面更是簡潔直觀。</p>
<h3 id="如果想要分頁怎麼做？usePagination！"><a href="#如果想要分頁怎麼做？usePagination！" class="headerlink" title="如果想要分頁怎麼做？usePagination！"></a>如果想要分頁怎麼做？usePagination！</h3><h4 id="key"><a href="#key" class="headerlink" title="key"></a>key</h4><p>前面有很快速的提到，key 可以提供 strings、array、object 等型態，當我們遇到比較複雜的應用場景時，就可以試著用 array 或 object 來應付這些情形，下面就以分頁做範例。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useQuery <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-query'</span>
<span class="token keyword">import</span> Planet <span class="token keyword">from</span> <span class="token string">'./Planet'</span>

<span class="token keyword">const</span> <span class="token function-variable function">fetchPlanets</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> page</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span> <span class="token comment">// output: 1</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://swapi.dev/api/planets/'</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Planets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> isLoading<span class="token punctuation">,</span> isError<span class="token punctuation">,</span> isSuccess <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span><span class="token string">'planets'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 傳入陣列 </span>
    fetchPlanets
  <span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">Planets</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>isLoading <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>isError <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Fetching error</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>isSuccess <span class="token operator">&amp;&amp;</span>
        data<span class="token punctuation">.</span>results<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">planet</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Planet</span></span> <span class="token attr-name">planet</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>planet<span class="token punctuation">&#125;</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>planet<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>當我們把 useQuery 的第一個參數 key 改以陣列傳入時，asynchronous function 的參數值就會依照陣列的順序傳入值，以上面 <code>fetchPlanets</code> 的例子來說，它的第一個 parameter 的值就會是 <code>plaents</code>，第二個 parameter 則是 <code>page</code> ，也因為如此，我們多了更多彈性使用的空間。</p>
<p>舉例來說，我們可以開始作分頁了！</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useQuery <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-query'</span>
<span class="token keyword">import</span> Planet <span class="token keyword">from</span> <span class="token string">'./Planet'</span>

<span class="token keyword">const</span> <span class="token function-variable function">fetchPlanets</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> page</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://swapi.dev/api/planets/?page=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>page<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token comment">// 新增了 page parameter</span>
  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Planets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>page<span class="token punctuation">,</span> setPage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 新增 page state</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> isLoading<span class="token punctuation">,</span> isError<span class="token punctuation">,</span> isSuccess <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span><span class="token string">'planets'</span><span class="token punctuation">,</span> page<span class="token punctuation">]</span><span class="token punctuation">,</span> 
    fetchPlanets
  <span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">Planets</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">page 1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text"> // 增加一堆 button 改變 page
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setPage</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">page 2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setPage</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">page 3</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>isLoading <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>isError <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Fetching error</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>isSuccess <span class="token operator">&amp;&amp;</span>
        data<span class="token punctuation">.</span>results<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">planet</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Planet</span></span> <span class="token attr-name">planet</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>planet<span class="token punctuation">&#125;</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>planet<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>畫面會長這樣：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gihbw2bgddg30nw0hghdt.gif" alt="Sep-06-2020 23-04-08"></p>
<p>上面做的改動很簡單，endpoint 新增 page parameter、page state 以及增加改變 page 的 button，但問題也很顯而易見：</p>
<ol>
<li>這樣新增 button 北七北七的（但這單純是我懶）</li>
<li>切換分頁的時候，會不停顯示 loading，除非 fetch 過一次，才會直接抓 cache 的 data 而不顯示 loading</li>
</ol>
<p>不停切換 loading 和新頁面，雖然一般來說是能夠容忍的，但 UX 似乎可以更好，為了增進 UX，接下來要使用 React Query 提供的另一個 API，就是 usePaginatedQuery！</p>
<h3 id="usePaginatedQuery"><a href="#usePaginatedQuery" class="headerlink" title="usePaginatedQuery"></a>usePaginatedQuery</h3><p>前面使用 <code>useQuery</code> 可以發現到它運作上沒什麼問題，很多的 Web App 也是這樣運作的，但美中不足的地方是 UI 會一直在 <code>success</code> 和 <code>loading</code> 之間切換，不過如果使用 <code>usePaginatedQuery</code>，則有幾個不同的地方：</p>
<ul>
<li><code>usePaginatedQuery</code> 不使用 <code>data</code>，而是改成 <code>resolvedData</code>。<code>resolvedData</code> 是會是上一次成功 fetch 的 query result，當你發送新分頁的 request 時，<code>resolvedData</code> 直到成功 fetch 前都會保持原本的 data，fetch 成功並拿到新的 data 後，<code>resolvedData</code> 才會變成最新的 data。</li>
<li>如果真的需要發送 request 的當下就要拿到 data，可以使用 <code>latestData</code> ，當你發送 request 到被 resolved 前，<code>latestData</code> 會是 <code>undefined</code> 直到 query resolved，所以運作方式就蠻像原本 <code>useQuery</code> 的 <code>data</code>。</li>
</ul>
<p>所以我們把原本 code 改動一下：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> usePaginatedQuery <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-query'</span>
<span class="token keyword">import</span> Planet <span class="token keyword">from</span> <span class="token string">'./Planet'</span>

<span class="token keyword">const</span> <span class="token function-variable function">fetchPlanets</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> page</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://swapi.dev/api/planets/?page=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>page<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Planets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>page<span class="token punctuation">,</span> setPage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    resolvedData<span class="token punctuation">,</span>
    latestData<span class="token punctuation">,</span>
    isLoading<span class="token punctuation">,</span>
    isError<span class="token punctuation">,</span>
    isSuccess<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">usePaginatedQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'planets'</span><span class="token punctuation">,</span> page<span class="token punctuation">]</span><span class="token punctuation">,</span> fetchPlanets<span class="token punctuation">)</span> <span class="token comment">// 從 useQuery 改成使用 usePaginatedQuery</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">Planets</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setPage</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prevPage</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>prevPage <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text"> // 修改一下 button
        Previous Page
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>page<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>
          <span class="token function">setPage</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prevPage</span><span class="token punctuation">)</span> <span class="token operator">=></span>
            <span class="token operator">!</span>latestData <span class="token operator">||</span> <span class="token operator">!</span>latestData<span class="token punctuation">.</span>next <span class="token operator">?</span> prevPage <span class="token operator">:</span> prevPage <span class="token operator">+</span> <span class="token number">1</span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span></span>
      <span class="token punctuation">></span></span><span class="token plain-text">
        Next Page
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>isLoading <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>isError <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Fetching error</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>isSuccess <span class="token operator">&amp;&amp;</span>
        resolvedData<span class="token punctuation">.</span>results<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">planet</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Planet</span></span> <span class="token attr-name">planet</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>planet<span class="token punctuation">&#125;</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>planet<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>附註一下，這邊 Previous Page Button 使用 <code>Math.max</code> 的目的是避免在第一頁的時候會被持續扣減到小於 1。</p>
<p>這時候操作上會變得像是這樣：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gihczyiibeg30nw0hgqv5.gif" alt="Sep-06-2020 23-42-42"></p>
<p>好，改完之後我覺得 UX 有沒有變好呢？…我保持懷疑的態度，原因是原本 UI 的確是會在 loading 和完整的畫面切換（如果要有更好的 UX 應該會是用 Skeleton）；而改用 <code>usePaginatedQuery</code> 後，在 data 完成前，畫面都會保持原樣，所以使用者也可能會懷疑自己的操作到底有沒有成功，有 loading 的話至少還能知道自己操作有成功，只是需要等待。</p>
<h2 id="👉-結語"><a href="#👉-結語" class="headerlink" title="👉 結語"></a>👉 結語</h2><p>如同標題所言，這篇就是 Tutorial，介紹最基本的 API 和使用方式，但還有很多地方沒提及，比如更詳細的官方文件內容、<code>useMutation</code>、React Query 的 cache 怎麼運作等等。</p>
<h3 id="待研究的問題"><a href="#待研究的問題" class="headerlink" title="待研究的問題"></a>待研究的問題</h3><ul>
<li>useMuation 以及官方文件更詳細的內容</li>
<li>data 會 cache 在哪裡？</li>
<li>如果設定一個 staleTIme 後，在過期以前如果資料更新，React Query 會怎麼做？</li>
<li>如果要共用一份 data，只能用 custom hook 嗎？那假如有 Component A 和 B，都要用同一份 data，是否只能 call 兩次 API 呢？如果不想 call 兩次 API，那是不是只能放進 Redux 或 Context 的 Global State 呢？</li>
</ul>
<p>這些問題日後就來研究。</p>
<h2 id="👉-Refercences"><a href="#👉-Refercences" class="headerlink" title="👉 Refercences"></a>👉 Refercences</h2><p><a href="https://react-query.tanstack.com/docs/overview">React Query Docs</a></p>
<p><a href="https://www.youtube.com/watch?v=x1rQ61otgtU&list=PL4cUxeGkcC9jpi7Ptjl5b50p9gLjOFani&index=1">The Net Ninjia - React Query Tutorial</a></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React Query、SWR 的 cache strategy &amp; 淺談 source code</title>
    <url>/2020/11/14/react-query-and-swr-cache-strategy/</url>
    <content><![CDATA[<h2 id="👉-前言"><a href="#👉-前言" class="headerlink" title="👉 前言"></a>👉 前言</h2><p>繼上一篇介紹 React Query 的基本使用方法後，接著想探索 React Query 以及和它相似的 SWR 這兩個 library 的 cache strategy，還有從 source code 看兩者的 cache 如何實踐，以及從 SWR 的 source code 中觀察優化 UX、DX 的小細節。</p>
<span id="more"></span>

<h2 id="👉-Cache-Strategy"><a href="#👉-Cache-Strategy" class="headerlink" title="👉 Cache Strategy"></a>👉 Cache Strategy</h2><h3 id="stale-while-revalidate"><a href="#stale-while-revalidate" class="headerlink" title="stale-while-revalidate"></a>stale-while-revalidate</h3><blockquote>
<p>React Query caching is automatic out of the box. It uses a <code>stale-while-revalidate</code> in-memory caching strategy (popularized by <a href="https://tools.ietf.org/html/rfc5861">HTTP RFC 5861</a>) and a very robust query deduping strategy to always ensure a query’s data is always readily available, only cached when it’s needed, even if that query is used multiple times across your application and updated in the background when possible.</p>
</blockquote>
<p>React Query 以及 SWR 的 cache strategy 是基於 <code>stale-while-revalidate</code> 的概念實踐，甚麼是 <code>stale-while-revalidate</code> 呢？還記得有個 HTTP header 叫做 <code>Cache-Control</code> 嗎？至少我是不太記得，那時候對 <code>Cache-Control</code> 最普遍認知的是裡面有個叫 <code>max-age</code> 的屬性。</p>
<p>舉例來說，假設今天 header 設置了 <code>Cache-Control: max-age: 60</code>，代表的意思就是「我的資源在這 60 秒內取用它的話，就會從 cache 拿」，也就是說在這 60 秒內這份資料都會是新鮮的，要重複使用到它的話，只要從 cache 取出就好，不需要再跟 server 拿，但過了 60 秒後就必須要再跟 server 要資料，因為資料已經過期了。</p>
<p><code>stale-while-revalidate</code> 則是 <code>Cache-Control</code> 的 extension（spec 可參考 <a href="https://tools.ietf.org/html/rfc5861">HTTP RFC 5861</a>）我們把剛剛的舉例再延伸，這次將 <code>Cache-Control</code> 設置成 <code>Cache-Control: max-age=1, stale-while-revalidate=59</code>，意思代表的是「過了 1 秒後我的資料會過期，但沒關係，在之後的 59 秒我還是要從 cache 拿，只是會用非同步、背景更新的方式去 revalidate，等到 60 秒以後，我的資料真正的過期了，才會用同步的方式 revalidate cache」</p>
<p>不夠清楚的話有下面圖例：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkxejl1628j318k0o4jur.jpg" alt="stale-while-revalidate"></p>
<blockquote>
<p>此圖取自於 <a href="https://web.dev/stale-while-revalidate/">Keeping things fresh with stale-while-revalidate</a></p>
</blockquote>
<p>以上面圖例來說：</p>
<ul>
<li>0 - 1 秒時，資料是新鮮的的，就是 <code>max-age: 1</code> 預計會有的行為。</li>
<li>1 - 59 秒時，資料已經過期了，但因為 <code>stale-while-revalidate: 59</code> 的關係，表示我不介意繼續用過期的 cache，但同時我會在背景去 revalidate 我的 cache</li>
<li>60 秒後，代表我資料真正的過期了，就走一般的同步 revalidate 方式</li>
</ul>
<h3 id="和-React-Query、SWR-的關聯是甚麼呢？"><a href="#和-React-Query、SWR-的關聯是甚麼呢？" class="headerlink" title="和 React Query、SWR 的關聯是甚麼呢？"></a>和 React Query、SWR 的關聯是甚麼呢？</h3><p>剛剛有說到這兩個 Library 都是採用 <code>stale-while-revaliate</code> 的 cache strategy，我們可以從這兩個 library 在操作時的行為來看出  <code>stale-while-revaliate</code> 概念的實踐，這時候又要到點到我們之前的 demo：</p>
<p><a href="https://codesandbox.io/s/blissful-poincare-vxqv8?file=/src/App.js">Star Wars Demo</a></p>
<p><img data-src="https://tva1.sinaimg.cn/large/0081Kckwgy1gko3997nvsg30hs099jwv.gif" alt="ezgif-6-01cf903e8474"></p>
<p>可以發現到在切換「Planets」和「People」的時候，第一次會有 loading 的文字顯示，但在這之後就可以很快速的切換頁面，並且資料已經呈現出來了，這當中的運作流程是：</p>
<blockquote>
<ol>
<li>第一次 render 本來就沒有資料，所以 call API 拿資料。</li>
<li>呈現 loading 文字給使用者看。</li>
<li>第二次 render 時，因為有上一次 call API 的資料 cache，所以先呈現 cache 給使用者看。</li>
<li>如果資料和上一次 call API 時相同，那就不會變動；如果資料不同，那就變動畫面。</li>
</ol>
</blockquote>
<p>也就是說使用者在短期內切換畫面時，體感上會覺得挺流暢的，因為他不會每切換一次畫面就看到 loading，使用體驗就會變得比較好。</p>
<p>從 React Query 和 SWR 「<strong>有 cache 就先端給使用者，並且在背景默默更新 cache</strong>」的行為來看，和 <code>stale-while-revalidate</code> 的概念很一致。</p>
<h2 id="👉-React-Query、SWR-Cache-的實踐"><a href="#👉-React-Query、SWR-Cache-的實踐" class="headerlink" title="👉 React Query、SWR Cache 的實踐"></a>👉 React Query、SWR Cache 的實踐</h2><p>目前只是從這兩套 library 的一小角來窺探如何實踐，真正的邏輯更為複雜，對 source code 的理解也未必正確，如有誤也麻煩大力糾錯，感恩感恩。</p>
<h3 id="React-Query"><a href="#React-Query" class="headerlink" title="React Query"></a>React Query</h3><p><a href="https://github.com/tannerlinsley/react-query/blob/69236d3e0bce712376767a86eac9246b304f6be6/src/core/queryCache.ts#L140">React Query - getQueries</a></p>
<p>我會先從 <code>QueryCache</code> 這個 class 的 <code>getQueries</code> method 開始看，因為 <code>getQueries</code> 是從 cache 中撈出 query 的方法，可以從中看到兩件事，第一是 cache 的資料結構，也是我們主要想了解的；第二個是順便了解怎麼它是怎麼取出 query 的。</p>
<p>先看 <code>getQueries</code> 最後一行：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queriesArray<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>predicateFn<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>從這行 code 可以推測 cache 的資料結構是 array，達成了主要目的，可以先休息了，呼。</p>
<p>休息完後繼續看下去，會看到取出的方式是透過 filter 的 <code>predicateFn</code> callback 得到想要的 query，因此我們再看到 <code>predicateFn</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> predicateFn<span class="token operator">:</span> QueryPredicateFn

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> predicate <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  predicateFn <span class="token operator">=</span> predicate <span class="token keyword">as</span> QueryPredicateFn
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> exact<span class="token punctuation">,</span> active<span class="token punctuation">,</span> stale <span class="token punctuation">&#125;</span> <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">const</span> resolvedConfig <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResolvedQueryConfig</span><span class="token punctuation">(</span>predicate<span class="token punctuation">)</span>

  <span class="token function-variable function">predicateFn</span> <span class="token operator">=</span> <span class="token parameter">query</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Check query key if needed</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>anyKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>exact<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// Check if the query key matches exactly</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span>queryHash <span class="token operator">!==</span> resolvedConfig<span class="token punctuation">.</span>queryHash<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// Check if the query key matches partially</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">deepIncludes</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>queryKey<span class="token punctuation">,</span> resolvedConfig<span class="token punctuation">.</span>queryKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// Check active state if needed</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> active <span class="token operator">===</span> <span class="token string">'boolean'</span> <span class="token operator">&amp;&amp;</span> query<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> active<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// Check stale state if needed</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> stale <span class="token operator">===</span> <span class="token string">'boolean'</span> <span class="token operator">&amp;&amp;</span> query<span class="token punctuation">.</span><span class="token function">isStale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> stale<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>從 <code>predicateFn</code> 可以看到它大概做了幾件事：</p>
<ol>
<li>檢查 query key 的 hash 是否相符</li>
<li>檢查狀態是否為 active</li>
<li>檢查狀態是否為 stale</li>
</ol>
<p>經過層層檢查後才會到 return true。</p>
<p>另外，從 <code>query.queryHash</code> 也能夠大概推知 query 的 key 會經過 hash 後放到 <code>queriesArray</code> 裡。</p>
<h3 id="SWR"><a href="#SWR" class="headerlink" title="SWR"></a>SWR</h3><p>接著輪到 SWR 了。</p>
<p><a href="https://github.com/vercel/swr/blob/master/src/cache.ts">swr/src/cache.ts</a></p>
<p>先看 SWR 的 <code>class Cache</code> 裡面的 constructor：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">initialData<span class="token operator">:</span> any <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>__cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>initialData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 這行！</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>__listeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以發現和 React Query Cache 的 Array 不同，SWR 的 Cache 是用 <code>Map</code> 這個資料結構來實現的。用 <code>Map</code> 來實踐我覺得蠻合理的，因為無論 React Query、SWR 都會把 key 經過 hash 後當作那筆資料的 unique identifier，而這個 unique identifier 就會對應到相對應的 data，這種 key-value pairs 的結構就蠻適合使用到 <code>Map</code> 的</p>
<p>接著繼續往下看其他 Cache 的 source code：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token operator">:</span> keyInterface<span class="token punctuation">)</span><span class="token operator">:</span> any <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>_key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">serializeKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>_key<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

<span class="token function">set</span><span class="token punctuation">(</span>key<span class="token operator">:</span> keyInterface<span class="token punctuation">,</span> value<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> any <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>_key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">serializeKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>__cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>_key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>__cache<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token operator">:</span> keyInterface</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>_key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">serializeKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>_key<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>__cache<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">delete</span><span class="token punctuation">(</span>key<span class="token operator">:</span> keyInterface<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>_key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">serializeKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>__cache<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>_key<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以發現到這邊無論 get、set 或 clear 等等，其實都是 <code>Map</code> 內建的 function，更詳細的內容可以看 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Map">MDN - Map</a></p>
<h2 id="👉-從-SWR-source-code-看增進-UX、DX-的小細節"><a href="#👉-從-SWR-source-code-看增進-UX、DX-的小細節" class="headerlink" title="👉 從 SWR source code 看增進 UX、DX 的小細節"></a>👉 從 SWR source code 看增進 UX、DX 的小細節</h2><p>接著再從 SWR 的 source code 挖掘它做了什麼增進 UX 和 DX 的小細節，這邊的小細節是挑我有興趣的部分講。</p>
<h3 id="useIsomorphicEffect"><a href="#useIsomorphicEffect" class="headerlink" title="useIsomorphicEffect"></a>useIsomorphicEffect</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// React currently throws a warning when using useLayoutEffect on the server.</span>
<span class="token comment">// To get around it, we can conditionally useEffect on the server (no-op) and</span>
<span class="token comment">// useLayoutEffect in the browser.</span>
<span class="token keyword">const</span> useIsomorphicLayoutEffect <span class="token operator">=</span> <span class="token constant">IS_SERVER</span> <span class="token operator">?</span> useEffect <span class="token operator">:</span> useLayoutEffect<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>這邊會發現在 Client Side Render 時，SWR 使用 <code>useLayoutEffect</code>，在 Server Side Render 時使用 <code>useEffect</code>；從註解會看到這樣做的原因是在 Server Side Render 的時候使用 <code>useLayoutEffect</code> 會有警告，因此才做了這邊三元運算子的判斷。</p>
<p>至於為甚麼要用 <code>useLayoutEffect</code> 呢？要先從 React Hooks 的執行時機說起：</p>
<p><img data-src="https://raw.githubusercontent.com/donavon/hook-flow/master/hook-flow.png"></p>
<blockquote>
<p>此圖來自於 donavon/hook-flow</p>
</blockquote>
<p>從上圖可以看到 <code>useLayoutEffect</code> 的執行時機在 browser paints screen 之前；<code>useEffect</code> 則是在瀏覽器畫面更新後才會執行，也因此統一改成 useLayoutEffect 後，執行時機就會更提早一些，讓 SWR 撈資料、處理資料的時機更提前。</p>
<p>不過這邊我是有點疑惑的，根據 React 官方文件的說法：</p>
<blockquote>
<p><strong>Tip</strong><br>Unlike componentDidMount or componentDidUpdate, effects scheduled with useEffect don’t block the browser from updating the screen. This makes your app feel more responsive. The majority of effects don’t need to happen synchronously. In the uncommon cases where they do (such as measuring the layout), there is a separate useLayoutEffect Hook with an API identical to useEffect.</p>
</blockquote>
<blockquote>
<p><strong>提示</strong><br>與 componentDidMount 或 componentDidUpdate 不同，使用 useEffect 安排的 effect 不會阻止瀏覽器更新螢幕。這使你的應用程式感覺起來響應更快。大多數 effect 不需要同步發生。在少見的需要同步發生的情況下（例如測量 layout），有另外一個 useLayoutEffect Hook，它的 API 與 useEffect 相同。</p>
</blockquote>
<p><code>useEffect</code> 安排在 render 完後執行的原因是如果 side effect 執行過久的話，就會 block 瀏覽器更新螢幕，所以大多數應用情境官方會比較推薦使用 useEffect，因為不會阻止瀏覽器更新螢幕。</p>
<p>也因為如此，我會比較疑惑的地方是 SWR 改成使用 <code>useLayoutEffect</code> 不會有 side effect 執行過久導致 block UI paints 的狀況嗎？</p>
<p>我猜依然是因為基於 <code>stale-while-revalidate</code> 這個核心思想的關係，使用者會先看到 cache ，背景會默默更新 data；因為使用者會先看到 cache，畫面上至少有東西，所以也比較不用擔心<code>useLayoutEffect</code> 執行過久導致瀏覽器更新螢幕被 block 的問題。</p>
<h3 id="softRevalidate"><a href="#softRevalidate" class="headerlink" title="softRevalidate"></a>softRevalidate</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">softRevalidate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">revalidate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> dedupe<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>這算是比較增進 DX 的部份。</p>
<p>一般來說我們在寫 React Hook 時，會想要把重複的邏輯抽出去變成 custom hook，fetch data 的邏輯也不例外，通常會寫成像是 <code>useFetch</code> 的 custom hook，程式碼會像是這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">useFetch</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>isLoading<span class="token punctuation">,</span> setIsLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>isError<span class="token punctuation">,</span> setIsError<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setIsLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setData</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setIsError</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
        <span class="token function">setIsLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> isLoading<span class="token punctuation">,</span> isError<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著假設我們有兩個 Component，Component A 和 Component B，並且都用到了 <code>useFetch</code> 這個 hook：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ComponentA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> isLoading<span class="token punctuation">,</span> isError<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useFetch</span><span class="token punctuation">(</span><span class="token string">'https://swapi.dev/api/people/1'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">ComponentB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> isLoading<span class="token punctuation">,</span> isError<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useFetch</span><span class="token punctuation">(</span><span class="token string">'https://swapi.dev/api/people/1'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>並且在同一個頁面裡面都使用到了這兩個 Component：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>ComponentA<span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>ComponentB<span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這時候會發生一個問題，明明是要用同一份 API 的資料，但是卻 call 了同一支 API 兩次，也就是發了兩次拿取同樣資料的 request，造成不必要的資源浪費。</p>
<p>但 React Query 和 SWR 不會發生這種狀況，當 query 的 key 相同的時候，就會去掉重複的 request，只會 call 一次 API。</p>
<p>SWR 這段程式碼就是在做這件事情：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">softRevalidate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">revalidate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> dedupe<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>dedupe 設為 true 之後，就會去掉「短時間」內重複的 request，不過這個「短時間」為多少呢？在 SWR 的預設為 2 秒，因此 2 秒內重複的 request 都會被併為一次，避免不必要的 request。</p>
<h3 id="rIC-requestIdleCallback"><a href="#rIC-requestIdleCallback" class="headerlink" title="rIC - requestIdleCallback"></a>rIC - requestIdleCallback</h3><p> <strong>⚠️ 目前 rIC 已經在 2020/11/2 <a href="https://github.com/vercel/swr/pull/744">Replace rIC with rAF #744</a> 的 PR 被改成 rAF</strong></p>
<p>雖然原本 rIC 已經被改成 rAF 了，但還是先從修改前的 source code 來談吧，待會再來看看為何被改成 rAF。</p>
<p>先看看 source code：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// polyfill for requestIdleCallback</span>
<span class="token keyword">const</span> rIC <span class="token operator">=</span> <span class="token constant">IS_SERVER</span>
  <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> window<span class="token punctuation">[</span><span class="token string">'requestAnimationFrame'</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token parameter">f</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">//...中間略</span>

<span class="token function">useIsomorphicLayoutEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//...中間略</span>
  
  <span class="token comment">// trigger a revalidation</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    config<span class="token punctuation">.</span>revalidateOnMount <span class="token operator">||</span>
    <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span>initialData <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>revalidateOnMount <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> latestKeyedData <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// delay revalidate if there's cache</span>
    <span class="token comment">// to not block the rendering</span>
      <span class="token function">rIC</span><span class="token punctuation">(</span>softRevalidate<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">softRevalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> revalidate<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>從註解可以看到，當 <code>typeof latestKeyedData !== &#39;undefined&#39;</code> 時，也就是當我們有 cache 的時候，會執行 <code>rIC</code> 這個 function，而 <code>rIC</code> 代表的就是 Web APIs 中的 <code>requestIdleCallback</code>，所以我們現在可以探討的另一個問題是 - 「<strong>為什麼要用 <code>requestIdleCallback</code>？</strong>」</p>
<h4 id="為甚麼要用-requestIdleCallback？先從瀏覽器談起"><a href="#為甚麼要用-requestIdleCallback？先從瀏覽器談起" class="headerlink" title="為甚麼要用 requestIdleCallback？先從瀏覽器談起"></a>為甚麼要用 requestIdleCallback？先從瀏覽器談起</h4><p>談這個問題之前，我們先談談 JavaScript 與瀏覽器的相處模式，了解一下前因後果。</p>
<p>JavaScript 是 single thread 的，瀏覽器是 muti thread 的，瀏覽器除了處理 JavaScript 的 thread 以外，還會有 UI thread、Network thread、Main thread 等等。</p>
<p>瀏覽器繪製每一個 frame 的流程會像是這樣，會是 JavaScript 先執行，UI thread 再繪製畫面：<br><img data-src="https://developers.google.com/web/fundamentals/performance/rendering/images/intro/frame-full.jpg?hl=zh-tw"></p>
<blockquote>
<p>圖片取自於 <a href="https://developers.google.com/web/fundamentals/performance/rendering?hl=zh-tw">轉譯效能</a></p>
</blockquote>
<p>為什麼是 JavaScript 先執行呢？因為 JavaScript 會涉及到 DOM 的操作，如果今天 JavaScript 和 UI thread 同時在運作的話，畫面可能就會產生非預期的結果，因此 JavaScript 的執行和 UI thread 是不能同時來的，UI thread 會先等 JavaScript 執行完再繪製畫面。</p>
<p>也因為有執行先後順序的關係，假設 JavaScript 執行時間過久，UI thread 就會在那邊苦苦等待，觸發的事件就會等不到回應，使用者就會覺得這網頁很慢。</p>
<p>不過「執行時間過久」好像不太精確，怎麼樣才算是太久呢？目前大部分裝置都是 60 fps，也就是每一秒 60 個 frame，經過換算後，將 1 秒 / 60 (frames) 後， 可以得知一個 frame 的時間為 16.67ms（四捨五入），而一個 frame 除了 JavaScript 要執行以外，瀏覽器還有其他例行任務要做，所以 JavaScript 每個 frame 都要在 10ms 內完成，如果超過這時間就會掉幀，可能導致用戶覺得網頁使用起來不太流暢。</p>
<p>講了這麼多，終於可以說 <code>requestIdleCallback</code> 能夠用來做甚麼了！</p>
<blockquote>
<p>這邊來偷偷複習一下上面那張圖的流程：<br><strong>JavaScript</strong> -&gt; <strong>Style</strong> -&gt; <strong>Layout</strong> -&gt; <strong>Paint</strong> -&gt; <strong>Composite</strong></p>
</blockquote>
<p><code>requestIdleCallback</code> 的用處就是在「<strong>每一個 frame 的空檔</strong>」執行 callback，要是 JavaScript 執行時間太久會導致掉幀，那我們把某些沒那麼優先的任務放在每個 frame 之間執行，就可以減少 JavaScript 執行時間，進而避免掉幀的可能性，網頁使用起來會慢的風險就降低了！簡單來說，<code>requestIdleCallback</code> 就是一個善用空閒時間的 Web API。</p>
<p><code>requestIdleCallback</code> 也提供了一些彈性的使用空間，像是可以設置 <code>deadline</code>，來判斷這個 frame 中還有多少空閒時間（timeRemaining）來完成任務；以及有 <code>timeout</code> 這個參數能夠設置，表示超過這個時間就會讓瀏覽器停止手邊工作，強制執行任務。</p>
<p>另外要特別注意的是，<code>requestIdleCallback</code> 最好是用來進行一些 JavaScript 的運算等等的事情，不要涉及到 DOM 的操作，原因是如果在 <code>requestIdleCallback</code> 操作到 DOM，又會觸發瀏覽器去進行 Layout、Paint 的工作，導致 frame 的執行時間無法預期。</p>
<p>如果涉及 DOM 的操作時，建議使用 <code>requestAnimationFrame</code>，也就是待會要提到的 rAF。</p>
<p><strong>繞了這麼久，所以為甚麼要用 requestIdleCallback？</strong></p>
<p>前情提要結束了，我們再回頭看這段程式碼</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> latestKeyedData <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// delay revalidate if there's cache</span>
  <span class="token comment">// to not block the rendering</span>
  <span class="token function">rIC</span><span class="token punctuation">(</span>softRevalidate<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  <span class="token function">softRevalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>當 <code>typeof latestKeyedData !== &#39;undefined&#39;</code> 的時候，就代表我們目前是有 cache 的，代表使用者「目前畫面上可以看到內容」，因為我們把 cache 的資料先端上去給使用者看了。所以 revalidate 這件事就可以稍微延後，先不要 block 住 rendering，而是在每一個 frame 有空檔的時候執行。</p>
<p>從 SWR 的 source code 就能發現到，很多程式碼上的小細節，都圍繞著「<code>stale-while-revalidate</code>」這個核心概念在建構這套 library。</p>
<h4 id="為何被改成-rAF？"><a href="#為何被改成-rAF？" class="headerlink" title="為何被改成 rAF？"></a>為何被改成 rAF？</h4><p>承接上一段，<code>requestAnimationFrame</code> 會在 frame 的最初執行，用於優化瀏覽器的動畫效能、或是操作 DOM 的任務，延續上一張圖，<code>requestAnimationFrame</code> 執行時機如下：</p>
<p><img data-src="https://cythilya.github.io/assets/critical-rendering-path/requestAnimationFrame.png"></p>
<blockquote>
<p>圖片來源：<a href="https://cythilya.github.io/2018/06/26/animation-optimization/">Making a Silky Smooth Web</a></p>
</blockquote>
<p>修改為 rAF 的起因是一個 issue，連結在此：<br><a href="https://github.com/vercel/swr/issues/731">requestIdleCallback blocked by browser extensions</a></p>
<blockquote>
<p>Data isn’t revalidating when certain browser extensions are installed. One I know for certain is <a href="https://chrome.google.com/webstore/detail/uivision-rpa/gcbalfbdmfieckjlnblleoemohcganoc">UI.Vision RPA</a>. It appears to hold up <code>requestIdleCallback</code> from ever being called.</p>
</blockquote>
<p>看起來原因是 rIC 會因為安裝了某些 browser extensions 導致被 block 住，沒辦法 revalidate。</p>
<p>暫時性的解法是設置 <code>timeout</code>，因為剛剛有提過，設置 <code>timeout</code> 可以在超過預定的時間後，讓瀏覽器強制執行 <code>rIC</code> 的 callback。</p>
<p>不過維護者提議可以將 <code>requestIdleCallback</code> 改為 <code>requestAnimationFrame</code>，因此在 <a href="https://github.com/vercel/swr/pull/744">Replace rIC with rAF #744</a> 這份 PR 就被改成 rAF 了。</p>
<p>至於維護者更深入的考量，以及這個 bug 更深入的起因，因為本人功力尚淺還無法解釋，如果有人能幫忙解答那我會非常感謝 QQ</p>
<h2 id="👉-結語"><a href="#👉-結語" class="headerlink" title="👉 結語"></a>👉 結語</h2><p>這次從 React Query、SWR 的官方文件長了一些知識，知道了 <code>stale-while-revalidate</code> 這個 cache strategy。</p>
<p>另外，這也是首次用不一樣的角度去看 source code，以往沒有那麼常去看 source code，去深入了解一個 library 是如何實踐的；通常是遇到 bug、或是單純想了解架構才有機會翻 source code，但這次不太一樣，是出於好奇心，想知道怎麼做的，才開始這趟翻找 source code 的旅程，並從 library 的核心理念開始探究起「為何是這樣寫？」。不過同時也深深感受到了功力的不足，導致部分的解讀帶有不確定性，抑或是不太了解維護者的改動出自何種原因，看 source code 的速度也不是很快，這部分還需要多加努力 QQ</p>
<p>最後，如果文章有任何錯誤也麻煩不吝指正 🧐</p>
<h2 id="👉-References"><a href="#👉-References" class="headerlink" title="👉 References"></a>👉 References</h2><p>最後的最後，感謝無數無私的開發者分享所學，以下列出的參考資料大大幫助這篇文章的構成。</p>
<p><a href="https://github.com/vercel/swr">vercel/swr</a></p>
<p><a href="https://github.com/tannerlinsley/react-query">tannerlinsley/react-query</a></p>
<p><a href="https://developers.google.com/web/updates/2015/08/using-requestidlecallback">Using requestIdleCallback</a></p>
<p><a href="https://medium.com/d-d-mag/%E5%96%84%E7%94%A8%E7%A9%BA%E9%96%91%E6%99%82%E9%96%93-requestidlecallback-744a9d75faba">requestIdleCallback — 善用空閑時間</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/60307571">深入剖析 React Concurrent</a></p>
<p><a href="https://developers.google.com/web/fundamentals/performance/rendering?hl=zh-tw">轉譯效能</a></p>
<p><a href="https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution?hl=zh-tw">最佳化 JavaScript 執行</a></p>
<p><a href="https://cythilya.github.io/2018/06/26/animation-optimization/">如何提升動畫效能？</a></p>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Window.requestAnimationFrame">Window.requestAnimationFrame()</a></p>
]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>程式導師實驗計畫 - 故事起點與中途站</title>
    <url>/2019/12/15/%E7%A8%8B%E5%BC%8F%E5%B0%8E%E5%B8%AB%E5%AF%A6%E9%A9%97%E8%A8%88%E7%95%AB-%E6%95%85%E4%BA%8B%E8%B5%B7%E9%BB%9E%E8%88%87%E4%B8%AD%E9%80%94%E7%AB%99/</url>
    <content><![CDATA[<h2 id="背景介紹"><a href="#背景介紹" class="headerlink" title="背景介紹"></a>背景介紹</h2><p>安安，我 ChihYang 啦。</p>
<span id="more"></span>

<h3 id="歷史系畢業，很純的純文組。"><a href="#歷史系畢業，很純的純文組。" class="headerlink" title="歷史系畢業，很純的純文組。"></a>歷史系畢業，很純的純文組。</h3><p>就讀中正大學歷史系，必修課寫的論文是「粟特民族的祆教葬俗」，一個連我自己都忘記在寫什麼的論文主題。歷史系訓練出來的能力是「查找文件並篩選資訊」、「了解事件的前後脈絡」、「統整文件及抽象概念後重新組織」這幾項。</p>
<p>個性三分鐘熱度、容易放棄，從前都在自己的舒適圈踏步，求學過程中數學一直不好，覺得文科擅長就走文科，很少踏足文科以外的領域。</p>
<h3 id="一切的起因，起源於學長"><a href="#一切的起因，起源於學長" class="headerlink" title="一切的起因，起源於學長"></a>一切的起因，起源於學長</h3><p>為什麼會想轉職呢？</p>
<p>主要是因為大四快畢業前在因緣際會之下，資管系的學長教了我一咪咪 HTML，後來覺得求知慾大過於平時吸收的資訊量，就改成自己摸索，看完了六角學院的 HTML、CSS、RWD、JavaScript 課程並提交作業，在過程中覺得自己的確對寫 code 頗有興趣，產生了一絲絲「或許我可以試著成為前端工程師」的想法。</p>
<p>沒有想太多，只有純粹學習的樂趣和好奇心就踏入這個世界，但在學習不久後就被抓去當兵了。</p>
<h3 id="學習前的歷程，遺忘與迷惘"><a href="#學習前的歷程，遺忘與迷惘" class="headerlink" title="學習前的歷程，遺忘與迷惘"></a>學習前的歷程，遺忘與迷惘</h3><p>當完兵後幾乎把之前學的東西忘光光，花了幾個禮拜重拾記憶，開始思考「到底要學到什麼程度才能去應徵前端工程師？」，我總覺得自己只是在看線上課程自 high，是個閉門造車的傢伙，超級迷惘自己的方向。</p>
<p>那時覺得迷惘時就來點外在刺激吧，報名好想工作室的 Web Camp 是我踏出舒適圈的第一步，但不幸被刷掉了，那時我的心理狀態還沒有準備好，不太確定自己想不想要投入學習，而好想工作室就是篤定要找方向非常明確的人，另外在對問題的執著度或許也沒達到他們要求，被篩選掉也是理所當然。</p>
<p>被刷掉不完全是壞事，反而這股不甘心激發我的動力，經歷挫敗後才發現自己是有熱忱的，加上之前就有在關注第二期的消息，看到第三期開放報名後就欣喜若狂的寄信了。</p>
<h3 id="為什麼選擇-Huli-的課程？"><a href="#為什麼選擇-Huli-的課程？" class="headerlink" title="為什麼選擇 Huli 的課程？"></a>為什麼選擇 Huli 的課程？</h3><p>第一次關注到 Huli 是 <a href="https://medium.com/hulis-blog/frontend-engineer-guide-297821512f4e">零基礎的小明要如何成為前端工程師？</a> 這篇文，那時候對我是蠻大的震撼，沒想過自己能夠看得懂工程師寫的文章，之前我看工程師寫的文章都覺得像外星語，沒想過有人能寫出地球語，Huli 的思維與特質也很吸引我，於是他成了我第一個關注的工程師。</p>
<p>再特別關注 Huli 已經是第二期結束的時候了，想說幹這課程心得也太 Real 了吧，Huli 檢討自己課程的時候是直接把轉職成功和不成功的人數攤開，非常的硬派，沒有過多的渲染，只有客觀的分析。</p>
<p>看完第二期的心得後，我覺得自己和老師的相性應該會不錯，而且課程內容扎實，轉職失敗也沒損失，自己又喜歡寫廢文，進入課程應該很棒。</p>
<p>另外也報名前也有評估自己的需求，我有什麼需求呢？</p>
<p>第一，我沒有方向，需要一個藍圖以及即時幫我修正方向的導師。第二，不想閉門造車，所以想要一個小社群。MTR03 都是符合這些需求的，毫不猶豫就動手報名。</p>
<p><del>不過每週要投入 40 小時這個前提的確是有讓我猶豫啦。</del></p>
<h3 id="綜上所述，我有什麼條件與性格呢？"><a href="#綜上所述，我有什麼條件與性格呢？" class="headerlink" title="綜上所述，我有什麼條件與性格呢？"></a>綜上所述，我有什麼條件與性格呢？</h3><h4 id="課前程度"><a href="#課前程度" class="headerlink" title="課前程度"></a>課前程度</h4><ul>
<li><strong>程式</strong>：自學六角學院的課程約兩個月，完成 HTML、CSS、RWD、JavaScript 課程並都有繳交作業，會依樣畫葫蘆，實際上對程式邏輯不熟。</li>
<li><strong>英文</strong>：多益裸考 700，閱讀文件沒什麼問題，但需要點時間。</li>
<li><strong>中英打</strong>：中 126/m，英 46/m。</li>
</ul>
<h4 id="工作經歷、背景、個人特質"><a href="#工作經歷、背景、個人特質" class="headerlink" title="工作經歷、背景、個人特質"></a>工作經歷、背景、個人特質</h4><ul>
<li><strong>工作經歷</strong>：無</li>
<li><strong>背景</strong>：歷史系，算是毫無相關，硬要說有影響的話是比較在意技術的演進與脈絡，以及在對於抽象概念的理解與表達會比較清楚。</li>
<li>求學過程中數理成績不佳，是考試時的軟肋。</li>
<li>三分鐘熱度，需要不斷有新東西的刺激才有力氣向前。</li>
<li>單純、衝動，偏好做中學，先行動後思考。</li>
</ul>
<h4 id="學習條件"><a href="#學習條件" class="headerlink" title="學習條件"></a>學習條件</h4><ul>
<li>完整的六個月全職學習時間</li>
<li>Macbook pro 13 吋</li>
<li>住家附近很棒的咖啡廳</li>
</ul>
<h2 id="對於課程的期待"><a href="#對於課程的期待" class="headerlink" title="對於課程的期待"></a>對於課程的期待</h2><p>開始前當然是先研究課綱：</p>
<pre class="line-numbers language-none"><code class="language-none">1. 基本 Git 操作
2. 基本 command line 操作
3. 前端基礎（HTML, CSS, JavaScript）
4. 前端各種工具運用及原理（jQuery, SCSS, Gulp, Webpack）
5. 前端進階（React, Redux）
6. 後端基礎（PHP, Node.js, MySQL）
7. 後端進階（CodeIgniter, Express）
8. 基本網路安全（XSS, SQL Injection, CSRF, 密碼不能存明碼）
9. 部署（買 domain, 設定 DNS, 租 Digital Ocean 主機, 自己架環境）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>除了 3 以外，其他我都完全不懂，連名詞都沒聽過，所以當然是期待結業時可以對上面的技術有一定的掌握度或有基礎認識。</p>
<p>另外看了 Huli 對課程的說明，在內在層面他注重的是「自學」、「技術的脈絡演進」，特別是使用每個技術時思考「為什麼？」的這點，先前我在自己摸索前端技術的時候完全沒想過這問題，我不知道為什麼要用，只知道可以這樣用，對於一個歷史系的人來說不懂事物的脈絡算是很不可思議的事情，所以我也期待在課程中學習每個新技術時，自我檢測能夠有條有理的說出「為什麼要用」</p>
<h3 id="課程開始前，豪緊張"><a href="#課程開始前，豪緊張" class="headerlink" title="課程開始前，豪緊張"></a>課程開始前，豪緊張</h3><p>看到錄取當下是在半夜，興奮地跳起來睡不著，等到心情冷卻後就開始害怕擔心跟不上了，基於這種膽小的心態，我在寄出報名信後就先註冊 Lidemy 看 Week1、2 的 CS101 部分內容，然後先預習 <a href="https://gitbook.tw/">為你自己學 Git</a>，怕的就是稍微落後進度自己就會心態炸裂。</p>
<p>Huli 很暖的地方是發了一篇 <a href="https://medium.com/hulis-blog/before-learning-b9b933b6078e">學程式的第零課：心態調整</a>，開始前我是已經調整好心態了，不過這篇對於過去學習有挫折的人是很有幫助的。</p>
<h2 id="進行課程前制定的原則"><a href="#進行課程前制定的原則" class="headerlink" title="進行課程前制定的原則"></a>進行課程前制定的原則</h2><p>前面說過我是個三分鐘熱度的人，還會拖延，我也深知這點，所以我認為自己應該要像庫拉皮卡的念能力那樣，對自己有一些制約，違背制約就會死翹翹，主要是想藉由幾點原則來養成持續學習的習慣。</p>
<h3 id="每天都要寫心得"><a href="#每天都要寫心得" class="headerlink" title="每天都要寫心得"></a>每天都要寫心得</h3><p>這原則規定我不論假日/平日，或進度如何都要回報今天的學習內容，架構就是按照 ORID 架構來寫，這樣做有幾個好處，第一，是我在撰寫的過程中，可以讓自己慢慢進入學習的狀態，告訴大腦「現在是專注的時間」。第二，每天都可以檢討自身學習狀況，掌控進度，這半年的學習會是一個人的戰鬥，如果沒有每天檢討進度，很容易就忘記自己走到哪裡，失去學習目標和動力。</p>
<h3 id="進度不能拖延"><a href="#進度不能拖延" class="headerlink" title="進度不能拖延"></a>進度不能拖延</h3><p>MTR03 有個表定進度，但還是按照個人學習進度做調配，沒有強制規定要跟上。但我認為按照自己廢廢的個性，落後了就很可能放棄或是拖延症發作，所以規定自己都要準時交作業，這原則類似於第二期 Tian 大大的做法。</p>
<p>幸運的是雖然偶爾會有卡關的狀況，可是都有前兩期的課程直播引導方向，所以仍然可以在每週的最後一刻交出作業。</p>
<h3 id="作業提交後要放鬆"><a href="#作業提交後要放鬆" class="headerlink" title="作業提交後要放鬆"></a>作業提交後要放鬆</h3><p>說這是制約，比較像我的懶惰性格出來放風，每次提交作業的當晚都會放過自己，不管任何課程的東西，單純就爽爽耍廢。</p>
<p><img data-src="http://i.imgur.com/gM1am3I.jpg" alt="享受"></p>
<h3 id="成效如何？"><a href="#成效如何？" class="headerlink" title="成效如何？"></a>成效如何？</h3><p>覺得成效不錯，畢竟撐過六個月的課程了。</p>
<p>制定這些原則，要瞭解你自己是怎麼樣子的人，才能讓你的課程進行順利，比如我知道自己三分鐘熱度、容易放棄，那就必須在課程剛開始最有動力的時候讓自己每天在某個地點開始寫 code，這樣走到後面有點累的時候，也能保持繼續寫 code 習慣。總之就是努力找個符合個人性格的方式，讓自己有辦法在這場學習馬拉松持續跑下去。</p>
<p>所以課程進行 200 天，我就寫 200 天心得，總計約 20 萬字；作業最遲會在當週禮拜天晚上交出去。</p>
<p>每天寫心得變成像儀式般，是我寫程式的開場；進度不能拖延則是讓我習慣評估工時、分配時間。這過程我覺得自己不是只在寫程式，也在學習如何學習，了解自己的習慣和性格來訂定計畫。</p>
<h2 id="計畫-Start！"><a href="#計畫-Start！" class="headerlink" title="計畫 Start！"></a>計畫 Start！</h2><p>在第三期開始後新增了「複習週」的設定，也就是每五週會有個類似馬拉松休息站的地方，讓你在學習的過程中稍微喘口氣，接下來我也會以五週為單位做分段，每五週都會附上複習週的心得，因為時間距離較近的關係，複習週心得會比較貼近當時的心境。</p>
<p>下文中所提到「教學太快」、「資訊太多」的基準，都是以「我這位零基礎學生在當週用 40 小時學習」當作判斷。</p>
<h3 id="課程前期（Week1-Week5）"><a href="#課程前期（Week1-Week5）" class="headerlink" title="課程前期（Week1 ~ Week5）"></a>課程前期（Week1 ~ Week5）</h3><h4 id="Week1-Git、Command-Line-我是坂本龍馬，你是版本控制"><a href="#Week1-Git、Command-Line-我是坂本龍馬，你是版本控制" class="headerlink" title="Week1 | Git、Command Line | 我是坂本龍馬，你是版本控制"></a>Week1 | Git、Command Line | 我是坂本龍馬，你是版本控制</h4><p>Git、Command line 放在 Week1 超級棒，因為課程作業的提交是依照 Github flow，讓初學者從小養成版本控制的概念，並且熟悉 Command line 的操作。</p>
<h4 id="Week2、Week3-JavaScript-基礎"><a href="#Week2、Week3-JavaScript-基礎" class="headerlink" title="Week2、Week3 | JavaScript 基礎"></a>Week2、Week3 | JavaScript 基礎</h4><p>JS101 有部分資訊因為知識的詛咒而太唐突的進入課程，「想講的東西很多，但時間太少。」對於零基礎學生來說，還在習慣「程式碼一行一行地跑」的概念時，就突然要他提升好幾倍的運算速度，不一定能習慣這樣的速度。</p>
<p>但對於有程式基礎的學生來說會很適合，特別是 immutable 的概念講解的很詳細且易懂，超喜歡。廣度和深度兼具，不會蜻蜓點水的跟你介紹各種變數、迴圈就開始實作，而是一步一步講解後，配合簡單的程式解題，讓你慢慢建立計算思維。</p>
<h4 id="Week4-jest、npm、網路基礎"><a href="#Week4-jest、npm、網路基礎" class="headerlink" title="Week4 | jest、npm、網路基礎"></a>Week4 | jest、npm、網路基礎</h4><p>這是我在前期最鬼混的一週，看完影片跟著做，隨意翻翻文件就結束了，連筆記都沒做。</p>
<p>我會認為 jest 放在這時有點太早，學生不太知道單元測試實際能達成什麼樣的效果，此時因為接觸到的問題很小，可能是一兩個 function 來解出一道初學者的題目，那時候都用 <code>console.log</code> 來看 output 是什麼就可以快速看結果，跑 test 還要自己寫輸入輸出，然後等待它測試，再看個結果，以當時的觀點來說就是 <code>console.log</code> 就可以辦到跟 Jest 一樣的事情，就不願意多花時間去琢磨，一直到現在我對測試都不太熟悉。</p>
<p>但其他方面非常棒，網路基礎概念、API 是什麼、如何用 node.js 送 request 給 api 都在這週有簡單的介紹與實作，幫助日後串接 API 鋪梗，對日後接 API 的理解超級有幫助。</p>
<h4 id="Week5-複習週、Lidemy-解謎"><a href="#Week5-複習週、Lidemy-解謎" class="headerlink" title="Week5 | 複習週、Lidemy 解謎"></a>Week5 | 複習週、Lidemy 解謎</h4><p><a href="https://github.com/Lidemy/mentor-program-3rd-ChihYang41/blob/master/homeworks/week5/hw1.md">Week5 複習週心得</a></p>
<h4 id="實體聚會-跪拜-Tian、Amelie-前輩"><a href="#實體聚會-跪拜-Tian、Amelie-前輩" class="headerlink" title="實體聚會 | 跪拜 Tian、Amelie 前輩"></a>實體聚會 | 跪拜 Tian、Amelie 前輩</h4><p>人生第一次參加這種性質的聚會，兩位分享的學長姐是截然不同的人，但共通點是各有自己獨特的學習方法，以及在轉職上這件事的堅持。</p>
<p>印象特別深的地方是 Amelie 說過她理想的公司不能像在養老、樂於學習新技術，還有 code review 必須嚴格。Amelie 講話時發光的眼神，還有做一件事的決心觸動到我了，讓我在計畫初期就開始思考「我想進怎麼樣的公司？」以及「我想成為怎麼樣的工程師？」</p>
<h3 id="課程前中期（Week10-Week15）"><a href="#課程前中期（Week10-Week15）" class="headerlink" title="課程前中期（Week10 ~ Week15）"></a>課程前中期（Week10 ~ Week15）</h3><h4 id="Week6-HTML、CSS"><a href="#Week6-HTML、CSS" class="headerlink" title="Week6 | HTML、CSS"></a>Week6 | HTML、CSS</h4><p>Week6 開始學習 HTML、CSS 練習切版，這週可以改進的地方是作業要求可以更高點，在 RWD 也可以著墨更多，Huli 的想法應該是日後的作業都能練習切版，所以這週都先當作暖身，但日後的作業其實更注重功能的實踐和程式碼結構，版面就比較依賴個人美感和自我要求，因此學生的切版功力會相對弱勢。</p>
<h4 id="Week7-DOM"><a href="#Week7-DOM" class="headerlink" title="Week7 | DOM"></a>Week7 | DOM</h4><p>Week7 則是開始把 HTML、CSS、JavaScript 做結合，出發點很棒，算是將前幾週所學全兜在一起，教學步調稍嫌快速，有點難以在一週內將前幾週解 JavaScript 題目的思維一下子轉換成作業要求的邏輯，並且這也牽涉到一些規劃，或許這邊可以教學生關於「拆分功能」、「規劃結構」的概念，會讓實作更加順暢。</p>
<h4 id="Week8-AJAX"><a href="#Week8-AJAX" class="headerlink" title="Week8 | AJAX"></a>Week8 | AJAX</h4><p>Week8 則延續 Week4 的概念，開始試著接 Twitch API，並且 render 到畫面上，有了先前的知識，花比較多時間在了解 callback 是什麼、為何要用 callback，難度剛好。</p>
<h4 id="Week9-PHP"><a href="#Week9-PHP" class="headerlink" title="Week9 | PHP"></a>Week9 | PHP</h4><p>那一天，人們想起了被留言板支配的恐懼。</p>
<p>留言板總共四個禮拜，不過 Week9 的課程量很多，要學習沒碰過的 PHP、SQL，還有物件導向，課綱一打開就是滿滿的內容，跟前幾週相比不是同個層級的，也是從這週開始培養出篩選資訊或先大量瀏覽文章的習慣，在此之後的每週我都會先評估這週的學習重點是哪些，如果是教學重點以外的技術、名詞，就會先放在技術債區。</p>
<p>Week9 因為課程量太多，課綱也只提供資源，沒有推薦的學習順序，所以我整理出了自己的學習路徑並放在複習心得中，Huli 看到後也很迅速的把課綱內容作調整，並且把之後每週的導讀內容都調整更為詳細。</p>
<p>這週 BE201 的產品規劃教學有幫助到我之後寫 final project 的過程，雖然內容頗為簡易，但至少有這個意識，使我之後實作 final project 能有先做規劃的概念。</p>
<h4 id="Week10-複習週趴兔"><a href="#Week10-複習週趴兔" class="headerlink" title="Week10 | 複習週趴兔"></a>Week10 | 複習週趴兔</h4><p><a href="https://github.com/Lidemy/mentor-program-3rd-ChihYang41/blob/master/homeworks/week10/hw1.md">Week10 複習週心得</a></p>
<p>經歷前面的洗禮，漸漸熟悉課程的速度，腳步站得更穩了。這階段覺得和 Huli 熟悉起來了，提交作業和等待 code review 不像之前那樣戰戰競競，反而有些期待會有怎樣的回饋、該怎麼修正方向。</p>
<p><img data-src="http://i.imgur.com/PQBcQKy.jpg" alt="學生"></p>
<h3 id="課程中期（Week11-Week-15）"><a href="#課程中期（Week11-Week-15）" class="headerlink" title="課程中期（Week11 ~ Week 15）"></a>課程中期（Week11 ~ Week 15）</h3><p>相較於前十週我偶爾都還可以聽到一些曾經有印象的詞彙，Week11 開始所有東西都沒聽過了，也就是完全脫離了舒適圈，進入未知的領域。</p>
<h4 id="Week11-Hash、Cookie、Session"><a href="#Week11-Hash、Cookie、Session" class="headerlink" title="Week11 | Hash、Cookie、Session"></a>Week11 | Hash、Cookie、Session</h4><p>講到 Hash 就想到 Hush，想到 Hush 就想聽<a href="https://www.youtube.com/watch?v=c9FHH0vI6pc">天文特徵</a>。</p>
<p>大家在 Cookie、Session 的分辨沒什麼問題，都知道各自的作用。比較會出問題的應該是 Session 機制的實作，當初在這邊我看到 PHP 內建的 <code>$_SESSION</code> 後也矇了一陣子，後來才發現老師的目的是「<strong>用資料庫實踐 Session 機制</strong>」。如果在作業的說明加上相關的說明，應該可以解決這個誤會。</p>
<p>還有作業寫得非常卡，主要是因為資料結構規劃不好，改留言板的過程中牽一髮動全身，然後又不敢亂動資料庫內容，說真的超痛苦，狠下心把全部東西改掉之後才寫起來比較順。</p>
<h4 id="Week12-XSS、SQL-injection、CSRF"><a href="#Week12-XSS、SQL-injection、CSRF" class="headerlink" title="Week12 | XSS、SQL injection、CSRF"></a>Week12 | XSS、SQL injection、CSRF</h4><p>這週我學習的方式不太對，應該要先試著駭入自己的留言板，再去做資安相關的防護，但我是先看課程、查文件後，就直接著手進行修改，修改完後再做測試，也就是我沒有直接經歷「留言板被入侵」的過程，造成的壞處就是我對這段課程的記憶淺淺的，沒有自己駭過一遍就沒痛過，以及使用的範例都只是跳出 <code>alert</code> 而已，因此沒什麼危機意識。</p>
<h4 id="Week13-Bootstrap、jQuery"><a href="#Week13-Bootstrap、jQuery" class="headerlink" title="Week13 | Bootstrap、jQuery"></a>Week13 | Bootstrap、jQuery</h4><p>這週延伸之前的留言板，把刪除跟新增用 AJAX 來做，第一次接觸整個前後端的溝通，也開始用到 Bootstrap 和 jQuery 兩個 Library，把留言板套上 Bootstrap 後我的感想是：</p>
<p><img data-src="http://i.imgur.com/RYv6Uuc.jpg" alt="漂亮"></p>
<p>身為很懶得切版同時美感也頗糟糕的人，這真的是福音。</p>
<p>我認為先寫原生 JavaScript，這週再開始用 jQuery、Bootstrap 是很適當的安排，課程中會安排幾週看「<a href="https://medium.com/hulis-blog/frontend-engineer-guide-297821512f4e">零基礎的小明要如何成為前端工程師？</a>」，這段時間的學習就能夠體會到整個課程其實就是在走小明走過的路，親身體會技術演進的歷史進程。</p>
<h4 id="Week14-AWS、Domain、Deploy-我是誰？我在幹嘛？"><a href="#Week14-AWS、Domain、Deploy-我是誰？我在幹嘛？" class="headerlink" title="Week14 | AWS、Domain、Deploy | 我是誰？我在幹嘛？"></a>Week14 | AWS、Domain、Deploy | 我是誰？我在幹嘛？</h4><p>進入到這週時我馬上露出 O_O 的傻眼臉，AWS？ACID？什麼東西？超級多陌生的名詞，買網域、買 VM 這些事也完全沒概念。</p>
<p>因為有第二期學長姐詳細的文章 <a href="https://github.com/Lidemy/mentor-program-2nd-yuchun33/issues/15">部署 AWS EC2 遠端主機 + Ubuntu LAMP 環境 + phpmyadmin</a> 來指引如何部署，整個過程非常快速就可以解決。但 Week14 應該要先自己查找文件然後到處摸索，不然走馬看花的把這週解決後，什麼都不記得，只知道自己照樣照做就成功了。</p>
<h4 id="Week15-複習週趴三"><a href="#Week15-複習週趴三" class="headerlink" title="Week15 | 複習週趴三"></a>Week15 | 複習週趴三</h4><p><a href="https://github.com/Lidemy/mentor-program-3rd-ChihYang41/blob/master/homeworks/week15/hw1.md">Week15 複習週心得</a></p>
<p>Week15 是課程的一半了，如果要半途而廢，現在是最好的時機。</p>
<p>這週 Huli 的隨意聊說到一件事情：</p>
<blockquote>
<p>第一件事情是讓我心灰意冷（？）的時刻<br>就是改作業看到有同學交了很爛的 code 上來<br>有幾次居然就是看到有點小生氣，想說寫這什麼爛 code<br>但我當然也不會直接留言說你寫一堆垃圾，因為我不覺得那是件正確的事<br>在感性上我的確是有點生氣的，但這種被感性牽著走的時候冷靜一下才是正解</p>
</blockquote>
<blockquote>
<p>冷靜完就會想說：他寫爛 code 是誰的錯？<br>是他的錯嗎？還是我的錯？看到爛 code 真的有必要生氣嗎？誰沒有寫過爛 code？<br>背後就有很多核心的問題可以去思考<br>然後看到爛 code 的當下就會想說改作業好累，不想再開下一期了XDD<br>不過冷靜過後就好很多了，可以比較去理性地思考一些問題<br>我不認為去責怪學生寫爛 code 是件對的事，因為他很有可能根本沒意識到這件事<br>如果老師只會責怪學生，那到底要這個老師做什麼？<br>之前我提過同理很重要，大家一定都經歷過學校老師把私人情緒帶上課堂<br>若是以前我們就知道這樣是不對的，那怎麼可以自己長大之後也變成這樣？</p>
</blockquote>
<blockquote>
<p>所以我認為比較正確的做法可以是：</p>
<ol>
<li>讓他知道他寫的是爛 code</li>
<li>讓他知道可以怎樣優化</li>
<li>讓他知道寫爛 code 是人之常情，不用太灰心</li>
</ol>
<p>這樣好像才是真正有解決到問題</p>
</blockquote>
<p>我很感謝整個課程強調「同理」這個很有人味的詞，教學從來就不是給多少 input 就得到預期的 output，「同理」的理念能讓我感受到 Huli 是和學生站在一起，他扮演的不只會是將資訊傳遞出去的角色，而是雜揉理性跟感性後，輔助學生將思維轉換，同時兼顧到你心理狀態與能力的教學者。</p>
<p>在這週開始我也有所轉變，開始更積極的看同學 code、當同學有問題時試著解答、互動，如果在這個課程我只扮演學習者，那我就是一個單方面接受的人，但如果可以有所輸出、互動，試著當教學者的角色，看到的視野會更不一樣。</p>
<h3 id="課程中後期（Week16-Week-20）"><a href="#課程中後期（Week16-Week-20）" class="headerlink" title="課程中後期（Week16 ~ Week 20）"></a>課程中後期（Week16 ~ Week 20）</h3><h4 id="Week16-CSS-預處理器、Stack、Queue"><a href="#Week16-CSS-預處理器、Stack、Queue" class="headerlink" title="Week16 | CSS 預處理器、Stack、Queue"></a>Week16 | CSS 預處理器、Stack、Queue</h4><p>Week16 我印象不深，因為 CSS 預處理器先前有稍微碰過，對切版又興致缺缺，所以重點的工具就看看文件、練習語法快速的解決。</p>
<p>Stack 跟 Queue 這週過後其實不太知道在做什麼的，只知道在 Event Loop 有用到這樣的資料結構，但如果能夠講解更多實際的例子，讓學生明白應用到的地方會更好。</p>
<h4 id="Week17-this、Scope、Closure"><a href="#Week17-this、Scope、Closure" class="headerlink" title="Week17 | this、Scope、Closure"></a>Week17 | this、Scope、Closure</h4><p>這是我最喜歡的一週，原因是 JavaScript 都是我曾經想了解，但我搞不懂，或是恐懼去搞懂的。</p>
<p>我曾經想搞懂原型鍊，但我看不懂在說什麼，只看到 <code>__proto__</code> 和 <code>Prototype</code> ，但根本不知道原理，只覺得更模糊了。</p>
<p>也曾經想搞懂 this 在幹嘛，但大部分的技術文章就是硬記，看過就忘記了，又或者是根本不知道為什麼會這樣，只看到各種情境下放上示範程式碼，然後直接跟你說指向誰。</p>
<p>聽過 hoisting，但只知道這個現象，不知道背後原理。</p>
<p>聽過 Closure，聽起來很高大上，不敢亂碰。</p>
<p>這週就是把我曾經沒搞懂的東西，或不懂背後原理的現象整個理解個遍，很爽！Huli 在 Week17 下足了功夫，每個章節都有搭配他淺顯易懂的文章搭配講解，讓我能在面試時秀一波，棒棒。</p>
<h4 id="Week18-Gulp、Webpack"><a href="#Week18-Gulp、Webpack" class="headerlink" title="Week18 | Gulp、Webpack"></a>Week18 | Gulp、Webpack</h4><p>這週首要任務是在思考為什麼要用，以及兩個的差別在哪，因為剛開始接觸會發現兩個工具可以做到的事情有重疊。</p>
<p>這週的重點就是看文件稍微搞懂怎麼做，在 week20 網站優化的過程中就把大部分的任務交給 gulp 了，不過踏入 React 的世界後就沒有碰到 gulp，都是 webpack。</p>
<h4 id="Week19-前後端的最後加點"><a href="#Week19-前後端的最後加點" class="headerlink" title="Week19 | 前後端的最後加點"></a>Week19 | 前後端的最後加點</h4><p>即將踏入框架的前一週，踏入這週就像踏到大魔王城堡的門口前面。</p>
<p>這週要寫 todo list 的前後端，很有趣的是 todo list 會和以往的寫法不同，必須是「資料有變動，畫面就要重新 render」的寫法，也就是為了之後 React 的觀念鋪路。在這邊我花了蠻多時間在思考新的思維，特別是很多內建函式不太熟，比如 <code>filter</code> 等等，有這週的鋪路，讓之後接觸框架的學習曲線沒那麼陡峭。</p>
<h4 id="Week20-最後的複習週"><a href="#Week20-最後的複習週" class="headerlink" title="Week20 | 最後的複習週"></a>Week20 | 最後的複習週</h4><p><a href="https://github.com/Lidemy/mentor-program-3rd-ChihYang41/blob/master/homeworks/week20/hw1.md">week20 複習週心得</a></p>
<p><a href="https://github.com/Lidemy/lazy-hackathon/issues/2">lazy hackthon 優化 - ChihYang41</a></p>
<p>week20 最有趣的地方是新的支線任務 - lazy hackthon 的優化！要負責優化一個載入速度慢到靠北的網頁。算是我第一次接觸到網頁優化的領域，了解網頁如何渲染的過程、什麼是 render-blocking、lazy-loading 等等。</p>
<p>優化的過程使用新學到的新工具 gulp 來處理，因為我超級懶惰，所以成果也不是太好，基本上只有壓縮圖片、轉換成 webp、minify 檔案而已。</p>
<p>很感傷這是最後一次的複習週，每次複習週都嘩啦嘩啦的打了超級多字紀錄自己的學習歷程，書寫的一大用處是可以梳理情緒，每次寫完都有不斷往前的實感，就覺得天啊我居然有辦法一步一步的走到現在。</p>
<h3 id="課程後期（Week21-Week-24）"><a href="#課程後期（Week21-Week-24）" class="headerlink" title="課程後期（Week21 ~ Week 24）"></a>課程後期（Week21 ~ Week 24）</h3><h4 id="Week21、22-React、React-Router"><a href="#Week21、22-React、React-Router" class="headerlink" title="Week21、22 | React、React Router"></a>Week21、22 | React、React Router</h4><p>剛開始學習 React 超級困難，要把以往操作 DOM 的觀念轉換成 state 對應 UI，但這還不打緊，還算能應付，困難的是專有名詞和新東西不斷注入，還有新的寫法，比如什麼是 state、props、life cycle、父子 Component 的溝通以及模組化的開發方式，跟之前完全是不同世界，特別是模組化的開發方式，直到寫了一段時間才逐漸習慣。</p>
<p>React Router 則是沒什麼障礙就能掌握，作業的要求就是帶領你慢慢理解 React Router 用法，修改完之後原本亂糟糟的邏輯變得很清楚，一度覺得自己掌握 React 了，但依照 MTR03 的慣例，當你開始舒服時，就要做好下一週不舒服的準備。</p>
<h4 id="Week23、24-Redux、Middleware"><a href="#Week23、24-Redux、Middleware" class="headerlink" title="Week23、24 | Redux、Middleware"></a>Week23、24 | Redux、Middleware</h4><p>Week23 是我開始嘗試新學習方法的一週。</p>
<p>過往我的學習方式是大量閱讀資料，看著看著腦內就會有脈絡出來，知道大概怎麼做。但 Redux 我開始嘗試新方法，先動手實作再慢慢梳理脈絡。</p>
<p>原因沒有別的，因為看資料還是不懂，索性直接實作，這時才發現 Redux 是個實作大於理論的技術，光是透過教學影片看 Huli 在不同檔案之間轉換是很難理解的，必須要自己寫 container、dispatch、action creator、reducer ，才能慢慢懂運作流程。</p>
<p>middlware 在理解 Redux 概念後就能簡單的套用，把 call API 的 code 抽出去後檔案結構的確變得清楚多了。</p>
<h3 id="Week24-之後呢？"><a href="#Week24-之後呢？" class="headerlink" title="Week24 之後呢？"></a>Week24 之後呢？</h3><p>在 Week24 之後我沈寂了一段時間，每日心得沒說什麼話，和以往差蠻多的。</p>
<p><img data-src="http://i.imgur.com/sKanHkZ.jpg" alt="撞死"></p>
<p>Huli 在 Week28 的隨意聊說到：</p>
<blockquote>
<p>有些學生覺得課程結束之後失去了方向，因為沒有每週進度了，不知道接下來要學什麼，覺得茫然，覺得無助。</p>
<p>你自由了，但自由的代價是你要有更強大的自我管理能力。<br>之前六個月都依賴著課綱，知道下一步要幹嘛，知道最後自己會變成什麼樣子，但這不是一件可以一直持續的事。結業之後，你得靠自己了，不會再有人幫你規劃要學什麼，也不會有人告訴你說哪些知識是重要的。</p>
</blockquote>
<p>課程之後我的確有頓時失去依靠的感覺，因為我是超級依賴每週進度的人，Week24 後的進度表突然跑完了，就很茫然。</p>
<p>特別是開始寫第一次的 final project 然後再砍掉，整整一個禮拜白白浪費掉，又要重新開始規劃新的 project，真的是有點懷疑自己在衝三小。覺得自己好像沒做事，每日心得就有點懶得寫，所以 Week24 ～ 面試前是沒什麼在記錄的，就是流水帳般的敷衍書寫，算是個低潮。</p>
<p>最後經過三個多禮拜的掙扎生出了一個不上不下的作品，自己沒有很滿意，還有很多改進的空間，但改的時候又有點沒力氣動手，因為改 code 又是個工程，需要點衝勁，衝勁卻剛好用完了。</p>
<p>對自己也沒什麼自信，當初期待是不斷掌握新技術的同時，可以認同自己的基礎，逐漸建立自信，但我發現不是這樣，反而是越到後期發現自己懂的很少很少，掌握得只是皮毛的程度，想說我這樣很糟糕吧？學了這半年就這樣嗎？還有好多東西不懂欸？</p>
<p>Huli 此時也說了另一段話：</p>
<blockquote>
<p>在第一期的時候其實計畫名稱有個 prefix，叫做「從零到一」。六個月的課程你們學到很多，但沒學到的也很多，這很正常，我不可能把所有東西都放進課程裡面。而且就像我說過的，當你懂得愈多，不懂得也會愈多，你不該把這個視為一種缺陷，因為這是成長。</p>
</blockquote>
<p>前面有說到我對計劃的期許是基礎變穩，並且建立自信；但隨著課程進行到後期，反而開始變得越來越沒自信，覺得懂的東西非常少，到了 Week24 結束甚至覺得自己什麼都不太會。</p>
<p>因此要找工作時挺沒自信的，畢竟履歷打開就空空的，作品不太完整，了解的技術也只是皮毛，有一度都想要逃避下去，躲在課程中了，但想逃歸想逃，我其實也不知道能逃去哪，逃多久，所以還是該面對。</p>
<p>真正開始面試反而沒那麼可怕，因為不太像是想像中的考試，而是互動、交流、聊聊天，到後面就是抱著去社交與見世面的心態，是個需要熟悉的過程，面試時我還是有很多的問題答不出來、回答的很鳥，但隨著面試次數的上升，對於這些突發狀況的調整進步許多。</p>
<p>在結束課程後這段時間，要幫自己建立的心態是 <strong>「不懂的很多，但這很正常。」</strong></p>
<p>學習時我有個不太實際的心態，就是期待自己結業後能夠什麼都掌握，一切準備周全後才能有自信的離開課程，彷彿武俠小說裡修煉神功大成的武林高手，內力大增後，大喝一聲，打破大門出去武林大殺四方。</p>
<p>但似乎沒有「準備好了」這件事，直到我拿到 offer 要去工作前，都還是覺得自己尚未站穩。所以我重新回過頭看課程名字，「程式導師實驗計畫」，這也是個尚未準備周全的課程不是嗎？但依舊出來招生了，並隨著學生的回饋不斷調整與進化，演變成現在看到的樣貌，面試也是同理，這是個需要藉由回饋再調整自我的過程。</p>
<h2 id="MTR03-裡，我是個怎麼樣的學生？"><a href="#MTR03-裡，我是個怎麼樣的學生？" class="headerlink" title="MTR03 裡，我是個怎麼樣的學生？"></a>MTR03 裡，我是個怎麼樣的學生？</h2><h3 id="很愛找麻煩的學生"><a href="#很愛找麻煩的學生" class="headerlink" title="很愛找麻煩的學生"></a>很愛找麻煩的學生</h3><p>學習課程的時候我會思考「為什麼這樣教？」、「這樣教好在哪 or 有什麼問題？」、「如果是我會怎麼安排？」，如果覺得有更好的方式，就會在提交作業的 pull request 提出，或是在複習週寫落落長的心得給 Huli 建議。</p>
<p>在學習卡關時難免會懷疑自我，比如「我是不是白癡為什麼學不會？？」必須承認我也常會有這種挫敗的心情，但更多時候是先思考「現在學不會，那我能怎麼學？還是課程哪裡能改進？怎麼學能更好？」，不停的修正自己學習方式。</p>
<p>MTR03 是個很有生命力的課程，每一期最後都會和當初預定的進行方式不同，這和寫 code 一樣，必須不停修正方向，不一定能一步到位，永遠能有更好的教法，而 Huli 心態也非常彈性，在評估可行性之後就會馬上執行，所以學生和課程都是不停在轉變的。</p>
<h3 id="很愛串門子的學生"><a href="#很愛串門子的學生" class="headerlink" title="很愛串門子的學生"></a>很愛串門子的學生</h3><p>MTR 的作業提交是透過 Github flow 來進行，code review 確認沒問題之後，就會 Merge。</p>
<p>Huli 在前期的喊話有提到，這課程不只是看課程、交作業而已，看別人寫的程式碼也是非常重要的，所以鼓勵同學們互相去看對方的作業，了解怎麼樣是好的程式碼。</p>
<p>基於這次的鼓勵，以及自己默默學習真的很寂寞，我開始會到處看別人的作業，心情特別愉悅的時候會留下 comment，主要希望透過自己這項行為讓整個課程的同學互動性增加，讓 code review 的風氣更加興盛。</p>
<p>這邊很有感的地方是每次為了 code review 我會不斷地去搜尋資料，把觀念了解得一清二楚才敢給同學建議，可以檢驗自己的學習成果以外也和同學交流。然後觀摩厲害同學的作業也著實能提供我不同角度的思維。</p>
<h2 id="MTR03-優缺點"><a href="#MTR03-優缺點" class="headerlink" title="MTR03 優缺點"></a>MTR03 優缺點</h2><h3 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h3><h4 id="社群-hen-棒"><a href="#社群-hen-棒" class="headerlink" title="社群 hen 棒"></a>社群 hen 棒</h4><p>我喜歡這種小班制以及有進度的課綱，很像回到學校上課的樣子，很累的時候稍微跟同學聊聊、看看同學心得又會有力氣繼續向前了。</p>
<h4 id="Huli-hen-棒"><a href="#Huli-hen-棒" class="headerlink" title="Huli hen 棒"></a>Huli hen 棒</h4><p>說說我認為 Huli 在教育方面哪邊做得很好：</p>
<ol>
<li>尊敬、同理受教者</li>
</ol>
<p>取自<a href="https://blog.heron.me/alfred-adler-41172a3c78f5">我對「被討厭的勇氣二部曲」的理解</a>：</p>
<blockquote>
<p>教育者角色只是協助學生自立，不會參與或強迫施加自己的看法在別人身上（不然就違反了課題分離的概念）。要抱有同理心去思考學生做某件事情的目的為何、了解學生的目的是什麼。</p>
</blockquote>
<ol start="2">
<li>教育是交友不是工作</li>
</ol>
<p>Huli 的出發點是興趣使然才開始教學，就像一拳超人的琦玉那樣，所以無欲則剛。</p>
<p>如果只是因為完成某件事情、可以賺錢，這樣的教育叫做「工作」，然而因為這不會帶給你歸屬感，所以不會感到開心。Huli 的教育比較像是交友，老師與學生是平起平坐的關係，不是上對下的，「交友」關係是開心的。</p>
<p>簡單來說他是個 open-minded，個性隨和、很有人性但是有所堅持的老師。非常對我的調調，態度就是：「寫程式很好，不寫也沒有不好。」所以參加課程蠻放鬆的，沒什麼壓力。</p>
<p>他花費許多心力在做的事情是「把教學調整到大部分人都能懂」以及樂於分享，每週的隨意聊都可以看到他最近在幹嘛，很特別的地方是他會展現「他跟我們一樣」，會跟我們說他在耍廢、拖延症發作，講一些莫名其妙或很有道理的話。</p>
<h4 id="課程內容-hen-棒"><a href="#課程內容-hen-棒" class="headerlink" title="課程內容 hen 棒"></a>課程內容 hen 棒</h4><p>這不用多講，<a href="https://github.com/Lidemy/mentor-program-3rd">課程內容</a>很多，可以讓你從前後端都了解個遍，非常紮實。</p>
<h3 id="可以改進的地方"><a href="#可以改進的地方" class="headerlink" title="可以改進的地方"></a>可以改進的地方</h3><h4 id="知識的詛咒"><a href="#知識的詛咒" class="headerlink" title="知識的詛咒"></a>知識的詛咒</h4><p>在課程剛開始建立觀念時，還是有一些地方會講得太快，或忽略了部分作業的資訊，比如前面提及的 JS101。</p>
<h4 id="課程完整度"><a href="#課程完整度" class="headerlink" title="課程完整度"></a>課程完整度</h4><p>這邊講的不是資訊不足，而是有時那週是一個完整的預錄課程，有時是直播，可以的話我覺得都用預錄課程會更完整。</p>
<h4 id="作業"><a href="#作業" class="headerlink" title="作業"></a>作業</h4><p>課程前期的作業有個問題是「不知道有哪些資訊被省略」，比如 Week7 有些資訊沒有提到，作業中或許需要用到，學生會面對的問題會是「我不知道自己該知道」，可能繞了半天還是找不到該怎麼做，後來會參考同學的作法，並且一邊懷疑自己「為什麼人家知道這個東西，而我不知道，是哪裡出了問題嗎？」</p>
<p>或許在每個作業可以有幾個 hint，提示可以往哪方面著手，讓學生自行決定是否查看。</p>
<p>另外還有完整度的問題，在面試時我面臨到的問題是所有作品的完整度都不夠，就連 final project 也被嫌太小了，也許能讓學生看一下所謂完整的作品大概是怎麼樣，或者是把作業的完整度改善，可以像是留言板的做法，每週作業都是連貫的，在課程結束後會有幾個較完整的作品。</p>
<h4 id="協作"><a href="#協作" class="headerlink" title="協作"></a>協作</h4><p>整個課程都是單打獨鬥，final project 雖然鼓勵協作但不強迫，可以的話能有幾週是同學一同合作寫專案或許會更好，但因為進度不同可能會很麻煩，具體要怎麼做目前沒主意。</p>
<h3 id="不知道如何形容的地方"><a href="#不知道如何形容的地方" class="headerlink" title="不知道如何形容的地方"></a>不知道如何形容的地方</h3><h4 id="自信心"><a href="#自信心" class="headerlink" title="自信心"></a>自信心</h4><p>當週課程結束、寫完作業還是不知道自己會不會寫 code，但我覺得這點很難有所改進，並且不確定這是不是課程的問題，但我的心理狀態在課程結束後反而沒特別有自信，而是認為我好多東西都不懂，從第二期、第三期的學生來看，有自信的學生似乎非常非常少。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><h3 id="和當初的期待有落差嗎？"><a href="#和當初的期待有落差嗎？" class="headerlink" title="和當初的期待有落差嗎？"></a>和當初的期待有落差嗎？</h3><p>先說第一點，「對課綱中所條列的技術有一定掌握度」。</p>
<p>我認為是有滿足自己的期待，已經具備基礎的知識，絕對沒有到每個技術都非常熟悉，不一定能豪不猶豫咻咻咻的就完成，但看文件亦步亦趨的使用是沒問題的，除了建立對技術的基礎認識與使用以外，我覺得更重要的是在過程中慢慢練習看文件自學的能力。</p>
<p>再來是第二點，「學會對每個技術問『為什麼？』」</p>
<p>這點無庸置疑是有符合期待的，每次學習新技術的時候，Huli 都會講解這技術為了什麼存在，又或者是在簡答題就會有檢測，比如「為什麼要用」、「不用會怎麼樣」。很巧的是在「<a href="https://medium.com/@hulitw/how-do-i-write-965328ae91fe">我是如何完成一篇文章的？</a>」看到 Huli 說他很喜歡歷史，造就他這麼注重技術演進的脈絡，和歷史系畢業的我不謀而合。</p>
<h3 id="接下來呢？"><a href="#接下來呢？" class="headerlink" title="接下來呢？"></a>接下來呢？</h3><p>「所有的故事，都是從選擇開始。」</p>
<p>進入 MTR03 這個選擇，我沒有猶豫太久，並且毫不後悔，超級有趣，進行的也蠻順利的，是一個棒到不能再棒的故事，像是火影忍者的中忍考試、七龍珠的天下第一武鬥大會、司法島之前的海賊王。</p>
<p>不過轉職的故事不會只停在結業，順利也不會一直順利下去，面試、選擇工作、正式工作又是其他篇章，老實說，我在工作這個故事章節蠻衰小的，導致目前又必須重新回到面試的過程，故事開始有點轉折、走下坡，像是忍界大戰的火影忍者，或是現在的海賊王（和之國真的不好看）。</p>
<p>但我還是蠻樂觀的，在前一份短暫的工作經驗也很有趣，經歷了超級特別的事件，並且更清楚自己想要進怎麼樣的公司、想要在哪方面精進，算是繞了一圈再重新彌補當初得到 Offer 後覺得可惜的地方，而我也相信自己不會止步於此 👍</p>
]]></content>
      <categories>
        <category>murmur</category>
      </categories>
      <tags>
        <tag>心得</tag>
        <tag>Lidemy</tag>
      </tags>
  </entry>
</search>
